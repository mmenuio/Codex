"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleGroupState = exports.ServiceQuotaExceededException = exports.PropagateTags = exports.PlacementStrategyType = exports.PlacementConstraintType = exports.LaunchType = exports.ScheduleState = exports.FlexibleTimeWindowMode = exports.ConflictException = exports.ValidationException = exports.ThrottlingException = exports.ResourceNotFoundException = exports.InternalServerException = exports.AssignPublicIp = exports.ActionAfterCompletion = void 0;
const SchedulerServiceException_1 = require("./SchedulerServiceException");
exports.ActionAfterCompletion = {
    DELETE: "DELETE",
    NONE: "NONE",
};
exports.AssignPublicIp = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
class InternalServerException extends SchedulerServiceException_1.SchedulerServiceException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerException = InternalServerException;
class ResourceNotFoundException extends SchedulerServiceException_1.SchedulerServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class ThrottlingException extends SchedulerServiceException_1.SchedulerServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
exports.ThrottlingException = ThrottlingException;
class ValidationException extends SchedulerServiceException_1.SchedulerServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ValidationException = ValidationException;
class ConflictException extends SchedulerServiceException_1.SchedulerServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
exports.FlexibleTimeWindowMode = {
    FLEXIBLE: "FLEXIBLE",
    OFF: "OFF",
};
exports.ScheduleState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
exports.LaunchType = {
    EC2: "EC2",
    EXTERNAL: "EXTERNAL",
    FARGATE: "FARGATE",
};
exports.PlacementConstraintType = {
    DISTINCT_INSTANCE: "distinctInstance",
    MEMBER_OF: "memberOf",
};
exports.PlacementStrategyType = {
    BINPACK: "binpack",
    RANDOM: "random",
    SPREAD: "spread",
};
exports.PropagateTags = {
    TASK_DEFINITION: "TASK_DEFINITION",
};
class ServiceQuotaExceededException extends SchedulerServiceException_1.SchedulerServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.ScheduleGroupState = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
};
