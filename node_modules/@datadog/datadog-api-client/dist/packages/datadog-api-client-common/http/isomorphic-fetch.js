"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsomorphicFetchHttpLibrary = void 0;
const http_1 = require("./http");
const cross_fetch_1 = require("cross-fetch");
const pako_1 = __importDefault(require("pako"));
const buffer_from_1 = __importDefault(require("buffer-from"));
const util_1 = require("../util");
class IsomorphicFetchHttpLibrary {
    constructor() {
        this.debug = false;
    }
    send(request) {
        if (this.debug) {
            this.logRequest(request);
        }
        const method = request.getHttpMethod().toString();
        let body = request.getBody();
        let compress = request.getHttpConfig().compress;
        if (compress === undefined) {
            compress = true;
        }
        const headers = request.getHeaders();
        if (typeof body === "string") {
            if (headers["Content-Encoding"] == "gzip") {
                body = (0, buffer_from_1.default)(pako_1.default.gzip(body).buffer);
            }
            else if (headers["Content-Encoding"] == "deflate") {
                body = (0, buffer_from_1.default)(pako_1.default.deflate(body).buffer);
            }
            else if (headers["Content-Encoding"] == "zstd1") {
                if (this.zstdCompressorCallback) {
                    body = this.zstdCompressorCallback(body);
                }
                else {
                    throw new Error("zstdCompressorCallback method missing");
                }
            }
        }
        if (!util_1.isBrowser) {
            if (!headers["Accept-Encoding"]) {
                if (compress) {
                    headers["Accept-Encoding"] = "gzip,deflate";
                }
                else {
                    // We need to enforce it otherwise node-fetch will set a default
                    headers["Accept-Encoding"] = "identity";
                }
            }
        }
        let resultPromise;
        // On non-node environments, use native fetch if available.
        // `cross-fetch` incorrectly assumes all browsers have XHR available.
        // See https://github.com/lquixada/cross-fetch/issues/78
        // TODO: Remove once once above issue is resolved.
        if (!util_1.isNode && typeof fetch === "function") {
            resultPromise = fetch(request.getUrl(), {
                method: method,
                body: body,
                headers: headers,
                signal: request.getHttpConfig().signal,
            }).then((resp) => {
                const headers = {};
                resp.headers.forEach((value, name) => {
                    headers[name] = value;
                });
                const body = {
                    text: () => resp.text(),
                    binary: () => resp.buffer(),
                };
                const response = new http_1.ResponseContext(resp.status, headers, body);
                if (this.debug) {
                    this.logResponse(response);
                }
                return response;
            });
        }
        else {
            resultPromise = (0, cross_fetch_1.fetch)(request.getUrl(), {
                method: method,
                body: body,
                headers: headers,
                signal: request.getHttpConfig().signal,
            }).then((resp) => {
                const headers = {};
                resp.headers.forEach((value, name) => {
                    headers[name] = value;
                });
                const body = {
                    text: () => resp.text(),
                    binary: () => resp.buffer(),
                };
                const response = new http_1.ResponseContext(resp.status, headers, body);
                if (this.debug) {
                    this.logResponse(response);
                }
                return response;
            });
        }
        return resultPromise;
    }
    logRequest(request) {
        var _a;
        const headers = {};
        const originalHeaders = request.getHeaders();
        for (const header in originalHeaders) {
            headers[header] = originalHeaders[header];
        }
        if (headers["DD-API-KEY"]) {
            headers["DD-API-KEY"] = headers["DD-API-KEY"].replace(/./g, "x");
        }
        if (headers["DD-APPLICATION-KEY"]) {
            headers["DD-APPLICATION-KEY"] = headers["DD-APPLICATION-KEY"].replace(/./g, "x");
        }
        const headersJSON = JSON.stringify(headers, null, 2).replace(/\n/g, "\n\t");
        const method = request.getHttpMethod().toString();
        const url = request.getUrl().toString();
        const body = request.getBody()
            ? JSON.stringify(request.getBody(), null, 2).replace(/\n/g, "\n\t")
            : "";
        const compress = (_a = request.getHttpConfig().compress) !== null && _a !== void 0 ? _a : true;
        console.debug("\nrequest: {\n", `\turl: ${url}\n`, `\tmethod: ${method}\n`, `\theaders: ${headersJSON}\n`, `\tcompress: ${compress}\n`, `\tbody: ${body}\n}\n`);
    }
    logResponse(response) {
        const httpStatusCode = response.httpStatusCode;
        const headers = JSON.stringify(response.headers, null, 2).replace(/\n/g, "\n\t");
        console.debug("response: {\n", `\tstatus: ${httpStatusCode}\n`, `\theaders: ${headers}\n`);
    }
}
exports.IsomorphicFetchHttpLibrary = IsomorphicFetchHttpLibrary;
//# sourceMappingURL=isomorphic-fetch.js.map