"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
const APIErrorResponse_1 = require("./APIErrorResponse");
const APIKeyCreateAttributes_1 = require("./APIKeyCreateAttributes");
const APIKeyCreateData_1 = require("./APIKeyCreateData");
const APIKeyCreateRequest_1 = require("./APIKeyCreateRequest");
const APIKeyRelationships_1 = require("./APIKeyRelationships");
const APIKeyResponse_1 = require("./APIKeyResponse");
const APIKeyUpdateAttributes_1 = require("./APIKeyUpdateAttributes");
const APIKeyUpdateData_1 = require("./APIKeyUpdateData");
const APIKeyUpdateRequest_1 = require("./APIKeyUpdateRequest");
const APIKeysResponse_1 = require("./APIKeysResponse");
const ApplicationKeyCreateAttributes_1 = require("./ApplicationKeyCreateAttributes");
const ApplicationKeyCreateData_1 = require("./ApplicationKeyCreateData");
const ApplicationKeyCreateRequest_1 = require("./ApplicationKeyCreateRequest");
const ApplicationKeyRelationships_1 = require("./ApplicationKeyRelationships");
const ApplicationKeyResponse_1 = require("./ApplicationKeyResponse");
const ApplicationKeyUpdateAttributes_1 = require("./ApplicationKeyUpdateAttributes");
const ApplicationKeyUpdateData_1 = require("./ApplicationKeyUpdateData");
const ApplicationKeyUpdateRequest_1 = require("./ApplicationKeyUpdateRequest");
const AuditLogsEvent_1 = require("./AuditLogsEvent");
const AuditLogsEventAttributes_1 = require("./AuditLogsEventAttributes");
const AuditLogsEventsResponse_1 = require("./AuditLogsEventsResponse");
const AuditLogsQueryFilter_1 = require("./AuditLogsQueryFilter");
const AuditLogsQueryOptions_1 = require("./AuditLogsQueryOptions");
const AuditLogsQueryPageOptions_1 = require("./AuditLogsQueryPageOptions");
const AuditLogsResponseLinks_1 = require("./AuditLogsResponseLinks");
const AuditLogsResponseMetadata_1 = require("./AuditLogsResponseMetadata");
const AuditLogsResponsePage_1 = require("./AuditLogsResponsePage");
const AuditLogsSearchEventsRequest_1 = require("./AuditLogsSearchEventsRequest");
const AuditLogsWarning_1 = require("./AuditLogsWarning");
const AuthNMapping_1 = require("./AuthNMapping");
const AuthNMappingAttributes_1 = require("./AuthNMappingAttributes");
const AuthNMappingCreateAttributes_1 = require("./AuthNMappingCreateAttributes");
const AuthNMappingCreateData_1 = require("./AuthNMappingCreateData");
const AuthNMappingCreateRelationships_1 = require("./AuthNMappingCreateRelationships");
const AuthNMappingCreateRequest_1 = require("./AuthNMappingCreateRequest");
const AuthNMappingRelationships_1 = require("./AuthNMappingRelationships");
const AuthNMappingResponse_1 = require("./AuthNMappingResponse");
const AuthNMappingUpdateAttributes_1 = require("./AuthNMappingUpdateAttributes");
const AuthNMappingUpdateData_1 = require("./AuthNMappingUpdateData");
const AuthNMappingUpdateRelationships_1 = require("./AuthNMappingUpdateRelationships");
const AuthNMappingUpdateRequest_1 = require("./AuthNMappingUpdateRequest");
const AuthNMappingsResponse_1 = require("./AuthNMappingsResponse");
const CIAppAggregateBucketValueTimeseriesPoint_1 = require("./CIAppAggregateBucketValueTimeseriesPoint");
const CIAppAggregateSort_1 = require("./CIAppAggregateSort");
const CIAppCompute_1 = require("./CIAppCompute");
const CIAppEventAttributes_1 = require("./CIAppEventAttributes");
const CIAppGroupByHistogram_1 = require("./CIAppGroupByHistogram");
const CIAppPipelineEvent_1 = require("./CIAppPipelineEvent");
const CIAppPipelineEventsRequest_1 = require("./CIAppPipelineEventsRequest");
const CIAppPipelineEventsResponse_1 = require("./CIAppPipelineEventsResponse");
const CIAppPipelinesAggregateRequest_1 = require("./CIAppPipelinesAggregateRequest");
const CIAppPipelinesAggregationBucketsResponse_1 = require("./CIAppPipelinesAggregationBucketsResponse");
const CIAppPipelinesAnalyticsAggregateResponse_1 = require("./CIAppPipelinesAnalyticsAggregateResponse");
const CIAppPipelinesBucketResponse_1 = require("./CIAppPipelinesBucketResponse");
const CIAppPipelinesGroupBy_1 = require("./CIAppPipelinesGroupBy");
const CIAppPipelinesQueryFilter_1 = require("./CIAppPipelinesQueryFilter");
const CIAppQueryOptions_1 = require("./CIAppQueryOptions");
const CIAppQueryPageOptions_1 = require("./CIAppQueryPageOptions");
const CIAppResponseLinks_1 = require("./CIAppResponseLinks");
const CIAppResponseMetadata_1 = require("./CIAppResponseMetadata");
const CIAppResponseMetadataWithPagination_1 = require("./CIAppResponseMetadataWithPagination");
const CIAppResponsePage_1 = require("./CIAppResponsePage");
const CIAppTestEvent_1 = require("./CIAppTestEvent");
const CIAppTestEventsRequest_1 = require("./CIAppTestEventsRequest");
const CIAppTestEventsResponse_1 = require("./CIAppTestEventsResponse");
const CIAppTestsAggregateRequest_1 = require("./CIAppTestsAggregateRequest");
const CIAppTestsAggregationBucketsResponse_1 = require("./CIAppTestsAggregationBucketsResponse");
const CIAppTestsAnalyticsAggregateResponse_1 = require("./CIAppTestsAnalyticsAggregateResponse");
const CIAppTestsBucketResponse_1 = require("./CIAppTestsBucketResponse");
const CIAppTestsGroupBy_1 = require("./CIAppTestsGroupBy");
const CIAppTestsQueryFilter_1 = require("./CIAppTestsQueryFilter");
const CIAppWarning_1 = require("./CIAppWarning");
const ChargebackBreakdown_1 = require("./ChargebackBreakdown");
const CloudConfigurationComplianceRuleOptions_1 = require("./CloudConfigurationComplianceRuleOptions");
const CloudConfigurationRegoRule_1 = require("./CloudConfigurationRegoRule");
const CloudConfigurationRuleCaseCreate_1 = require("./CloudConfigurationRuleCaseCreate");
const CloudConfigurationRuleComplianceSignalOptions_1 = require("./CloudConfigurationRuleComplianceSignalOptions");
const CloudConfigurationRuleCreatePayload_1 = require("./CloudConfigurationRuleCreatePayload");
const CloudConfigurationRuleOptions_1 = require("./CloudConfigurationRuleOptions");
const CloudWorkloadSecurityAgentRuleAttributes_1 = require("./CloudWorkloadSecurityAgentRuleAttributes");
const CloudWorkloadSecurityAgentRuleCreateAttributes_1 = require("./CloudWorkloadSecurityAgentRuleCreateAttributes");
const CloudWorkloadSecurityAgentRuleCreateData_1 = require("./CloudWorkloadSecurityAgentRuleCreateData");
const CloudWorkloadSecurityAgentRuleCreateRequest_1 = require("./CloudWorkloadSecurityAgentRuleCreateRequest");
const CloudWorkloadSecurityAgentRuleCreatorAttributes_1 = require("./CloudWorkloadSecurityAgentRuleCreatorAttributes");
const CloudWorkloadSecurityAgentRuleData_1 = require("./CloudWorkloadSecurityAgentRuleData");
const CloudWorkloadSecurityAgentRuleResponse_1 = require("./CloudWorkloadSecurityAgentRuleResponse");
const CloudWorkloadSecurityAgentRuleUpdateAttributes_1 = require("./CloudWorkloadSecurityAgentRuleUpdateAttributes");
const CloudWorkloadSecurityAgentRuleUpdateData_1 = require("./CloudWorkloadSecurityAgentRuleUpdateData");
const CloudWorkloadSecurityAgentRuleUpdateRequest_1 = require("./CloudWorkloadSecurityAgentRuleUpdateRequest");
const CloudWorkloadSecurityAgentRuleUpdaterAttributes_1 = require("./CloudWorkloadSecurityAgentRuleUpdaterAttributes");
const CloudWorkloadSecurityAgentRulesListResponse_1 = require("./CloudWorkloadSecurityAgentRulesListResponse");
const CloudflareAccountCreateRequest_1 = require("./CloudflareAccountCreateRequest");
const CloudflareAccountCreateRequestAttributes_1 = require("./CloudflareAccountCreateRequestAttributes");
const CloudflareAccountCreateRequestData_1 = require("./CloudflareAccountCreateRequestData");
const CloudflareAccountResponse_1 = require("./CloudflareAccountResponse");
const CloudflareAccountResponseAttributes_1 = require("./CloudflareAccountResponseAttributes");
const CloudflareAccountResponseData_1 = require("./CloudflareAccountResponseData");
const CloudflareAccountUpdateRequest_1 = require("./CloudflareAccountUpdateRequest");
const CloudflareAccountUpdateRequestAttributes_1 = require("./CloudflareAccountUpdateRequestAttributes");
const CloudflareAccountUpdateRequestData_1 = require("./CloudflareAccountUpdateRequestData");
const CloudflareAccountsResponse_1 = require("./CloudflareAccountsResponse");
const ConfluentAccountCreateRequest_1 = require("./ConfluentAccountCreateRequest");
const ConfluentAccountCreateRequestAttributes_1 = require("./ConfluentAccountCreateRequestAttributes");
const ConfluentAccountCreateRequestData_1 = require("./ConfluentAccountCreateRequestData");
const ConfluentAccountResourceAttributes_1 = require("./ConfluentAccountResourceAttributes");
const ConfluentAccountResponse_1 = require("./ConfluentAccountResponse");
const ConfluentAccountResponseAttributes_1 = require("./ConfluentAccountResponseAttributes");
const ConfluentAccountResponseData_1 = require("./ConfluentAccountResponseData");
const ConfluentAccountUpdateRequest_1 = require("./ConfluentAccountUpdateRequest");
const ConfluentAccountUpdateRequestAttributes_1 = require("./ConfluentAccountUpdateRequestAttributes");
const ConfluentAccountUpdateRequestData_1 = require("./ConfluentAccountUpdateRequestData");
const ConfluentAccountsResponse_1 = require("./ConfluentAccountsResponse");
const ConfluentResourceRequest_1 = require("./ConfluentResourceRequest");
const ConfluentResourceRequestAttributes_1 = require("./ConfluentResourceRequestAttributes");
const ConfluentResourceRequestData_1 = require("./ConfluentResourceRequestData");
const ConfluentResourceResponse_1 = require("./ConfluentResourceResponse");
const ConfluentResourceResponseAttributes_1 = require("./ConfluentResourceResponseAttributes");
const ConfluentResourceResponseData_1 = require("./ConfluentResourceResponseData");
const ConfluentResourcesResponse_1 = require("./ConfluentResourcesResponse");
const CostByOrg_1 = require("./CostByOrg");
const CostByOrgAttributes_1 = require("./CostByOrgAttributes");
const CostByOrgResponse_1 = require("./CostByOrgResponse");
const Creator_1 = require("./Creator");
const DashboardListAddItemsRequest_1 = require("./DashboardListAddItemsRequest");
const DashboardListAddItemsResponse_1 = require("./DashboardListAddItemsResponse");
const DashboardListDeleteItemsRequest_1 = require("./DashboardListDeleteItemsRequest");
const DashboardListDeleteItemsResponse_1 = require("./DashboardListDeleteItemsResponse");
const DashboardListItem_1 = require("./DashboardListItem");
const DashboardListItemRequest_1 = require("./DashboardListItemRequest");
const DashboardListItemResponse_1 = require("./DashboardListItemResponse");
const DashboardListItems_1 = require("./DashboardListItems");
const DashboardListUpdateItemsRequest_1 = require("./DashboardListUpdateItemsRequest");
const DashboardListUpdateItemsResponse_1 = require("./DashboardListUpdateItemsResponse");
const DataScalarColumn_1 = require("./DataScalarColumn");
const Event_1 = require("./Event");
const EventAttributes_1 = require("./EventAttributes");
const EventResponse_1 = require("./EventResponse");
const EventResponseAttributes_1 = require("./EventResponseAttributes");
const EventsCompute_1 = require("./EventsCompute");
const EventsGroupBy_1 = require("./EventsGroupBy");
const EventsGroupBySort_1 = require("./EventsGroupBySort");
const EventsListRequest_1 = require("./EventsListRequest");
const EventsListResponse_1 = require("./EventsListResponse");
const EventsListResponseLinks_1 = require("./EventsListResponseLinks");
const EventsQueryFilter_1 = require("./EventsQueryFilter");
const EventsQueryOptions_1 = require("./EventsQueryOptions");
const EventsRequestPage_1 = require("./EventsRequestPage");
const EventsResponseMetadata_1 = require("./EventsResponseMetadata");
const EventsResponseMetadataPage_1 = require("./EventsResponseMetadataPage");
const EventsScalarQuery_1 = require("./EventsScalarQuery");
const EventsSearch_1 = require("./EventsSearch");
const EventsTimeseriesQuery_1 = require("./EventsTimeseriesQuery");
const EventsWarning_1 = require("./EventsWarning");
const FastlyAccounResponseAttributes_1 = require("./FastlyAccounResponseAttributes");
const FastlyAccountCreateRequest_1 = require("./FastlyAccountCreateRequest");
const FastlyAccountCreateRequestAttributes_1 = require("./FastlyAccountCreateRequestAttributes");
const FastlyAccountCreateRequestData_1 = require("./FastlyAccountCreateRequestData");
const FastlyAccountResponse_1 = require("./FastlyAccountResponse");
const FastlyAccountResponseData_1 = require("./FastlyAccountResponseData");
const FastlyAccountUpdateRequest_1 = require("./FastlyAccountUpdateRequest");
const FastlyAccountUpdateRequestAttributes_1 = require("./FastlyAccountUpdateRequestAttributes");
const FastlyAccountUpdateRequestData_1 = require("./FastlyAccountUpdateRequestData");
const FastlyAccountsResponse_1 = require("./FastlyAccountsResponse");
const FastlyService_1 = require("./FastlyService");
const FastlyServiceAttributes_1 = require("./FastlyServiceAttributes");
const FastlyServiceData_1 = require("./FastlyServiceData");
const FastlyServiceRequest_1 = require("./FastlyServiceRequest");
const FastlyServiceResponse_1 = require("./FastlyServiceResponse");
const FastlyServicesResponse_1 = require("./FastlyServicesResponse");
const FormulaLimit_1 = require("./FormulaLimit");
const FullAPIKey_1 = require("./FullAPIKey");
const FullAPIKeyAttributes_1 = require("./FullAPIKeyAttributes");
const FullApplicationKey_1 = require("./FullApplicationKey");
const FullApplicationKeyAttributes_1 = require("./FullApplicationKeyAttributes");
const GroupScalarColumn_1 = require("./GroupScalarColumn");
const HTTPLogError_1 = require("./HTTPLogError");
const HTTPLogErrors_1 = require("./HTTPLogErrors");
const HTTPLogItem_1 = require("./HTTPLogItem");
const HourlyUsage_1 = require("./HourlyUsage");
const HourlyUsageAttributes_1 = require("./HourlyUsageAttributes");
const HourlyUsageMeasurement_1 = require("./HourlyUsageMeasurement");
const HourlyUsageMetadata_1 = require("./HourlyUsageMetadata");
const HourlyUsagePagination_1 = require("./HourlyUsagePagination");
const HourlyUsageResponse_1 = require("./HourlyUsageResponse");
const IPAllowlistAttributes_1 = require("./IPAllowlistAttributes");
const IPAllowlistData_1 = require("./IPAllowlistData");
const IPAllowlistEntry_1 = require("./IPAllowlistEntry");
const IPAllowlistEntryAttributes_1 = require("./IPAllowlistEntryAttributes");
const IPAllowlistEntryData_1 = require("./IPAllowlistEntryData");
const IPAllowlistResponse_1 = require("./IPAllowlistResponse");
const IPAllowlistUpdateRequest_1 = require("./IPAllowlistUpdateRequest");
const IdPMetadataFormData_1 = require("./IdPMetadataFormData");
const IncidentAttachmentData_1 = require("./IncidentAttachmentData");
const IncidentAttachmentLinkAttributes_1 = require("./IncidentAttachmentLinkAttributes");
const IncidentAttachmentLinkAttributesAttachmentObject_1 = require("./IncidentAttachmentLinkAttributesAttachmentObject");
const IncidentAttachmentPostmortemAttributes_1 = require("./IncidentAttachmentPostmortemAttributes");
const IncidentAttachmentRelationships_1 = require("./IncidentAttachmentRelationships");
const IncidentAttachmentUpdateData_1 = require("./IncidentAttachmentUpdateData");
const IncidentAttachmentUpdateRequest_1 = require("./IncidentAttachmentUpdateRequest");
const IncidentAttachmentUpdateResponse_1 = require("./IncidentAttachmentUpdateResponse");
const IncidentAttachmentsPostmortemAttributesAttachmentObject_1 = require("./IncidentAttachmentsPostmortemAttributesAttachmentObject");
const IncidentAttachmentsResponse_1 = require("./IncidentAttachmentsResponse");
const IncidentCreateAttributes_1 = require("./IncidentCreateAttributes");
const IncidentCreateData_1 = require("./IncidentCreateData");
const IncidentCreateRelationships_1 = require("./IncidentCreateRelationships");
const IncidentCreateRequest_1 = require("./IncidentCreateRequest");
const IncidentFieldAttributesMultipleValue_1 = require("./IncidentFieldAttributesMultipleValue");
const IncidentFieldAttributesSingleValue_1 = require("./IncidentFieldAttributesSingleValue");
const IncidentIntegrationMetadataAttributes_1 = require("./IncidentIntegrationMetadataAttributes");
const IncidentIntegrationMetadataCreateData_1 = require("./IncidentIntegrationMetadataCreateData");
const IncidentIntegrationMetadataCreateRequest_1 = require("./IncidentIntegrationMetadataCreateRequest");
const IncidentIntegrationMetadataListResponse_1 = require("./IncidentIntegrationMetadataListResponse");
const IncidentIntegrationMetadataPatchData_1 = require("./IncidentIntegrationMetadataPatchData");
const IncidentIntegrationMetadataPatchRequest_1 = require("./IncidentIntegrationMetadataPatchRequest");
const IncidentIntegrationMetadataResponse_1 = require("./IncidentIntegrationMetadataResponse");
const IncidentIntegrationMetadataResponseData_1 = require("./IncidentIntegrationMetadataResponseData");
const IncidentNotificationHandle_1 = require("./IncidentNotificationHandle");
const IncidentResponse_1 = require("./IncidentResponse");
const IncidentResponseAttributes_1 = require("./IncidentResponseAttributes");
const IncidentResponseData_1 = require("./IncidentResponseData");
const IncidentResponseMeta_1 = require("./IncidentResponseMeta");
const IncidentResponseMetaPagination_1 = require("./IncidentResponseMetaPagination");
const IncidentResponseRelationships_1 = require("./IncidentResponseRelationships");
const IncidentSearchResponse_1 = require("./IncidentSearchResponse");
const IncidentSearchResponseAttributes_1 = require("./IncidentSearchResponseAttributes");
const IncidentSearchResponseData_1 = require("./IncidentSearchResponseData");
const IncidentSearchResponseFacetsData_1 = require("./IncidentSearchResponseFacetsData");
const IncidentSearchResponseFieldFacetData_1 = require("./IncidentSearchResponseFieldFacetData");
const IncidentSearchResponseIncidentsData_1 = require("./IncidentSearchResponseIncidentsData");
const IncidentSearchResponseNumericFacetData_1 = require("./IncidentSearchResponseNumericFacetData");
const IncidentSearchResponseNumericFacetDataAggregates_1 = require("./IncidentSearchResponseNumericFacetDataAggregates");
const IncidentSearchResponsePropertyFieldFacetData_1 = require("./IncidentSearchResponsePropertyFieldFacetData");
const IncidentSearchResponseUserFacetData_1 = require("./IncidentSearchResponseUserFacetData");
const IncidentServiceCreateAttributes_1 = require("./IncidentServiceCreateAttributes");
const IncidentServiceCreateData_1 = require("./IncidentServiceCreateData");
const IncidentServiceCreateRequest_1 = require("./IncidentServiceCreateRequest");
const IncidentServiceRelationships_1 = require("./IncidentServiceRelationships");
const IncidentServiceResponse_1 = require("./IncidentServiceResponse");
const IncidentServiceResponseAttributes_1 = require("./IncidentServiceResponseAttributes");
const IncidentServiceResponseData_1 = require("./IncidentServiceResponseData");
const IncidentServiceUpdateAttributes_1 = require("./IncidentServiceUpdateAttributes");
const IncidentServiceUpdateData_1 = require("./IncidentServiceUpdateData");
const IncidentServiceUpdateRequest_1 = require("./IncidentServiceUpdateRequest");
const IncidentServicesResponse_1 = require("./IncidentServicesResponse");
const IncidentTeamCreateAttributes_1 = require("./IncidentTeamCreateAttributes");
const IncidentTeamCreateData_1 = require("./IncidentTeamCreateData");
const IncidentTeamCreateRequest_1 = require("./IncidentTeamCreateRequest");
const IncidentTeamRelationships_1 = require("./IncidentTeamRelationships");
const IncidentTeamResponse_1 = require("./IncidentTeamResponse");
const IncidentTeamResponseAttributes_1 = require("./IncidentTeamResponseAttributes");
const IncidentTeamResponseData_1 = require("./IncidentTeamResponseData");
const IncidentTeamUpdateAttributes_1 = require("./IncidentTeamUpdateAttributes");
const IncidentTeamUpdateData_1 = require("./IncidentTeamUpdateData");
const IncidentTeamUpdateRequest_1 = require("./IncidentTeamUpdateRequest");
const IncidentTeamsResponse_1 = require("./IncidentTeamsResponse");
const IncidentTimelineCellMarkdownCreateAttributes_1 = require("./IncidentTimelineCellMarkdownCreateAttributes");
const IncidentTimelineCellMarkdownCreateAttributesContent_1 = require("./IncidentTimelineCellMarkdownCreateAttributesContent");
const IncidentUpdateAttributes_1 = require("./IncidentUpdateAttributes");
const IncidentUpdateData_1 = require("./IncidentUpdateData");
const IncidentUpdateRelationships_1 = require("./IncidentUpdateRelationships");
const IncidentUpdateRequest_1 = require("./IncidentUpdateRequest");
const IncidentsResponse_1 = require("./IncidentsResponse");
const IntakePayloadAccepted_1 = require("./IntakePayloadAccepted");
const JiraIntegrationMetadata_1 = require("./JiraIntegrationMetadata");
const JiraIntegrationMetadataIssuesItem_1 = require("./JiraIntegrationMetadataIssuesItem");
const ListApplicationKeysResponse_1 = require("./ListApplicationKeysResponse");
const Log_1 = require("./Log");
const LogAttributes_1 = require("./LogAttributes");
const LogsAggregateBucket_1 = require("./LogsAggregateBucket");
const LogsAggregateBucketValueTimeseriesPoint_1 = require("./LogsAggregateBucketValueTimeseriesPoint");
const LogsAggregateRequest_1 = require("./LogsAggregateRequest");
const LogsAggregateRequestPage_1 = require("./LogsAggregateRequestPage");
const LogsAggregateResponse_1 = require("./LogsAggregateResponse");
const LogsAggregateResponseData_1 = require("./LogsAggregateResponseData");
const LogsAggregateSort_1 = require("./LogsAggregateSort");
const LogsArchive_1 = require("./LogsArchive");
const LogsArchiveAttributes_1 = require("./LogsArchiveAttributes");
const LogsArchiveCreateRequest_1 = require("./LogsArchiveCreateRequest");
const LogsArchiveCreateRequestAttributes_1 = require("./LogsArchiveCreateRequestAttributes");
const LogsArchiveCreateRequestDefinition_1 = require("./LogsArchiveCreateRequestDefinition");
const LogsArchiveDefinition_1 = require("./LogsArchiveDefinition");
const LogsArchiveDestinationAzure_1 = require("./LogsArchiveDestinationAzure");
const LogsArchiveDestinationGCS_1 = require("./LogsArchiveDestinationGCS");
const LogsArchiveDestinationS3_1 = require("./LogsArchiveDestinationS3");
const LogsArchiveIntegrationAzure_1 = require("./LogsArchiveIntegrationAzure");
const LogsArchiveIntegrationGCS_1 = require("./LogsArchiveIntegrationGCS");
const LogsArchiveIntegrationS3_1 = require("./LogsArchiveIntegrationS3");
const LogsArchiveOrder_1 = require("./LogsArchiveOrder");
const LogsArchiveOrderAttributes_1 = require("./LogsArchiveOrderAttributes");
const LogsArchiveOrderDefinition_1 = require("./LogsArchiveOrderDefinition");
const LogsArchives_1 = require("./LogsArchives");
const LogsCompute_1 = require("./LogsCompute");
const LogsGroupBy_1 = require("./LogsGroupBy");
const LogsGroupByHistogram_1 = require("./LogsGroupByHistogram");
const LogsListRequest_1 = require("./LogsListRequest");
const LogsListRequestPage_1 = require("./LogsListRequestPage");
const LogsListResponse_1 = require("./LogsListResponse");
const LogsListResponseLinks_1 = require("./LogsListResponseLinks");
const LogsMetricCompute_1 = require("./LogsMetricCompute");
const LogsMetricCreateAttributes_1 = require("./LogsMetricCreateAttributes");
const LogsMetricCreateData_1 = require("./LogsMetricCreateData");
const LogsMetricCreateRequest_1 = require("./LogsMetricCreateRequest");
const LogsMetricFilter_1 = require("./LogsMetricFilter");
const LogsMetricGroupBy_1 = require("./LogsMetricGroupBy");
const LogsMetricResponse_1 = require("./LogsMetricResponse");
const LogsMetricResponseAttributes_1 = require("./LogsMetricResponseAttributes");
const LogsMetricResponseCompute_1 = require("./LogsMetricResponseCompute");
const LogsMetricResponseData_1 = require("./LogsMetricResponseData");
const LogsMetricResponseFilter_1 = require("./LogsMetricResponseFilter");
const LogsMetricResponseGroupBy_1 = require("./LogsMetricResponseGroupBy");
const LogsMetricUpdateAttributes_1 = require("./LogsMetricUpdateAttributes");
const LogsMetricUpdateCompute_1 = require("./LogsMetricUpdateCompute");
const LogsMetricUpdateData_1 = require("./LogsMetricUpdateData");
const LogsMetricUpdateRequest_1 = require("./LogsMetricUpdateRequest");
const LogsMetricsResponse_1 = require("./LogsMetricsResponse");
const LogsQueryFilter_1 = require("./LogsQueryFilter");
const LogsQueryOptions_1 = require("./LogsQueryOptions");
const LogsResponseMetadata_1 = require("./LogsResponseMetadata");
const LogsResponseMetadataPage_1 = require("./LogsResponseMetadataPage");
const LogsWarning_1 = require("./LogsWarning");
const Metric_1 = require("./Metric");
const MetricAllTags_1 = require("./MetricAllTags");
const MetricAllTagsAttributes_1 = require("./MetricAllTagsAttributes");
const MetricAllTagsResponse_1 = require("./MetricAllTagsResponse");
const MetricBulkTagConfigCreate_1 = require("./MetricBulkTagConfigCreate");
const MetricBulkTagConfigCreateAttributes_1 = require("./MetricBulkTagConfigCreateAttributes");
const MetricBulkTagConfigCreateRequest_1 = require("./MetricBulkTagConfigCreateRequest");
const MetricBulkTagConfigDelete_1 = require("./MetricBulkTagConfigDelete");
const MetricBulkTagConfigDeleteAttributes_1 = require("./MetricBulkTagConfigDeleteAttributes");
const MetricBulkTagConfigDeleteRequest_1 = require("./MetricBulkTagConfigDeleteRequest");
const MetricBulkTagConfigResponse_1 = require("./MetricBulkTagConfigResponse");
const MetricBulkTagConfigStatus_1 = require("./MetricBulkTagConfigStatus");
const MetricBulkTagConfigStatusAttributes_1 = require("./MetricBulkTagConfigStatusAttributes");
const MetricCustomAggregation_1 = require("./MetricCustomAggregation");
const MetricDistinctVolume_1 = require("./MetricDistinctVolume");
const MetricDistinctVolumeAttributes_1 = require("./MetricDistinctVolumeAttributes");
const MetricEstimate_1 = require("./MetricEstimate");
const MetricEstimateAttributes_1 = require("./MetricEstimateAttributes");
const MetricEstimateResponse_1 = require("./MetricEstimateResponse");
const MetricIngestedIndexedVolume_1 = require("./MetricIngestedIndexedVolume");
const MetricIngestedIndexedVolumeAttributes_1 = require("./MetricIngestedIndexedVolumeAttributes");
const MetricMetadata_1 = require("./MetricMetadata");
const MetricOrigin_1 = require("./MetricOrigin");
const MetricPayload_1 = require("./MetricPayload");
const MetricPoint_1 = require("./MetricPoint");
const MetricResource_1 = require("./MetricResource");
const MetricSeries_1 = require("./MetricSeries");
const MetricSuggestedTagsAndAggregations_1 = require("./MetricSuggestedTagsAndAggregations");
const MetricSuggestedTagsAndAggregationsResponse_1 = require("./MetricSuggestedTagsAndAggregationsResponse");
const MetricSuggestedTagsAttributes_1 = require("./MetricSuggestedTagsAttributes");
const MetricTagConfiguration_1 = require("./MetricTagConfiguration");
const MetricTagConfigurationAttributes_1 = require("./MetricTagConfigurationAttributes");
const MetricTagConfigurationCreateAttributes_1 = require("./MetricTagConfigurationCreateAttributes");
const MetricTagConfigurationCreateData_1 = require("./MetricTagConfigurationCreateData");
const MetricTagConfigurationCreateRequest_1 = require("./MetricTagConfigurationCreateRequest");
const MetricTagConfigurationResponse_1 = require("./MetricTagConfigurationResponse");
const MetricTagConfigurationUpdateAttributes_1 = require("./MetricTagConfigurationUpdateAttributes");
const MetricTagConfigurationUpdateData_1 = require("./MetricTagConfigurationUpdateData");
const MetricTagConfigurationUpdateRequest_1 = require("./MetricTagConfigurationUpdateRequest");
const MetricVolumesResponse_1 = require("./MetricVolumesResponse");
const MetricsAndMetricTagConfigurationsResponse_1 = require("./MetricsAndMetricTagConfigurationsResponse");
const MetricsScalarQuery_1 = require("./MetricsScalarQuery");
const MetricsTimeseriesQuery_1 = require("./MetricsTimeseriesQuery");
const MonitorConfigPolicyAttributeCreateRequest_1 = require("./MonitorConfigPolicyAttributeCreateRequest");
const MonitorConfigPolicyAttributeEditRequest_1 = require("./MonitorConfigPolicyAttributeEditRequest");
const MonitorConfigPolicyAttributeResponse_1 = require("./MonitorConfigPolicyAttributeResponse");
const MonitorConfigPolicyCreateData_1 = require("./MonitorConfigPolicyCreateData");
const MonitorConfigPolicyCreateRequest_1 = require("./MonitorConfigPolicyCreateRequest");
const MonitorConfigPolicyEditData_1 = require("./MonitorConfigPolicyEditData");
const MonitorConfigPolicyEditRequest_1 = require("./MonitorConfigPolicyEditRequest");
const MonitorConfigPolicyListResponse_1 = require("./MonitorConfigPolicyListResponse");
const MonitorConfigPolicyResponse_1 = require("./MonitorConfigPolicyResponse");
const MonitorConfigPolicyResponseData_1 = require("./MonitorConfigPolicyResponseData");
const MonitorConfigPolicyTagPolicy_1 = require("./MonitorConfigPolicyTagPolicy");
const MonitorConfigPolicyTagPolicyCreateRequest_1 = require("./MonitorConfigPolicyTagPolicyCreateRequest");
const MonitorType_1 = require("./MonitorType");
const NullableRelationshipToUser_1 = require("./NullableRelationshipToUser");
const NullableRelationshipToUserData_1 = require("./NullableRelationshipToUserData");
const OnDemandConcurrencyCap_1 = require("./OnDemandConcurrencyCap");
const OnDemandConcurrencyCapAttributes_1 = require("./OnDemandConcurrencyCapAttributes");
const OnDemandConcurrencyCapResponse_1 = require("./OnDemandConcurrencyCapResponse");
const OpsgenieServiceCreateAttributes_1 = require("./OpsgenieServiceCreateAttributes");
const OpsgenieServiceCreateData_1 = require("./OpsgenieServiceCreateData");
const OpsgenieServiceCreateRequest_1 = require("./OpsgenieServiceCreateRequest");
const OpsgenieServiceResponse_1 = require("./OpsgenieServiceResponse");
const OpsgenieServiceResponseAttributes_1 = require("./OpsgenieServiceResponseAttributes");
const OpsgenieServiceResponseData_1 = require("./OpsgenieServiceResponseData");
const OpsgenieServiceUpdateAttributes_1 = require("./OpsgenieServiceUpdateAttributes");
const OpsgenieServiceUpdateData_1 = require("./OpsgenieServiceUpdateData");
const OpsgenieServiceUpdateRequest_1 = require("./OpsgenieServiceUpdateRequest");
const OpsgenieServicesResponse_1 = require("./OpsgenieServicesResponse");
const Organization_1 = require("./Organization");
const OrganizationAttributes_1 = require("./OrganizationAttributes");
const Pagination_1 = require("./Pagination");
const PartialAPIKey_1 = require("./PartialAPIKey");
const PartialAPIKeyAttributes_1 = require("./PartialAPIKeyAttributes");
const PartialApplicationKey_1 = require("./PartialApplicationKey");
const PartialApplicationKeyAttributes_1 = require("./PartialApplicationKeyAttributes");
const PartialApplicationKeyResponse_1 = require("./PartialApplicationKeyResponse");
const Permission_1 = require("./Permission");
const PermissionAttributes_1 = require("./PermissionAttributes");
const PermissionsResponse_1 = require("./PermissionsResponse");
const ProcessSummariesMeta_1 = require("./ProcessSummariesMeta");
const ProcessSummariesMetaPage_1 = require("./ProcessSummariesMetaPage");
const ProcessSummariesResponse_1 = require("./ProcessSummariesResponse");
const ProcessSummary_1 = require("./ProcessSummary");
const ProcessSummaryAttributes_1 = require("./ProcessSummaryAttributes");
const QueryFormula_1 = require("./QueryFormula");
const RUMAggregateBucketValueTimeseriesPoint_1 = require("./RUMAggregateBucketValueTimeseriesPoint");
const RUMAggregateRequest_1 = require("./RUMAggregateRequest");
const RUMAggregateSort_1 = require("./RUMAggregateSort");
const RUMAggregationBucketsResponse_1 = require("./RUMAggregationBucketsResponse");
const RUMAnalyticsAggregateResponse_1 = require("./RUMAnalyticsAggregateResponse");
const RUMApplication_1 = require("./RUMApplication");
const RUMApplicationAttributes_1 = require("./RUMApplicationAttributes");
const RUMApplicationCreate_1 = require("./RUMApplicationCreate");
const RUMApplicationCreateAttributes_1 = require("./RUMApplicationCreateAttributes");
const RUMApplicationCreateRequest_1 = require("./RUMApplicationCreateRequest");
const RUMApplicationList_1 = require("./RUMApplicationList");
const RUMApplicationListAttributes_1 = require("./RUMApplicationListAttributes");
const RUMApplicationResponse_1 = require("./RUMApplicationResponse");
const RUMApplicationUpdate_1 = require("./RUMApplicationUpdate");
const RUMApplicationUpdateAttributes_1 = require("./RUMApplicationUpdateAttributes");
const RUMApplicationUpdateRequest_1 = require("./RUMApplicationUpdateRequest");
const RUMApplicationsResponse_1 = require("./RUMApplicationsResponse");
const RUMBucketResponse_1 = require("./RUMBucketResponse");
const RUMCompute_1 = require("./RUMCompute");
const RUMEvent_1 = require("./RUMEvent");
const RUMEventAttributes_1 = require("./RUMEventAttributes");
const RUMEventsResponse_1 = require("./RUMEventsResponse");
const RUMGroupBy_1 = require("./RUMGroupBy");
const RUMGroupByHistogram_1 = require("./RUMGroupByHistogram");
const RUMQueryFilter_1 = require("./RUMQueryFilter");
const RUMQueryOptions_1 = require("./RUMQueryOptions");
const RUMQueryPageOptions_1 = require("./RUMQueryPageOptions");
const RUMResponseLinks_1 = require("./RUMResponseLinks");
const RUMResponseMetadata_1 = require("./RUMResponseMetadata");
const RUMResponsePage_1 = require("./RUMResponsePage");
const RUMSearchEventsRequest_1 = require("./RUMSearchEventsRequest");
const RUMWarning_1 = require("./RUMWarning");
const RelationshipToIncidentAttachment_1 = require("./RelationshipToIncidentAttachment");
const RelationshipToIncidentAttachmentData_1 = require("./RelationshipToIncidentAttachmentData");
const RelationshipToIncidentIntegrationMetadataData_1 = require("./RelationshipToIncidentIntegrationMetadataData");
const RelationshipToIncidentIntegrationMetadatas_1 = require("./RelationshipToIncidentIntegrationMetadatas");
const RelationshipToIncidentPostmortem_1 = require("./RelationshipToIncidentPostmortem");
const RelationshipToIncidentPostmortemData_1 = require("./RelationshipToIncidentPostmortemData");
const RelationshipToOrganization_1 = require("./RelationshipToOrganization");
const RelationshipToOrganizationData_1 = require("./RelationshipToOrganizationData");
const RelationshipToOrganizations_1 = require("./RelationshipToOrganizations");
const RelationshipToPermission_1 = require("./RelationshipToPermission");
const RelationshipToPermissionData_1 = require("./RelationshipToPermissionData");
const RelationshipToPermissions_1 = require("./RelationshipToPermissions");
const RelationshipToRole_1 = require("./RelationshipToRole");
const RelationshipToRoleData_1 = require("./RelationshipToRoleData");
const RelationshipToRoles_1 = require("./RelationshipToRoles");
const RelationshipToSAMLAssertionAttribute_1 = require("./RelationshipToSAMLAssertionAttribute");
const RelationshipToSAMLAssertionAttributeData_1 = require("./RelationshipToSAMLAssertionAttributeData");
const RelationshipToUser_1 = require("./RelationshipToUser");
const RelationshipToUserData_1 = require("./RelationshipToUserData");
const RelationshipToUsers_1 = require("./RelationshipToUsers");
const ResponseMetaAttributes_1 = require("./ResponseMetaAttributes");
const RestrictionPolicy_1 = require("./RestrictionPolicy");
const RestrictionPolicyAttributes_1 = require("./RestrictionPolicyAttributes");
const RestrictionPolicyBinding_1 = require("./RestrictionPolicyBinding");
const RestrictionPolicyResponse_1 = require("./RestrictionPolicyResponse");
const RestrictionPolicyUpdateRequest_1 = require("./RestrictionPolicyUpdateRequest");
const Role_1 = require("./Role");
const RoleAttributes_1 = require("./RoleAttributes");
const RoleClone_1 = require("./RoleClone");
const RoleCloneAttributes_1 = require("./RoleCloneAttributes");
const RoleCloneRequest_1 = require("./RoleCloneRequest");
const RoleCreateAttributes_1 = require("./RoleCreateAttributes");
const RoleCreateData_1 = require("./RoleCreateData");
const RoleCreateRequest_1 = require("./RoleCreateRequest");
const RoleCreateResponse_1 = require("./RoleCreateResponse");
const RoleCreateResponseData_1 = require("./RoleCreateResponseData");
const RoleRelationships_1 = require("./RoleRelationships");
const RoleResponse_1 = require("./RoleResponse");
const RoleResponseRelationships_1 = require("./RoleResponseRelationships");
const RoleUpdateAttributes_1 = require("./RoleUpdateAttributes");
const RoleUpdateData_1 = require("./RoleUpdateData");
const RoleUpdateRequest_1 = require("./RoleUpdateRequest");
const RoleUpdateResponse_1 = require("./RoleUpdateResponse");
const RoleUpdateResponseData_1 = require("./RoleUpdateResponseData");
const RolesResponse_1 = require("./RolesResponse");
const SAMLAssertionAttribute_1 = require("./SAMLAssertionAttribute");
const SAMLAssertionAttributeAttributes_1 = require("./SAMLAssertionAttributeAttributes");
const ScalarFormulaQueryRequest_1 = require("./ScalarFormulaQueryRequest");
const ScalarFormulaQueryResponse_1 = require("./ScalarFormulaQueryResponse");
const ScalarFormulaRequest_1 = require("./ScalarFormulaRequest");
const ScalarFormulaRequestAttributes_1 = require("./ScalarFormulaRequestAttributes");
const ScalarFormulaResponseAtrributes_1 = require("./ScalarFormulaResponseAtrributes");
const ScalarMeta_1 = require("./ScalarMeta");
const ScalarResponse_1 = require("./ScalarResponse");
const SecurityFilter_1 = require("./SecurityFilter");
const SecurityFilterAttributes_1 = require("./SecurityFilterAttributes");
const SecurityFilterCreateAttributes_1 = require("./SecurityFilterCreateAttributes");
const SecurityFilterCreateData_1 = require("./SecurityFilterCreateData");
const SecurityFilterCreateRequest_1 = require("./SecurityFilterCreateRequest");
const SecurityFilterExclusionFilter_1 = require("./SecurityFilterExclusionFilter");
const SecurityFilterExclusionFilterResponse_1 = require("./SecurityFilterExclusionFilterResponse");
const SecurityFilterMeta_1 = require("./SecurityFilterMeta");
const SecurityFilterResponse_1 = require("./SecurityFilterResponse");
const SecurityFilterUpdateAttributes_1 = require("./SecurityFilterUpdateAttributes");
const SecurityFilterUpdateData_1 = require("./SecurityFilterUpdateData");
const SecurityFilterUpdateRequest_1 = require("./SecurityFilterUpdateRequest");
const SecurityFiltersResponse_1 = require("./SecurityFiltersResponse");
const SecurityMonitoringFilter_1 = require("./SecurityMonitoringFilter");
const SecurityMonitoringListRulesResponse_1 = require("./SecurityMonitoringListRulesResponse");
const SecurityMonitoringRuleCase_1 = require("./SecurityMonitoringRuleCase");
const SecurityMonitoringRuleCaseCreate_1 = require("./SecurityMonitoringRuleCaseCreate");
const SecurityMonitoringRuleImpossibleTravelOptions_1 = require("./SecurityMonitoringRuleImpossibleTravelOptions");
const SecurityMonitoringRuleNewValueOptions_1 = require("./SecurityMonitoringRuleNewValueOptions");
const SecurityMonitoringRuleOptions_1 = require("./SecurityMonitoringRuleOptions");
const SecurityMonitoringRuleUpdatePayload_1 = require("./SecurityMonitoringRuleUpdatePayload");
const SecurityMonitoringSignal_1 = require("./SecurityMonitoringSignal");
const SecurityMonitoringSignalAssigneeUpdateAttributes_1 = require("./SecurityMonitoringSignalAssigneeUpdateAttributes");
const SecurityMonitoringSignalAssigneeUpdateData_1 = require("./SecurityMonitoringSignalAssigneeUpdateData");
const SecurityMonitoringSignalAssigneeUpdateRequest_1 = require("./SecurityMonitoringSignalAssigneeUpdateRequest");
const SecurityMonitoringSignalAttributes_1 = require("./SecurityMonitoringSignalAttributes");
const SecurityMonitoringSignalIncidentsUpdateAttributes_1 = require("./SecurityMonitoringSignalIncidentsUpdateAttributes");
const SecurityMonitoringSignalIncidentsUpdateData_1 = require("./SecurityMonitoringSignalIncidentsUpdateData");
const SecurityMonitoringSignalIncidentsUpdateRequest_1 = require("./SecurityMonitoringSignalIncidentsUpdateRequest");
const SecurityMonitoringSignalListRequest_1 = require("./SecurityMonitoringSignalListRequest");
const SecurityMonitoringSignalListRequestFilter_1 = require("./SecurityMonitoringSignalListRequestFilter");
const SecurityMonitoringSignalListRequestPage_1 = require("./SecurityMonitoringSignalListRequestPage");
const SecurityMonitoringSignalRuleCreatePayload_1 = require("./SecurityMonitoringSignalRuleCreatePayload");
const SecurityMonitoringSignalRuleQuery_1 = require("./SecurityMonitoringSignalRuleQuery");
const SecurityMonitoringSignalRuleResponse_1 = require("./SecurityMonitoringSignalRuleResponse");
const SecurityMonitoringSignalRuleResponseQuery_1 = require("./SecurityMonitoringSignalRuleResponseQuery");
const SecurityMonitoringSignalStateUpdateAttributes_1 = require("./SecurityMonitoringSignalStateUpdateAttributes");
const SecurityMonitoringSignalStateUpdateData_1 = require("./SecurityMonitoringSignalStateUpdateData");
const SecurityMonitoringSignalStateUpdateRequest_1 = require("./SecurityMonitoringSignalStateUpdateRequest");
const SecurityMonitoringSignalTriageAttributes_1 = require("./SecurityMonitoringSignalTriageAttributes");
const SecurityMonitoringSignalTriageUpdateData_1 = require("./SecurityMonitoringSignalTriageUpdateData");
const SecurityMonitoringSignalTriageUpdateResponse_1 = require("./SecurityMonitoringSignalTriageUpdateResponse");
const SecurityMonitoringSignalsListResponse_1 = require("./SecurityMonitoringSignalsListResponse");
const SecurityMonitoringSignalsListResponseLinks_1 = require("./SecurityMonitoringSignalsListResponseLinks");
const SecurityMonitoringSignalsListResponseMeta_1 = require("./SecurityMonitoringSignalsListResponseMeta");
const SecurityMonitoringSignalsListResponseMetaPage_1 = require("./SecurityMonitoringSignalsListResponseMetaPage");
const SecurityMonitoringStandardRuleCreatePayload_1 = require("./SecurityMonitoringStandardRuleCreatePayload");
const SecurityMonitoringStandardRuleQuery_1 = require("./SecurityMonitoringStandardRuleQuery");
const SecurityMonitoringStandardRuleResponse_1 = require("./SecurityMonitoringStandardRuleResponse");
const SecurityMonitoringTriageUser_1 = require("./SecurityMonitoringTriageUser");
const SensitiveDataScannerConfigRequest_1 = require("./SensitiveDataScannerConfigRequest");
const SensitiveDataScannerConfiguration_1 = require("./SensitiveDataScannerConfiguration");
const SensitiveDataScannerConfigurationData_1 = require("./SensitiveDataScannerConfigurationData");
const SensitiveDataScannerConfigurationRelationships_1 = require("./SensitiveDataScannerConfigurationRelationships");
const SensitiveDataScannerCreateGroupResponse_1 = require("./SensitiveDataScannerCreateGroupResponse");
const SensitiveDataScannerCreateRuleResponse_1 = require("./SensitiveDataScannerCreateRuleResponse");
const SensitiveDataScannerFilter_1 = require("./SensitiveDataScannerFilter");
const SensitiveDataScannerGetConfigResponse_1 = require("./SensitiveDataScannerGetConfigResponse");
const SensitiveDataScannerGetConfigResponseData_1 = require("./SensitiveDataScannerGetConfigResponseData");
const SensitiveDataScannerGroup_1 = require("./SensitiveDataScannerGroup");
const SensitiveDataScannerGroupAttributes_1 = require("./SensitiveDataScannerGroupAttributes");
const SensitiveDataScannerGroupCreate_1 = require("./SensitiveDataScannerGroupCreate");
const SensitiveDataScannerGroupCreateRequest_1 = require("./SensitiveDataScannerGroupCreateRequest");
const SensitiveDataScannerGroupData_1 = require("./SensitiveDataScannerGroupData");
const SensitiveDataScannerGroupDeleteRequest_1 = require("./SensitiveDataScannerGroupDeleteRequest");
const SensitiveDataScannerGroupDeleteResponse_1 = require("./SensitiveDataScannerGroupDeleteResponse");
const SensitiveDataScannerGroupIncludedItem_1 = require("./SensitiveDataScannerGroupIncludedItem");
const SensitiveDataScannerGroupItem_1 = require("./SensitiveDataScannerGroupItem");
const SensitiveDataScannerGroupList_1 = require("./SensitiveDataScannerGroupList");
const SensitiveDataScannerGroupRelationships_1 = require("./SensitiveDataScannerGroupRelationships");
const SensitiveDataScannerGroupResponse_1 = require("./SensitiveDataScannerGroupResponse");
const SensitiveDataScannerGroupUpdate_1 = require("./SensitiveDataScannerGroupUpdate");
const SensitiveDataScannerGroupUpdateRequest_1 = require("./SensitiveDataScannerGroupUpdateRequest");
const SensitiveDataScannerGroupUpdateResponse_1 = require("./SensitiveDataScannerGroupUpdateResponse");
const SensitiveDataScannerMeta_1 = require("./SensitiveDataScannerMeta");
const SensitiveDataScannerMetaVersionOnly_1 = require("./SensitiveDataScannerMetaVersionOnly");
const SensitiveDataScannerReorderConfig_1 = require("./SensitiveDataScannerReorderConfig");
const SensitiveDataScannerReorderGroupsResponse_1 = require("./SensitiveDataScannerReorderGroupsResponse");
const SensitiveDataScannerRule_1 = require("./SensitiveDataScannerRule");
const SensitiveDataScannerRuleAttributes_1 = require("./SensitiveDataScannerRuleAttributes");
const SensitiveDataScannerRuleCreate_1 = require("./SensitiveDataScannerRuleCreate");
const SensitiveDataScannerRuleCreateRequest_1 = require("./SensitiveDataScannerRuleCreateRequest");
const SensitiveDataScannerRuleData_1 = require("./SensitiveDataScannerRuleData");
const SensitiveDataScannerRuleDeleteRequest_1 = require("./SensitiveDataScannerRuleDeleteRequest");
const SensitiveDataScannerRuleDeleteResponse_1 = require("./SensitiveDataScannerRuleDeleteResponse");
const SensitiveDataScannerRuleIncludedItem_1 = require("./SensitiveDataScannerRuleIncludedItem");
const SensitiveDataScannerRuleRelationships_1 = require("./SensitiveDataScannerRuleRelationships");
const SensitiveDataScannerRuleResponse_1 = require("./SensitiveDataScannerRuleResponse");
const SensitiveDataScannerRuleUpdate_1 = require("./SensitiveDataScannerRuleUpdate");
const SensitiveDataScannerRuleUpdateRequest_1 = require("./SensitiveDataScannerRuleUpdateRequest");
const SensitiveDataScannerRuleUpdateResponse_1 = require("./SensitiveDataScannerRuleUpdateResponse");
const SensitiveDataScannerStandardPattern_1 = require("./SensitiveDataScannerStandardPattern");
const SensitiveDataScannerStandardPatternAttributes_1 = require("./SensitiveDataScannerStandardPatternAttributes");
const SensitiveDataScannerStandardPatternData_1 = require("./SensitiveDataScannerStandardPatternData");
const SensitiveDataScannerStandardPatternsResponseData_1 = require("./SensitiveDataScannerStandardPatternsResponseData");
const SensitiveDataScannerStandardPatternsResponseItem_1 = require("./SensitiveDataScannerStandardPatternsResponseItem");
const SensitiveDataScannerTextReplacement_1 = require("./SensitiveDataScannerTextReplacement");
const ServiceAccountCreateAttributes_1 = require("./ServiceAccountCreateAttributes");
const ServiceAccountCreateData_1 = require("./ServiceAccountCreateData");
const ServiceAccountCreateRequest_1 = require("./ServiceAccountCreateRequest");
const ServiceDefinitionCreateResponse_1 = require("./ServiceDefinitionCreateResponse");
const ServiceDefinitionData_1 = require("./ServiceDefinitionData");
const ServiceDefinitionDataAttributes_1 = require("./ServiceDefinitionDataAttributes");
const ServiceDefinitionGetResponse_1 = require("./ServiceDefinitionGetResponse");
const ServiceDefinitionMeta_1 = require("./ServiceDefinitionMeta");
const ServiceDefinitionV1_1 = require("./ServiceDefinitionV1");
const ServiceDefinitionV1Contact_1 = require("./ServiceDefinitionV1Contact");
const ServiceDefinitionV1Info_1 = require("./ServiceDefinitionV1Info");
const ServiceDefinitionV1Integrations_1 = require("./ServiceDefinitionV1Integrations");
const ServiceDefinitionV1Org_1 = require("./ServiceDefinitionV1Org");
const ServiceDefinitionV1Resource_1 = require("./ServiceDefinitionV1Resource");
const ServiceDefinitionV2_1 = require("./ServiceDefinitionV2");
const ServiceDefinitionV2Doc_1 = require("./ServiceDefinitionV2Doc");
const ServiceDefinitionV2Email_1 = require("./ServiceDefinitionV2Email");
const ServiceDefinitionV2Integrations_1 = require("./ServiceDefinitionV2Integrations");
const ServiceDefinitionV2Link_1 = require("./ServiceDefinitionV2Link");
const ServiceDefinitionV2Opsgenie_1 = require("./ServiceDefinitionV2Opsgenie");
const ServiceDefinitionV2Repo_1 = require("./ServiceDefinitionV2Repo");
const ServiceDefinitionV2Slack_1 = require("./ServiceDefinitionV2Slack");
const ServiceDefinitionsListResponse_1 = require("./ServiceDefinitionsListResponse");
const SlackIntegrationMetadata_1 = require("./SlackIntegrationMetadata");
const SlackIntegrationMetadataChannelItem_1 = require("./SlackIntegrationMetadataChannelItem");
const TimeseriesFormulaQueryRequest_1 = require("./TimeseriesFormulaQueryRequest");
const TimeseriesFormulaQueryResponse_1 = require("./TimeseriesFormulaQueryResponse");
const TimeseriesFormulaRequest_1 = require("./TimeseriesFormulaRequest");
const TimeseriesFormulaRequestAttributes_1 = require("./TimeseriesFormulaRequestAttributes");
const TimeseriesResponse_1 = require("./TimeseriesResponse");
const TimeseriesResponseAttributes_1 = require("./TimeseriesResponseAttributes");
const TimeseriesResponseSeries_1 = require("./TimeseriesResponseSeries");
const Unit_1 = require("./Unit");
const UsageApplicationSecurityMonitoringResponse_1 = require("./UsageApplicationSecurityMonitoringResponse");
const UsageAttributesObject_1 = require("./UsageAttributesObject");
const UsageDataObject_1 = require("./UsageDataObject");
const UsageLambdaTracedInvocationsResponse_1 = require("./UsageLambdaTracedInvocationsResponse");
const UsageObservabilityPipelinesResponse_1 = require("./UsageObservabilityPipelinesResponse");
const UsageTimeSeriesObject_1 = require("./UsageTimeSeriesObject");
const User_1 = require("./User");
const UserAttributes_1 = require("./UserAttributes");
const UserCreateAttributes_1 = require("./UserCreateAttributes");
const UserCreateData_1 = require("./UserCreateData");
const UserCreateRequest_1 = require("./UserCreateRequest");
const UserInvitationData_1 = require("./UserInvitationData");
const UserInvitationDataAttributes_1 = require("./UserInvitationDataAttributes");
const UserInvitationRelationships_1 = require("./UserInvitationRelationships");
const UserInvitationResponse_1 = require("./UserInvitationResponse");
const UserInvitationResponseData_1 = require("./UserInvitationResponseData");
const UserInvitationsRequest_1 = require("./UserInvitationsRequest");
const UserInvitationsResponse_1 = require("./UserInvitationsResponse");
const UserRelationships_1 = require("./UserRelationships");
const UserResponse_1 = require("./UserResponse");
const UserResponseRelationships_1 = require("./UserResponseRelationships");
const UserUpdateAttributes_1 = require("./UserUpdateAttributes");
const UserUpdateData_1 = require("./UserUpdateData");
const UserUpdateRequest_1 = require("./UserUpdateRequest");
const UsersResponse_1 = require("./UsersResponse");
const util_1 = require("../../datadog-api-client-common/util");
const logger_1 = require("../../../logger");
const primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
];
const ARRAY_PREFIX = "Array<";
const MAP_PREFIX = "{ [key: string]: ";
const TUPLE_PREFIX = "[";
const supportedMediaTypes = {
    "application/json": Infinity,
    "text/json": 100,
    "application/octet-stream": 0,
};
const enumsMap = {
    APIKeysSort: [
        "created_at",
        "-created_at",
        "last4",
        "-last4",
        "modified_at",
        "-modified_at",
        "name",
        "-name",
    ],
    APIKeysType: ["api_keys"],
    ApplicationKeysSort: [
        "created_at",
        "-created_at",
        "last4",
        "-last4",
        "name",
        "-name",
    ],
    ApplicationKeysType: ["application_keys"],
    AuditLogsEventType: ["audit"],
    AuditLogsResponseStatus: ["done", "timeout"],
    AuditLogsSort: ["timestamp", "-timestamp"],
    AuthNMappingsSort: [
        "created_at",
        "-created_at",
        "role_id",
        "-role_id",
        "saml_assertion_attribute_id",
        "-saml_assertion_attribute_id",
        "role.name",
        "-role.name",
        "saml_assertion_attribute.attribute_key",
        "-saml_assertion_attribute.attribute_key",
        "saml_assertion_attribute.attribute_value",
        "-saml_assertion_attribute.attribute_value",
    ],
    AuthNMappingsType: ["authn_mappings"],
    CIAppAggregateSortType: ["alphabetical", "measure"],
    CIAppAggregationFunction: [
        "count",
        "cardinality",
        "pc75",
        "pc90",
        "pc95",
        "pc98",
        "pc99",
        "sum",
        "min",
        "max",
        "avg",
        "median",
        "latest",
        "earliest",
        "most_frequent",
        "delta",
    ],
    CIAppComputeType: ["timeseries", "total"],
    CIAppPipelineEventTypeName: ["cipipeline"],
    CIAppResponseStatus: ["done", "timeout"],
    CIAppSort: ["timestamp", "-timestamp"],
    CIAppSortOrder: ["asc", "desc"],
    CIAppTestEventTypeName: ["citest"],
    CloudConfigurationRuleType: ["cloud_configuration"],
    CloudWorkloadSecurityAgentRuleType: ["agent_rule"],
    CloudflareAccountType: ["cloudflare-accounts"],
    ConfluentAccountType: ["confluent-cloud-accounts"],
    ConfluentResourceType: ["confluent-cloud-resources"],
    ContentEncoding: ["identity", "gzip", "deflate"],
    CostByOrgType: ["cost_by_org"],
    DashboardType: [
        "custom_timeboard",
        "custom_screenboard",
        "integration_screenboard",
        "integration_timeboard",
        "host_timeboard",
    ],
    EventPriority: ["normal", "low"],
    EventStatusType: [
        "failure",
        "error",
        "warning",
        "info",
        "success",
        "user_update",
        "recommendation",
        "snapshot",
    ],
    EventType: ["event"],
    EventsAggregation: [
        "count",
        "cardinality",
        "pc75",
        "pc90",
        "pc95",
        "pc98",
        "pc99",
        "sum",
        "min",
        "max",
        "avg",
    ],
    EventsDataSource: ["logs", "rum"],
    EventsSort: ["timestamp", "-timestamp"],
    EventsSortType: ["alphabetical", "measure"],
    FastlyAccountType: ["fastly-accounts"],
    FastlyServiceType: ["fastly-services"],
    HourlyUsageType: [
        "app_sec_host_count",
        "observability_pipelines_bytes_processed",
        "lambda_traced_invocations_count",
    ],
    IPAllowlistEntryType: ["ip_allowlist_entry"],
    IPAllowlistType: ["ip_allowlist"],
    IncidentAttachmentAttachmentType: ["link", "postmortem"],
    IncidentAttachmentLinkAttachmentType: ["link"],
    IncidentAttachmentPostmortemAttachmentType: ["postmortem"],
    IncidentAttachmentRelatedObject: ["users"],
    IncidentAttachmentType: ["incident_attachments"],
    IncidentFieldAttributesSingleValueType: ["dropdown", "textbox"],
    IncidentFieldAttributesValueType: [
        "multiselect",
        "textarray",
        "metrictag",
        "autocomplete",
    ],
    IncidentIntegrationMetadataType: ["incident_integrations"],
    IncidentPostmortemType: ["incident_postmortems"],
    IncidentRelatedObject: ["users", "attachments"],
    IncidentSearchResultsType: ["incidents_search_results"],
    IncidentSearchSortOrder: ["created", "-created"],
    IncidentServiceType: ["services"],
    IncidentTeamType: ["teams"],
    IncidentTimelineCellMarkdownContentType: ["markdown"],
    IncidentType: ["incidents"],
    LogType: ["log"],
    LogsAggregateResponseStatus: ["done", "timeout"],
    LogsAggregateSortType: ["alphabetical", "measure"],
    LogsAggregationFunction: [
        "count",
        "cardinality",
        "pc75",
        "pc90",
        "pc95",
        "pc98",
        "pc99",
        "sum",
        "min",
        "max",
        "avg",
        "median",
    ],
    LogsArchiveDestinationAzureType: ["azure"],
    LogsArchiveDestinationGCSType: ["gcs"],
    LogsArchiveDestinationS3Type: ["s3"],
    LogsArchiveOrderDefinitionType: ["archive_order"],
    LogsArchiveState: ["UNKNOWN", "WORKING", "FAILING", "WORKING_AUTH_LEGACY"],
    LogsComputeType: ["timeseries", "total"],
    LogsMetricComputeAggregationType: ["count", "distribution"],
    LogsMetricResponseComputeAggregationType: ["count", "distribution"],
    LogsMetricType: ["logs_metrics"],
    LogsSort: ["timestamp", "-timestamp"],
    LogsSortOrder: ["asc", "desc"],
    LogsStorageTier: ["indexes", "online-archives"],
    MetricActiveConfigurationType: ["actively_queried_configurations"],
    MetricBulkConfigureTagsType: ["metric_bulk_configure_tags"],
    MetricContentEncoding: ["deflate", "zstd1", "gzip"],
    MetricCustomSpaceAggregation: ["avg", "max", "min", "sum"],
    MetricCustomTimeAggregation: ["avg", "count", "max", "min", "sum"],
    MetricDistinctVolumeType: ["distinct_metric_volumes"],
    MetricEstimateResourceType: ["metric_cardinality_estimate"],
    MetricEstimateType: ["count_or_gauge", "distribution", "percentile"],
    MetricIngestedIndexedVolumeType: ["metric_volumes"],
    MetricIntakeType: [0, 1, 2, 3],
    MetricTagConfigurationMetricTypes: ["gauge", "count", "rate", "distribution"],
    MetricTagConfigurationType: ["manage_tags"],
    MetricType: ["metrics"],
    MetricsAggregator: [
        "avg",
        "min",
        "max",
        "sum",
        "last",
        "percentile",
        "mean",
        "l2norm",
        "area",
    ],
    MetricsDataSource: ["metrics", "cloud_cost"],
    MonitorConfigPolicyResourceType: ["monitor-config-policy"],
    MonitorConfigPolicyType: ["tag"],
    OpsgenieServiceRegionType: ["us", "eu", "custom"],
    OpsgenieServiceType: ["opsgenie-service"],
    OrganizationsType: ["orgs"],
    PermissionsType: ["permissions"],
    ProcessSummaryType: ["process"],
    QuerySortOrder: ["asc", "desc"],
    RUMAggregateSortType: ["alphabetical", "measure"],
    RUMAggregationFunction: [
        "count",
        "cardinality",
        "pc75",
        "pc90",
        "pc95",
        "pc98",
        "pc99",
        "sum",
        "min",
        "max",
        "avg",
        "median",
    ],
    RUMApplicationCreateType: ["rum_application_create"],
    RUMApplicationListType: ["rum_application"],
    RUMApplicationType: ["rum_application"],
    RUMApplicationUpdateType: ["rum_application_update"],
    RUMComputeType: ["timeseries", "total"],
    RUMEventType: ["rum"],
    RUMResponseStatus: ["done", "timeout"],
    RUMSort: ["timestamp", "-timestamp"],
    RUMSortOrder: ["asc", "desc"],
    RestrictionPolicyType: ["restriction_policy"],
    RolesSort: [
        "name",
        "-name",
        "modified_at",
        "-modified_at",
        "user_count",
        "-user_count",
    ],
    RolesType: ["roles"],
    SAMLAssertionAttributesType: ["saml_assertion_attributes"],
    ScalarFormulaRequestType: ["scalar_request"],
    ScalarFormulaResponseType: ["scalar_response"],
    SecurityFilterFilteredDataType: ["logs"],
    SecurityFilterType: ["security_filters"],
    SecurityMonitoringFilterAction: ["require", "suppress"],
    SecurityMonitoringRuleDetectionMethod: [
        "threshold",
        "new_value",
        "anomaly_detection",
        "impossible_travel",
        "hardcoded",
        "third_party",
    ],
    SecurityMonitoringRuleEvaluationWindow: [
        0, 60, 300, 600, 900, 1800, 3600, 7200,
    ],
    SecurityMonitoringRuleHardcodedEvaluatorType: ["log4shell"],
    SecurityMonitoringRuleKeepAlive: [
        0, 60, 300, 600, 900, 1800, 3600, 7200, 10800, 21600,
    ],
    SecurityMonitoringRuleMaxSignalDuration: [
        0, 60, 300, 600, 900, 1800, 3600, 7200, 10800, 21600, 43200, 86400,
    ],
    SecurityMonitoringRuleNewValueOptionsForgetAfter: [1, 2, 7, 14, 21, 28],
    SecurityMonitoringRuleNewValueOptionsLearningDuration: [0, 1, 7],
    SecurityMonitoringRuleNewValueOptionsLearningMethod: [
        "duration",
        "threshold",
    ],
    SecurityMonitoringRuleNewValueOptionsLearningThreshold: [0, 1],
    SecurityMonitoringRuleQueryAggregation: [
        "count",
        "cardinality",
        "sum",
        "max",
        "new_value",
        "geo_data",
        "event_count",
        "none",
    ],
    SecurityMonitoringRuleSeverity: ["info", "low", "medium", "high", "critical"],
    SecurityMonitoringRuleTypeCreate: ["log_detection", "workload_security"],
    SecurityMonitoringRuleTypeRead: [
        "log_detection",
        "infrastructure_configuration",
        "workload_security",
        "cloud_configuration",
        "application_security",
    ],
    SecurityMonitoringSignalArchiveReason: [
        "none",
        "false_positive",
        "testing_or_maintenance",
        "other",
    ],
    SecurityMonitoringSignalRuleType: ["signal_correlation"],
    SecurityMonitoringSignalState: ["open", "archived", "under_review"],
    SecurityMonitoringSignalType: ["signal"],
    SecurityMonitoringSignalsSort: ["timestamp", "-timestamp"],
    SensitiveDataScannerConfigurationType: [
        "sensitive_data_scanner_configuration",
    ],
    SensitiveDataScannerGroupType: ["sensitive_data_scanner_group"],
    SensitiveDataScannerProduct: ["logs", "rum", "events", "apm"],
    SensitiveDataScannerRuleType: ["sensitive_data_scanner_rule"],
    SensitiveDataScannerStandardPatternType: [
        "sensitive_data_scanner_standard_pattern",
    ],
    SensitiveDataScannerTextReplacementType: [
        "none",
        "hash",
        "replacement_string",
        "partial_replacement_from_beginning",
        "partial_replacement_from_end",
    ],
    ServiceDefinitionV1ResourceType: [
        "doc",
        "wiki",
        "runbook",
        "url",
        "repo",
        "dashboard",
        "oncall",
        "code",
        "link",
    ],
    ServiceDefinitionV1Version: ["v1"],
    ServiceDefinitionV2EmailType: ["email"],
    ServiceDefinitionV2LinkType: [
        "doc",
        "wiki",
        "runbook",
        "url",
        "repo",
        "dashboard",
        "oncall",
        "code",
        "link",
    ],
    ServiceDefinitionV2OpsgenieRegion: ["US", "EU"],
    ServiceDefinitionV2SlackType: ["slack"],
    ServiceDefinitionV2Version: ["v2"],
    TimeseriesFormulaRequestType: ["timeseries_request"],
    TimeseriesFormulaResponseType: ["timeseries_response"],
    UsageTimeSeriesType: ["usage_timeseries"],
    UserInvitationsType: ["user_invitations"],
    UsersType: ["users"],
};
const typeMap = {
    APIErrorResponse: APIErrorResponse_1.APIErrorResponse,
    APIKeyCreateAttributes: APIKeyCreateAttributes_1.APIKeyCreateAttributes,
    APIKeyCreateData: APIKeyCreateData_1.APIKeyCreateData,
    APIKeyCreateRequest: APIKeyCreateRequest_1.APIKeyCreateRequest,
    APIKeyRelationships: APIKeyRelationships_1.APIKeyRelationships,
    APIKeyResponse: APIKeyResponse_1.APIKeyResponse,
    APIKeyUpdateAttributes: APIKeyUpdateAttributes_1.APIKeyUpdateAttributes,
    APIKeyUpdateData: APIKeyUpdateData_1.APIKeyUpdateData,
    APIKeyUpdateRequest: APIKeyUpdateRequest_1.APIKeyUpdateRequest,
    APIKeysResponse: APIKeysResponse_1.APIKeysResponse,
    ApplicationKeyCreateAttributes: ApplicationKeyCreateAttributes_1.ApplicationKeyCreateAttributes,
    ApplicationKeyCreateData: ApplicationKeyCreateData_1.ApplicationKeyCreateData,
    ApplicationKeyCreateRequest: ApplicationKeyCreateRequest_1.ApplicationKeyCreateRequest,
    ApplicationKeyRelationships: ApplicationKeyRelationships_1.ApplicationKeyRelationships,
    ApplicationKeyResponse: ApplicationKeyResponse_1.ApplicationKeyResponse,
    ApplicationKeyUpdateAttributes: ApplicationKeyUpdateAttributes_1.ApplicationKeyUpdateAttributes,
    ApplicationKeyUpdateData: ApplicationKeyUpdateData_1.ApplicationKeyUpdateData,
    ApplicationKeyUpdateRequest: ApplicationKeyUpdateRequest_1.ApplicationKeyUpdateRequest,
    AuditLogsEvent: AuditLogsEvent_1.AuditLogsEvent,
    AuditLogsEventAttributes: AuditLogsEventAttributes_1.AuditLogsEventAttributes,
    AuditLogsEventsResponse: AuditLogsEventsResponse_1.AuditLogsEventsResponse,
    AuditLogsQueryFilter: AuditLogsQueryFilter_1.AuditLogsQueryFilter,
    AuditLogsQueryOptions: AuditLogsQueryOptions_1.AuditLogsQueryOptions,
    AuditLogsQueryPageOptions: AuditLogsQueryPageOptions_1.AuditLogsQueryPageOptions,
    AuditLogsResponseLinks: AuditLogsResponseLinks_1.AuditLogsResponseLinks,
    AuditLogsResponseMetadata: AuditLogsResponseMetadata_1.AuditLogsResponseMetadata,
    AuditLogsResponsePage: AuditLogsResponsePage_1.AuditLogsResponsePage,
    AuditLogsSearchEventsRequest: AuditLogsSearchEventsRequest_1.AuditLogsSearchEventsRequest,
    AuditLogsWarning: AuditLogsWarning_1.AuditLogsWarning,
    AuthNMapping: AuthNMapping_1.AuthNMapping,
    AuthNMappingAttributes: AuthNMappingAttributes_1.AuthNMappingAttributes,
    AuthNMappingCreateAttributes: AuthNMappingCreateAttributes_1.AuthNMappingCreateAttributes,
    AuthNMappingCreateData: AuthNMappingCreateData_1.AuthNMappingCreateData,
    AuthNMappingCreateRelationships: AuthNMappingCreateRelationships_1.AuthNMappingCreateRelationships,
    AuthNMappingCreateRequest: AuthNMappingCreateRequest_1.AuthNMappingCreateRequest,
    AuthNMappingRelationships: AuthNMappingRelationships_1.AuthNMappingRelationships,
    AuthNMappingResponse: AuthNMappingResponse_1.AuthNMappingResponse,
    AuthNMappingUpdateAttributes: AuthNMappingUpdateAttributes_1.AuthNMappingUpdateAttributes,
    AuthNMappingUpdateData: AuthNMappingUpdateData_1.AuthNMappingUpdateData,
    AuthNMappingUpdateRelationships: AuthNMappingUpdateRelationships_1.AuthNMappingUpdateRelationships,
    AuthNMappingUpdateRequest: AuthNMappingUpdateRequest_1.AuthNMappingUpdateRequest,
    AuthNMappingsResponse: AuthNMappingsResponse_1.AuthNMappingsResponse,
    CIAppAggregateBucketValueTimeseriesPoint: CIAppAggregateBucketValueTimeseriesPoint_1.CIAppAggregateBucketValueTimeseriesPoint,
    CIAppAggregateSort: CIAppAggregateSort_1.CIAppAggregateSort,
    CIAppCompute: CIAppCompute_1.CIAppCompute,
    CIAppEventAttributes: CIAppEventAttributes_1.CIAppEventAttributes,
    CIAppGroupByHistogram: CIAppGroupByHistogram_1.CIAppGroupByHistogram,
    CIAppPipelineEvent: CIAppPipelineEvent_1.CIAppPipelineEvent,
    CIAppPipelineEventsRequest: CIAppPipelineEventsRequest_1.CIAppPipelineEventsRequest,
    CIAppPipelineEventsResponse: CIAppPipelineEventsResponse_1.CIAppPipelineEventsResponse,
    CIAppPipelinesAggregateRequest: CIAppPipelinesAggregateRequest_1.CIAppPipelinesAggregateRequest,
    CIAppPipelinesAggregationBucketsResponse: CIAppPipelinesAggregationBucketsResponse_1.CIAppPipelinesAggregationBucketsResponse,
    CIAppPipelinesAnalyticsAggregateResponse: CIAppPipelinesAnalyticsAggregateResponse_1.CIAppPipelinesAnalyticsAggregateResponse,
    CIAppPipelinesBucketResponse: CIAppPipelinesBucketResponse_1.CIAppPipelinesBucketResponse,
    CIAppPipelinesGroupBy: CIAppPipelinesGroupBy_1.CIAppPipelinesGroupBy,
    CIAppPipelinesQueryFilter: CIAppPipelinesQueryFilter_1.CIAppPipelinesQueryFilter,
    CIAppQueryOptions: CIAppQueryOptions_1.CIAppQueryOptions,
    CIAppQueryPageOptions: CIAppQueryPageOptions_1.CIAppQueryPageOptions,
    CIAppResponseLinks: CIAppResponseLinks_1.CIAppResponseLinks,
    CIAppResponseMetadata: CIAppResponseMetadata_1.CIAppResponseMetadata,
    CIAppResponseMetadataWithPagination: CIAppResponseMetadataWithPagination_1.CIAppResponseMetadataWithPagination,
    CIAppResponsePage: CIAppResponsePage_1.CIAppResponsePage,
    CIAppTestEvent: CIAppTestEvent_1.CIAppTestEvent,
    CIAppTestEventsRequest: CIAppTestEventsRequest_1.CIAppTestEventsRequest,
    CIAppTestEventsResponse: CIAppTestEventsResponse_1.CIAppTestEventsResponse,
    CIAppTestsAggregateRequest: CIAppTestsAggregateRequest_1.CIAppTestsAggregateRequest,
    CIAppTestsAggregationBucketsResponse: CIAppTestsAggregationBucketsResponse_1.CIAppTestsAggregationBucketsResponse,
    CIAppTestsAnalyticsAggregateResponse: CIAppTestsAnalyticsAggregateResponse_1.CIAppTestsAnalyticsAggregateResponse,
    CIAppTestsBucketResponse: CIAppTestsBucketResponse_1.CIAppTestsBucketResponse,
    CIAppTestsGroupBy: CIAppTestsGroupBy_1.CIAppTestsGroupBy,
    CIAppTestsQueryFilter: CIAppTestsQueryFilter_1.CIAppTestsQueryFilter,
    CIAppWarning: CIAppWarning_1.CIAppWarning,
    ChargebackBreakdown: ChargebackBreakdown_1.ChargebackBreakdown,
    CloudConfigurationComplianceRuleOptions: CloudConfigurationComplianceRuleOptions_1.CloudConfigurationComplianceRuleOptions,
    CloudConfigurationRegoRule: CloudConfigurationRegoRule_1.CloudConfigurationRegoRule,
    CloudConfigurationRuleCaseCreate: CloudConfigurationRuleCaseCreate_1.CloudConfigurationRuleCaseCreate,
    CloudConfigurationRuleComplianceSignalOptions: CloudConfigurationRuleComplianceSignalOptions_1.CloudConfigurationRuleComplianceSignalOptions,
    CloudConfigurationRuleCreatePayload: CloudConfigurationRuleCreatePayload_1.CloudConfigurationRuleCreatePayload,
    CloudConfigurationRuleOptions: CloudConfigurationRuleOptions_1.CloudConfigurationRuleOptions,
    CloudWorkloadSecurityAgentRuleAttributes: CloudWorkloadSecurityAgentRuleAttributes_1.CloudWorkloadSecurityAgentRuleAttributes,
    CloudWorkloadSecurityAgentRuleCreateAttributes: CloudWorkloadSecurityAgentRuleCreateAttributes_1.CloudWorkloadSecurityAgentRuleCreateAttributes,
    CloudWorkloadSecurityAgentRuleCreateData: CloudWorkloadSecurityAgentRuleCreateData_1.CloudWorkloadSecurityAgentRuleCreateData,
    CloudWorkloadSecurityAgentRuleCreateRequest: CloudWorkloadSecurityAgentRuleCreateRequest_1.CloudWorkloadSecurityAgentRuleCreateRequest,
    CloudWorkloadSecurityAgentRuleCreatorAttributes: CloudWorkloadSecurityAgentRuleCreatorAttributes_1.CloudWorkloadSecurityAgentRuleCreatorAttributes,
    CloudWorkloadSecurityAgentRuleData: CloudWorkloadSecurityAgentRuleData_1.CloudWorkloadSecurityAgentRuleData,
    CloudWorkloadSecurityAgentRuleResponse: CloudWorkloadSecurityAgentRuleResponse_1.CloudWorkloadSecurityAgentRuleResponse,
    CloudWorkloadSecurityAgentRuleUpdateAttributes: CloudWorkloadSecurityAgentRuleUpdateAttributes_1.CloudWorkloadSecurityAgentRuleUpdateAttributes,
    CloudWorkloadSecurityAgentRuleUpdateData: CloudWorkloadSecurityAgentRuleUpdateData_1.CloudWorkloadSecurityAgentRuleUpdateData,
    CloudWorkloadSecurityAgentRuleUpdateRequest: CloudWorkloadSecurityAgentRuleUpdateRequest_1.CloudWorkloadSecurityAgentRuleUpdateRequest,
    CloudWorkloadSecurityAgentRuleUpdaterAttributes: CloudWorkloadSecurityAgentRuleUpdaterAttributes_1.CloudWorkloadSecurityAgentRuleUpdaterAttributes,
    CloudWorkloadSecurityAgentRulesListResponse: CloudWorkloadSecurityAgentRulesListResponse_1.CloudWorkloadSecurityAgentRulesListResponse,
    CloudflareAccountCreateRequest: CloudflareAccountCreateRequest_1.CloudflareAccountCreateRequest,
    CloudflareAccountCreateRequestAttributes: CloudflareAccountCreateRequestAttributes_1.CloudflareAccountCreateRequestAttributes,
    CloudflareAccountCreateRequestData: CloudflareAccountCreateRequestData_1.CloudflareAccountCreateRequestData,
    CloudflareAccountResponse: CloudflareAccountResponse_1.CloudflareAccountResponse,
    CloudflareAccountResponseAttributes: CloudflareAccountResponseAttributes_1.CloudflareAccountResponseAttributes,
    CloudflareAccountResponseData: CloudflareAccountResponseData_1.CloudflareAccountResponseData,
    CloudflareAccountUpdateRequest: CloudflareAccountUpdateRequest_1.CloudflareAccountUpdateRequest,
    CloudflareAccountUpdateRequestAttributes: CloudflareAccountUpdateRequestAttributes_1.CloudflareAccountUpdateRequestAttributes,
    CloudflareAccountUpdateRequestData: CloudflareAccountUpdateRequestData_1.CloudflareAccountUpdateRequestData,
    CloudflareAccountsResponse: CloudflareAccountsResponse_1.CloudflareAccountsResponse,
    ConfluentAccountCreateRequest: ConfluentAccountCreateRequest_1.ConfluentAccountCreateRequest,
    ConfluentAccountCreateRequestAttributes: ConfluentAccountCreateRequestAttributes_1.ConfluentAccountCreateRequestAttributes,
    ConfluentAccountCreateRequestData: ConfluentAccountCreateRequestData_1.ConfluentAccountCreateRequestData,
    ConfluentAccountResourceAttributes: ConfluentAccountResourceAttributes_1.ConfluentAccountResourceAttributes,
    ConfluentAccountResponse: ConfluentAccountResponse_1.ConfluentAccountResponse,
    ConfluentAccountResponseAttributes: ConfluentAccountResponseAttributes_1.ConfluentAccountResponseAttributes,
    ConfluentAccountResponseData: ConfluentAccountResponseData_1.ConfluentAccountResponseData,
    ConfluentAccountUpdateRequest: ConfluentAccountUpdateRequest_1.ConfluentAccountUpdateRequest,
    ConfluentAccountUpdateRequestAttributes: ConfluentAccountUpdateRequestAttributes_1.ConfluentAccountUpdateRequestAttributes,
    ConfluentAccountUpdateRequestData: ConfluentAccountUpdateRequestData_1.ConfluentAccountUpdateRequestData,
    ConfluentAccountsResponse: ConfluentAccountsResponse_1.ConfluentAccountsResponse,
    ConfluentResourceRequest: ConfluentResourceRequest_1.ConfluentResourceRequest,
    ConfluentResourceRequestAttributes: ConfluentResourceRequestAttributes_1.ConfluentResourceRequestAttributes,
    ConfluentResourceRequestData: ConfluentResourceRequestData_1.ConfluentResourceRequestData,
    ConfluentResourceResponse: ConfluentResourceResponse_1.ConfluentResourceResponse,
    ConfluentResourceResponseAttributes: ConfluentResourceResponseAttributes_1.ConfluentResourceResponseAttributes,
    ConfluentResourceResponseData: ConfluentResourceResponseData_1.ConfluentResourceResponseData,
    ConfluentResourcesResponse: ConfluentResourcesResponse_1.ConfluentResourcesResponse,
    CostByOrg: CostByOrg_1.CostByOrg,
    CostByOrgAttributes: CostByOrgAttributes_1.CostByOrgAttributes,
    CostByOrgResponse: CostByOrgResponse_1.CostByOrgResponse,
    Creator: Creator_1.Creator,
    DashboardListAddItemsRequest: DashboardListAddItemsRequest_1.DashboardListAddItemsRequest,
    DashboardListAddItemsResponse: DashboardListAddItemsResponse_1.DashboardListAddItemsResponse,
    DashboardListDeleteItemsRequest: DashboardListDeleteItemsRequest_1.DashboardListDeleteItemsRequest,
    DashboardListDeleteItemsResponse: DashboardListDeleteItemsResponse_1.DashboardListDeleteItemsResponse,
    DashboardListItem: DashboardListItem_1.DashboardListItem,
    DashboardListItemRequest: DashboardListItemRequest_1.DashboardListItemRequest,
    DashboardListItemResponse: DashboardListItemResponse_1.DashboardListItemResponse,
    DashboardListItems: DashboardListItems_1.DashboardListItems,
    DashboardListUpdateItemsRequest: DashboardListUpdateItemsRequest_1.DashboardListUpdateItemsRequest,
    DashboardListUpdateItemsResponse: DashboardListUpdateItemsResponse_1.DashboardListUpdateItemsResponse,
    DataScalarColumn: DataScalarColumn_1.DataScalarColumn,
    Event: Event_1.Event,
    EventAttributes: EventAttributes_1.EventAttributes,
    EventResponse: EventResponse_1.EventResponse,
    EventResponseAttributes: EventResponseAttributes_1.EventResponseAttributes,
    EventsCompute: EventsCompute_1.EventsCompute,
    EventsGroupBy: EventsGroupBy_1.EventsGroupBy,
    EventsGroupBySort: EventsGroupBySort_1.EventsGroupBySort,
    EventsListRequest: EventsListRequest_1.EventsListRequest,
    EventsListResponse: EventsListResponse_1.EventsListResponse,
    EventsListResponseLinks: EventsListResponseLinks_1.EventsListResponseLinks,
    EventsQueryFilter: EventsQueryFilter_1.EventsQueryFilter,
    EventsQueryOptions: EventsQueryOptions_1.EventsQueryOptions,
    EventsRequestPage: EventsRequestPage_1.EventsRequestPage,
    EventsResponseMetadata: EventsResponseMetadata_1.EventsResponseMetadata,
    EventsResponseMetadataPage: EventsResponseMetadataPage_1.EventsResponseMetadataPage,
    EventsScalarQuery: EventsScalarQuery_1.EventsScalarQuery,
    EventsSearch: EventsSearch_1.EventsSearch,
    EventsTimeseriesQuery: EventsTimeseriesQuery_1.EventsTimeseriesQuery,
    EventsWarning: EventsWarning_1.EventsWarning,
    FastlyAccounResponseAttributes: FastlyAccounResponseAttributes_1.FastlyAccounResponseAttributes,
    FastlyAccountCreateRequest: FastlyAccountCreateRequest_1.FastlyAccountCreateRequest,
    FastlyAccountCreateRequestAttributes: FastlyAccountCreateRequestAttributes_1.FastlyAccountCreateRequestAttributes,
    FastlyAccountCreateRequestData: FastlyAccountCreateRequestData_1.FastlyAccountCreateRequestData,
    FastlyAccountResponse: FastlyAccountResponse_1.FastlyAccountResponse,
    FastlyAccountResponseData: FastlyAccountResponseData_1.FastlyAccountResponseData,
    FastlyAccountUpdateRequest: FastlyAccountUpdateRequest_1.FastlyAccountUpdateRequest,
    FastlyAccountUpdateRequestAttributes: FastlyAccountUpdateRequestAttributes_1.FastlyAccountUpdateRequestAttributes,
    FastlyAccountUpdateRequestData: FastlyAccountUpdateRequestData_1.FastlyAccountUpdateRequestData,
    FastlyAccountsResponse: FastlyAccountsResponse_1.FastlyAccountsResponse,
    FastlyService: FastlyService_1.FastlyService,
    FastlyServiceAttributes: FastlyServiceAttributes_1.FastlyServiceAttributes,
    FastlyServiceData: FastlyServiceData_1.FastlyServiceData,
    FastlyServiceRequest: FastlyServiceRequest_1.FastlyServiceRequest,
    FastlyServiceResponse: FastlyServiceResponse_1.FastlyServiceResponse,
    FastlyServicesResponse: FastlyServicesResponse_1.FastlyServicesResponse,
    FormulaLimit: FormulaLimit_1.FormulaLimit,
    FullAPIKey: FullAPIKey_1.FullAPIKey,
    FullAPIKeyAttributes: FullAPIKeyAttributes_1.FullAPIKeyAttributes,
    FullApplicationKey: FullApplicationKey_1.FullApplicationKey,
    FullApplicationKeyAttributes: FullApplicationKeyAttributes_1.FullApplicationKeyAttributes,
    GroupScalarColumn: GroupScalarColumn_1.GroupScalarColumn,
    HTTPLogError: HTTPLogError_1.HTTPLogError,
    HTTPLogErrors: HTTPLogErrors_1.HTTPLogErrors,
    HTTPLogItem: HTTPLogItem_1.HTTPLogItem,
    HourlyUsage: HourlyUsage_1.HourlyUsage,
    HourlyUsageAttributes: HourlyUsageAttributes_1.HourlyUsageAttributes,
    HourlyUsageMeasurement: HourlyUsageMeasurement_1.HourlyUsageMeasurement,
    HourlyUsageMetadata: HourlyUsageMetadata_1.HourlyUsageMetadata,
    HourlyUsagePagination: HourlyUsagePagination_1.HourlyUsagePagination,
    HourlyUsageResponse: HourlyUsageResponse_1.HourlyUsageResponse,
    IPAllowlistAttributes: IPAllowlistAttributes_1.IPAllowlistAttributes,
    IPAllowlistData: IPAllowlistData_1.IPAllowlistData,
    IPAllowlistEntry: IPAllowlistEntry_1.IPAllowlistEntry,
    IPAllowlistEntryAttributes: IPAllowlistEntryAttributes_1.IPAllowlistEntryAttributes,
    IPAllowlistEntryData: IPAllowlistEntryData_1.IPAllowlistEntryData,
    IPAllowlistResponse: IPAllowlistResponse_1.IPAllowlistResponse,
    IPAllowlistUpdateRequest: IPAllowlistUpdateRequest_1.IPAllowlistUpdateRequest,
    IdPMetadataFormData: IdPMetadataFormData_1.IdPMetadataFormData,
    IncidentAttachmentData: IncidentAttachmentData_1.IncidentAttachmentData,
    IncidentAttachmentLinkAttributes: IncidentAttachmentLinkAttributes_1.IncidentAttachmentLinkAttributes,
    IncidentAttachmentLinkAttributesAttachmentObject: IncidentAttachmentLinkAttributesAttachmentObject_1.IncidentAttachmentLinkAttributesAttachmentObject,
    IncidentAttachmentPostmortemAttributes: IncidentAttachmentPostmortemAttributes_1.IncidentAttachmentPostmortemAttributes,
    IncidentAttachmentRelationships: IncidentAttachmentRelationships_1.IncidentAttachmentRelationships,
    IncidentAttachmentUpdateData: IncidentAttachmentUpdateData_1.IncidentAttachmentUpdateData,
    IncidentAttachmentUpdateRequest: IncidentAttachmentUpdateRequest_1.IncidentAttachmentUpdateRequest,
    IncidentAttachmentUpdateResponse: IncidentAttachmentUpdateResponse_1.IncidentAttachmentUpdateResponse,
    IncidentAttachmentsPostmortemAttributesAttachmentObject: IncidentAttachmentsPostmortemAttributesAttachmentObject_1.IncidentAttachmentsPostmortemAttributesAttachmentObject,
    IncidentAttachmentsResponse: IncidentAttachmentsResponse_1.IncidentAttachmentsResponse,
    IncidentCreateAttributes: IncidentCreateAttributes_1.IncidentCreateAttributes,
    IncidentCreateData: IncidentCreateData_1.IncidentCreateData,
    IncidentCreateRelationships: IncidentCreateRelationships_1.IncidentCreateRelationships,
    IncidentCreateRequest: IncidentCreateRequest_1.IncidentCreateRequest,
    IncidentFieldAttributesMultipleValue: IncidentFieldAttributesMultipleValue_1.IncidentFieldAttributesMultipleValue,
    IncidentFieldAttributesSingleValue: IncidentFieldAttributesSingleValue_1.IncidentFieldAttributesSingleValue,
    IncidentIntegrationMetadataAttributes: IncidentIntegrationMetadataAttributes_1.IncidentIntegrationMetadataAttributes,
    IncidentIntegrationMetadataCreateData: IncidentIntegrationMetadataCreateData_1.IncidentIntegrationMetadataCreateData,
    IncidentIntegrationMetadataCreateRequest: IncidentIntegrationMetadataCreateRequest_1.IncidentIntegrationMetadataCreateRequest,
    IncidentIntegrationMetadataListResponse: IncidentIntegrationMetadataListResponse_1.IncidentIntegrationMetadataListResponse,
    IncidentIntegrationMetadataPatchData: IncidentIntegrationMetadataPatchData_1.IncidentIntegrationMetadataPatchData,
    IncidentIntegrationMetadataPatchRequest: IncidentIntegrationMetadataPatchRequest_1.IncidentIntegrationMetadataPatchRequest,
    IncidentIntegrationMetadataResponse: IncidentIntegrationMetadataResponse_1.IncidentIntegrationMetadataResponse,
    IncidentIntegrationMetadataResponseData: IncidentIntegrationMetadataResponseData_1.IncidentIntegrationMetadataResponseData,
    IncidentNotificationHandle: IncidentNotificationHandle_1.IncidentNotificationHandle,
    IncidentResponse: IncidentResponse_1.IncidentResponse,
    IncidentResponseAttributes: IncidentResponseAttributes_1.IncidentResponseAttributes,
    IncidentResponseData: IncidentResponseData_1.IncidentResponseData,
    IncidentResponseMeta: IncidentResponseMeta_1.IncidentResponseMeta,
    IncidentResponseMetaPagination: IncidentResponseMetaPagination_1.IncidentResponseMetaPagination,
    IncidentResponseRelationships: IncidentResponseRelationships_1.IncidentResponseRelationships,
    IncidentSearchResponse: IncidentSearchResponse_1.IncidentSearchResponse,
    IncidentSearchResponseAttributes: IncidentSearchResponseAttributes_1.IncidentSearchResponseAttributes,
    IncidentSearchResponseData: IncidentSearchResponseData_1.IncidentSearchResponseData,
    IncidentSearchResponseFacetsData: IncidentSearchResponseFacetsData_1.IncidentSearchResponseFacetsData,
    IncidentSearchResponseFieldFacetData: IncidentSearchResponseFieldFacetData_1.IncidentSearchResponseFieldFacetData,
    IncidentSearchResponseIncidentsData: IncidentSearchResponseIncidentsData_1.IncidentSearchResponseIncidentsData,
    IncidentSearchResponseNumericFacetData: IncidentSearchResponseNumericFacetData_1.IncidentSearchResponseNumericFacetData,
    IncidentSearchResponseNumericFacetDataAggregates: IncidentSearchResponseNumericFacetDataAggregates_1.IncidentSearchResponseNumericFacetDataAggregates,
    IncidentSearchResponsePropertyFieldFacetData: IncidentSearchResponsePropertyFieldFacetData_1.IncidentSearchResponsePropertyFieldFacetData,
    IncidentSearchResponseUserFacetData: IncidentSearchResponseUserFacetData_1.IncidentSearchResponseUserFacetData,
    IncidentServiceCreateAttributes: IncidentServiceCreateAttributes_1.IncidentServiceCreateAttributes,
    IncidentServiceCreateData: IncidentServiceCreateData_1.IncidentServiceCreateData,
    IncidentServiceCreateRequest: IncidentServiceCreateRequest_1.IncidentServiceCreateRequest,
    IncidentServiceRelationships: IncidentServiceRelationships_1.IncidentServiceRelationships,
    IncidentServiceResponse: IncidentServiceResponse_1.IncidentServiceResponse,
    IncidentServiceResponseAttributes: IncidentServiceResponseAttributes_1.IncidentServiceResponseAttributes,
    IncidentServiceResponseData: IncidentServiceResponseData_1.IncidentServiceResponseData,
    IncidentServiceUpdateAttributes: IncidentServiceUpdateAttributes_1.IncidentServiceUpdateAttributes,
    IncidentServiceUpdateData: IncidentServiceUpdateData_1.IncidentServiceUpdateData,
    IncidentServiceUpdateRequest: IncidentServiceUpdateRequest_1.IncidentServiceUpdateRequest,
    IncidentServicesResponse: IncidentServicesResponse_1.IncidentServicesResponse,
    IncidentTeamCreateAttributes: IncidentTeamCreateAttributes_1.IncidentTeamCreateAttributes,
    IncidentTeamCreateData: IncidentTeamCreateData_1.IncidentTeamCreateData,
    IncidentTeamCreateRequest: IncidentTeamCreateRequest_1.IncidentTeamCreateRequest,
    IncidentTeamRelationships: IncidentTeamRelationships_1.IncidentTeamRelationships,
    IncidentTeamResponse: IncidentTeamResponse_1.IncidentTeamResponse,
    IncidentTeamResponseAttributes: IncidentTeamResponseAttributes_1.IncidentTeamResponseAttributes,
    IncidentTeamResponseData: IncidentTeamResponseData_1.IncidentTeamResponseData,
    IncidentTeamUpdateAttributes: IncidentTeamUpdateAttributes_1.IncidentTeamUpdateAttributes,
    IncidentTeamUpdateData: IncidentTeamUpdateData_1.IncidentTeamUpdateData,
    IncidentTeamUpdateRequest: IncidentTeamUpdateRequest_1.IncidentTeamUpdateRequest,
    IncidentTeamsResponse: IncidentTeamsResponse_1.IncidentTeamsResponse,
    IncidentTimelineCellMarkdownCreateAttributes: IncidentTimelineCellMarkdownCreateAttributes_1.IncidentTimelineCellMarkdownCreateAttributes,
    IncidentTimelineCellMarkdownCreateAttributesContent: IncidentTimelineCellMarkdownCreateAttributesContent_1.IncidentTimelineCellMarkdownCreateAttributesContent,
    IncidentUpdateAttributes: IncidentUpdateAttributes_1.IncidentUpdateAttributes,
    IncidentUpdateData: IncidentUpdateData_1.IncidentUpdateData,
    IncidentUpdateRelationships: IncidentUpdateRelationships_1.IncidentUpdateRelationships,
    IncidentUpdateRequest: IncidentUpdateRequest_1.IncidentUpdateRequest,
    IncidentsResponse: IncidentsResponse_1.IncidentsResponse,
    IntakePayloadAccepted: IntakePayloadAccepted_1.IntakePayloadAccepted,
    JiraIntegrationMetadata: JiraIntegrationMetadata_1.JiraIntegrationMetadata,
    JiraIntegrationMetadataIssuesItem: JiraIntegrationMetadataIssuesItem_1.JiraIntegrationMetadataIssuesItem,
    ListApplicationKeysResponse: ListApplicationKeysResponse_1.ListApplicationKeysResponse,
    Log: Log_1.Log,
    LogAttributes: LogAttributes_1.LogAttributes,
    LogsAggregateBucket: LogsAggregateBucket_1.LogsAggregateBucket,
    LogsAggregateBucketValueTimeseriesPoint: LogsAggregateBucketValueTimeseriesPoint_1.LogsAggregateBucketValueTimeseriesPoint,
    LogsAggregateRequest: LogsAggregateRequest_1.LogsAggregateRequest,
    LogsAggregateRequestPage: LogsAggregateRequestPage_1.LogsAggregateRequestPage,
    LogsAggregateResponse: LogsAggregateResponse_1.LogsAggregateResponse,
    LogsAggregateResponseData: LogsAggregateResponseData_1.LogsAggregateResponseData,
    LogsAggregateSort: LogsAggregateSort_1.LogsAggregateSort,
    LogsArchive: LogsArchive_1.LogsArchive,
    LogsArchiveAttributes: LogsArchiveAttributes_1.LogsArchiveAttributes,
    LogsArchiveCreateRequest: LogsArchiveCreateRequest_1.LogsArchiveCreateRequest,
    LogsArchiveCreateRequestAttributes: LogsArchiveCreateRequestAttributes_1.LogsArchiveCreateRequestAttributes,
    LogsArchiveCreateRequestDefinition: LogsArchiveCreateRequestDefinition_1.LogsArchiveCreateRequestDefinition,
    LogsArchiveDefinition: LogsArchiveDefinition_1.LogsArchiveDefinition,
    LogsArchiveDestinationAzure: LogsArchiveDestinationAzure_1.LogsArchiveDestinationAzure,
    LogsArchiveDestinationGCS: LogsArchiveDestinationGCS_1.LogsArchiveDestinationGCS,
    LogsArchiveDestinationS3: LogsArchiveDestinationS3_1.LogsArchiveDestinationS3,
    LogsArchiveIntegrationAzure: LogsArchiveIntegrationAzure_1.LogsArchiveIntegrationAzure,
    LogsArchiveIntegrationGCS: LogsArchiveIntegrationGCS_1.LogsArchiveIntegrationGCS,
    LogsArchiveIntegrationS3: LogsArchiveIntegrationS3_1.LogsArchiveIntegrationS3,
    LogsArchiveOrder: LogsArchiveOrder_1.LogsArchiveOrder,
    LogsArchiveOrderAttributes: LogsArchiveOrderAttributes_1.LogsArchiveOrderAttributes,
    LogsArchiveOrderDefinition: LogsArchiveOrderDefinition_1.LogsArchiveOrderDefinition,
    LogsArchives: LogsArchives_1.LogsArchives,
    LogsCompute: LogsCompute_1.LogsCompute,
    LogsGroupBy: LogsGroupBy_1.LogsGroupBy,
    LogsGroupByHistogram: LogsGroupByHistogram_1.LogsGroupByHistogram,
    LogsListRequest: LogsListRequest_1.LogsListRequest,
    LogsListRequestPage: LogsListRequestPage_1.LogsListRequestPage,
    LogsListResponse: LogsListResponse_1.LogsListResponse,
    LogsListResponseLinks: LogsListResponseLinks_1.LogsListResponseLinks,
    LogsMetricCompute: LogsMetricCompute_1.LogsMetricCompute,
    LogsMetricCreateAttributes: LogsMetricCreateAttributes_1.LogsMetricCreateAttributes,
    LogsMetricCreateData: LogsMetricCreateData_1.LogsMetricCreateData,
    LogsMetricCreateRequest: LogsMetricCreateRequest_1.LogsMetricCreateRequest,
    LogsMetricFilter: LogsMetricFilter_1.LogsMetricFilter,
    LogsMetricGroupBy: LogsMetricGroupBy_1.LogsMetricGroupBy,
    LogsMetricResponse: LogsMetricResponse_1.LogsMetricResponse,
    LogsMetricResponseAttributes: LogsMetricResponseAttributes_1.LogsMetricResponseAttributes,
    LogsMetricResponseCompute: LogsMetricResponseCompute_1.LogsMetricResponseCompute,
    LogsMetricResponseData: LogsMetricResponseData_1.LogsMetricResponseData,
    LogsMetricResponseFilter: LogsMetricResponseFilter_1.LogsMetricResponseFilter,
    LogsMetricResponseGroupBy: LogsMetricResponseGroupBy_1.LogsMetricResponseGroupBy,
    LogsMetricUpdateAttributes: LogsMetricUpdateAttributes_1.LogsMetricUpdateAttributes,
    LogsMetricUpdateCompute: LogsMetricUpdateCompute_1.LogsMetricUpdateCompute,
    LogsMetricUpdateData: LogsMetricUpdateData_1.LogsMetricUpdateData,
    LogsMetricUpdateRequest: LogsMetricUpdateRequest_1.LogsMetricUpdateRequest,
    LogsMetricsResponse: LogsMetricsResponse_1.LogsMetricsResponse,
    LogsQueryFilter: LogsQueryFilter_1.LogsQueryFilter,
    LogsQueryOptions: LogsQueryOptions_1.LogsQueryOptions,
    LogsResponseMetadata: LogsResponseMetadata_1.LogsResponseMetadata,
    LogsResponseMetadataPage: LogsResponseMetadataPage_1.LogsResponseMetadataPage,
    LogsWarning: LogsWarning_1.LogsWarning,
    Metric: Metric_1.Metric,
    MetricAllTags: MetricAllTags_1.MetricAllTags,
    MetricAllTagsAttributes: MetricAllTagsAttributes_1.MetricAllTagsAttributes,
    MetricAllTagsResponse: MetricAllTagsResponse_1.MetricAllTagsResponse,
    MetricBulkTagConfigCreate: MetricBulkTagConfigCreate_1.MetricBulkTagConfigCreate,
    MetricBulkTagConfigCreateAttributes: MetricBulkTagConfigCreateAttributes_1.MetricBulkTagConfigCreateAttributes,
    MetricBulkTagConfigCreateRequest: MetricBulkTagConfigCreateRequest_1.MetricBulkTagConfigCreateRequest,
    MetricBulkTagConfigDelete: MetricBulkTagConfigDelete_1.MetricBulkTagConfigDelete,
    MetricBulkTagConfigDeleteAttributes: MetricBulkTagConfigDeleteAttributes_1.MetricBulkTagConfigDeleteAttributes,
    MetricBulkTagConfigDeleteRequest: MetricBulkTagConfigDeleteRequest_1.MetricBulkTagConfigDeleteRequest,
    MetricBulkTagConfigResponse: MetricBulkTagConfigResponse_1.MetricBulkTagConfigResponse,
    MetricBulkTagConfigStatus: MetricBulkTagConfigStatus_1.MetricBulkTagConfigStatus,
    MetricBulkTagConfigStatusAttributes: MetricBulkTagConfigStatusAttributes_1.MetricBulkTagConfigStatusAttributes,
    MetricCustomAggregation: MetricCustomAggregation_1.MetricCustomAggregation,
    MetricDistinctVolume: MetricDistinctVolume_1.MetricDistinctVolume,
    MetricDistinctVolumeAttributes: MetricDistinctVolumeAttributes_1.MetricDistinctVolumeAttributes,
    MetricEstimate: MetricEstimate_1.MetricEstimate,
    MetricEstimateAttributes: MetricEstimateAttributes_1.MetricEstimateAttributes,
    MetricEstimateResponse: MetricEstimateResponse_1.MetricEstimateResponse,
    MetricIngestedIndexedVolume: MetricIngestedIndexedVolume_1.MetricIngestedIndexedVolume,
    MetricIngestedIndexedVolumeAttributes: MetricIngestedIndexedVolumeAttributes_1.MetricIngestedIndexedVolumeAttributes,
    MetricMetadata: MetricMetadata_1.MetricMetadata,
    MetricOrigin: MetricOrigin_1.MetricOrigin,
    MetricPayload: MetricPayload_1.MetricPayload,
    MetricPoint: MetricPoint_1.MetricPoint,
    MetricResource: MetricResource_1.MetricResource,
    MetricSeries: MetricSeries_1.MetricSeries,
    MetricSuggestedTagsAndAggregations: MetricSuggestedTagsAndAggregations_1.MetricSuggestedTagsAndAggregations,
    MetricSuggestedTagsAndAggregationsResponse: MetricSuggestedTagsAndAggregationsResponse_1.MetricSuggestedTagsAndAggregationsResponse,
    MetricSuggestedTagsAttributes: MetricSuggestedTagsAttributes_1.MetricSuggestedTagsAttributes,
    MetricTagConfiguration: MetricTagConfiguration_1.MetricTagConfiguration,
    MetricTagConfigurationAttributes: MetricTagConfigurationAttributes_1.MetricTagConfigurationAttributes,
    MetricTagConfigurationCreateAttributes: MetricTagConfigurationCreateAttributes_1.MetricTagConfigurationCreateAttributes,
    MetricTagConfigurationCreateData: MetricTagConfigurationCreateData_1.MetricTagConfigurationCreateData,
    MetricTagConfigurationCreateRequest: MetricTagConfigurationCreateRequest_1.MetricTagConfigurationCreateRequest,
    MetricTagConfigurationResponse: MetricTagConfigurationResponse_1.MetricTagConfigurationResponse,
    MetricTagConfigurationUpdateAttributes: MetricTagConfigurationUpdateAttributes_1.MetricTagConfigurationUpdateAttributes,
    MetricTagConfigurationUpdateData: MetricTagConfigurationUpdateData_1.MetricTagConfigurationUpdateData,
    MetricTagConfigurationUpdateRequest: MetricTagConfigurationUpdateRequest_1.MetricTagConfigurationUpdateRequest,
    MetricVolumesResponse: MetricVolumesResponse_1.MetricVolumesResponse,
    MetricsAndMetricTagConfigurationsResponse: MetricsAndMetricTagConfigurationsResponse_1.MetricsAndMetricTagConfigurationsResponse,
    MetricsScalarQuery: MetricsScalarQuery_1.MetricsScalarQuery,
    MetricsTimeseriesQuery: MetricsTimeseriesQuery_1.MetricsTimeseriesQuery,
    MonitorConfigPolicyAttributeCreateRequest: MonitorConfigPolicyAttributeCreateRequest_1.MonitorConfigPolicyAttributeCreateRequest,
    MonitorConfigPolicyAttributeEditRequest: MonitorConfigPolicyAttributeEditRequest_1.MonitorConfigPolicyAttributeEditRequest,
    MonitorConfigPolicyAttributeResponse: MonitorConfigPolicyAttributeResponse_1.MonitorConfigPolicyAttributeResponse,
    MonitorConfigPolicyCreateData: MonitorConfigPolicyCreateData_1.MonitorConfigPolicyCreateData,
    MonitorConfigPolicyCreateRequest: MonitorConfigPolicyCreateRequest_1.MonitorConfigPolicyCreateRequest,
    MonitorConfigPolicyEditData: MonitorConfigPolicyEditData_1.MonitorConfigPolicyEditData,
    MonitorConfigPolicyEditRequest: MonitorConfigPolicyEditRequest_1.MonitorConfigPolicyEditRequest,
    MonitorConfigPolicyListResponse: MonitorConfigPolicyListResponse_1.MonitorConfigPolicyListResponse,
    MonitorConfigPolicyResponse: MonitorConfigPolicyResponse_1.MonitorConfigPolicyResponse,
    MonitorConfigPolicyResponseData: MonitorConfigPolicyResponseData_1.MonitorConfigPolicyResponseData,
    MonitorConfigPolicyTagPolicy: MonitorConfigPolicyTagPolicy_1.MonitorConfigPolicyTagPolicy,
    MonitorConfigPolicyTagPolicyCreateRequest: MonitorConfigPolicyTagPolicyCreateRequest_1.MonitorConfigPolicyTagPolicyCreateRequest,
    MonitorType: MonitorType_1.MonitorType,
    NullableRelationshipToUser: NullableRelationshipToUser_1.NullableRelationshipToUser,
    NullableRelationshipToUserData: NullableRelationshipToUserData_1.NullableRelationshipToUserData,
    OnDemandConcurrencyCap: OnDemandConcurrencyCap_1.OnDemandConcurrencyCap,
    OnDemandConcurrencyCapAttributes: OnDemandConcurrencyCapAttributes_1.OnDemandConcurrencyCapAttributes,
    OnDemandConcurrencyCapResponse: OnDemandConcurrencyCapResponse_1.OnDemandConcurrencyCapResponse,
    OpsgenieServiceCreateAttributes: OpsgenieServiceCreateAttributes_1.OpsgenieServiceCreateAttributes,
    OpsgenieServiceCreateData: OpsgenieServiceCreateData_1.OpsgenieServiceCreateData,
    OpsgenieServiceCreateRequest: OpsgenieServiceCreateRequest_1.OpsgenieServiceCreateRequest,
    OpsgenieServiceResponse: OpsgenieServiceResponse_1.OpsgenieServiceResponse,
    OpsgenieServiceResponseAttributes: OpsgenieServiceResponseAttributes_1.OpsgenieServiceResponseAttributes,
    OpsgenieServiceResponseData: OpsgenieServiceResponseData_1.OpsgenieServiceResponseData,
    OpsgenieServiceUpdateAttributes: OpsgenieServiceUpdateAttributes_1.OpsgenieServiceUpdateAttributes,
    OpsgenieServiceUpdateData: OpsgenieServiceUpdateData_1.OpsgenieServiceUpdateData,
    OpsgenieServiceUpdateRequest: OpsgenieServiceUpdateRequest_1.OpsgenieServiceUpdateRequest,
    OpsgenieServicesResponse: OpsgenieServicesResponse_1.OpsgenieServicesResponse,
    Organization: Organization_1.Organization,
    OrganizationAttributes: OrganizationAttributes_1.OrganizationAttributes,
    Pagination: Pagination_1.Pagination,
    PartialAPIKey: PartialAPIKey_1.PartialAPIKey,
    PartialAPIKeyAttributes: PartialAPIKeyAttributes_1.PartialAPIKeyAttributes,
    PartialApplicationKey: PartialApplicationKey_1.PartialApplicationKey,
    PartialApplicationKeyAttributes: PartialApplicationKeyAttributes_1.PartialApplicationKeyAttributes,
    PartialApplicationKeyResponse: PartialApplicationKeyResponse_1.PartialApplicationKeyResponse,
    Permission: Permission_1.Permission,
    PermissionAttributes: PermissionAttributes_1.PermissionAttributes,
    PermissionsResponse: PermissionsResponse_1.PermissionsResponse,
    ProcessSummariesMeta: ProcessSummariesMeta_1.ProcessSummariesMeta,
    ProcessSummariesMetaPage: ProcessSummariesMetaPage_1.ProcessSummariesMetaPage,
    ProcessSummariesResponse: ProcessSummariesResponse_1.ProcessSummariesResponse,
    ProcessSummary: ProcessSummary_1.ProcessSummary,
    ProcessSummaryAttributes: ProcessSummaryAttributes_1.ProcessSummaryAttributes,
    QueryFormula: QueryFormula_1.QueryFormula,
    RUMAggregateBucketValueTimeseriesPoint: RUMAggregateBucketValueTimeseriesPoint_1.RUMAggregateBucketValueTimeseriesPoint,
    RUMAggregateRequest: RUMAggregateRequest_1.RUMAggregateRequest,
    RUMAggregateSort: RUMAggregateSort_1.RUMAggregateSort,
    RUMAggregationBucketsResponse: RUMAggregationBucketsResponse_1.RUMAggregationBucketsResponse,
    RUMAnalyticsAggregateResponse: RUMAnalyticsAggregateResponse_1.RUMAnalyticsAggregateResponse,
    RUMApplication: RUMApplication_1.RUMApplication,
    RUMApplicationAttributes: RUMApplicationAttributes_1.RUMApplicationAttributes,
    RUMApplicationCreate: RUMApplicationCreate_1.RUMApplicationCreate,
    RUMApplicationCreateAttributes: RUMApplicationCreateAttributes_1.RUMApplicationCreateAttributes,
    RUMApplicationCreateRequest: RUMApplicationCreateRequest_1.RUMApplicationCreateRequest,
    RUMApplicationList: RUMApplicationList_1.RUMApplicationList,
    RUMApplicationListAttributes: RUMApplicationListAttributes_1.RUMApplicationListAttributes,
    RUMApplicationResponse: RUMApplicationResponse_1.RUMApplicationResponse,
    RUMApplicationUpdate: RUMApplicationUpdate_1.RUMApplicationUpdate,
    RUMApplicationUpdateAttributes: RUMApplicationUpdateAttributes_1.RUMApplicationUpdateAttributes,
    RUMApplicationUpdateRequest: RUMApplicationUpdateRequest_1.RUMApplicationUpdateRequest,
    RUMApplicationsResponse: RUMApplicationsResponse_1.RUMApplicationsResponse,
    RUMBucketResponse: RUMBucketResponse_1.RUMBucketResponse,
    RUMCompute: RUMCompute_1.RUMCompute,
    RUMEvent: RUMEvent_1.RUMEvent,
    RUMEventAttributes: RUMEventAttributes_1.RUMEventAttributes,
    RUMEventsResponse: RUMEventsResponse_1.RUMEventsResponse,
    RUMGroupBy: RUMGroupBy_1.RUMGroupBy,
    RUMGroupByHistogram: RUMGroupByHistogram_1.RUMGroupByHistogram,
    RUMQueryFilter: RUMQueryFilter_1.RUMQueryFilter,
    RUMQueryOptions: RUMQueryOptions_1.RUMQueryOptions,
    RUMQueryPageOptions: RUMQueryPageOptions_1.RUMQueryPageOptions,
    RUMResponseLinks: RUMResponseLinks_1.RUMResponseLinks,
    RUMResponseMetadata: RUMResponseMetadata_1.RUMResponseMetadata,
    RUMResponsePage: RUMResponsePage_1.RUMResponsePage,
    RUMSearchEventsRequest: RUMSearchEventsRequest_1.RUMSearchEventsRequest,
    RUMWarning: RUMWarning_1.RUMWarning,
    RelationshipToIncidentAttachment: RelationshipToIncidentAttachment_1.RelationshipToIncidentAttachment,
    RelationshipToIncidentAttachmentData: RelationshipToIncidentAttachmentData_1.RelationshipToIncidentAttachmentData,
    RelationshipToIncidentIntegrationMetadataData: RelationshipToIncidentIntegrationMetadataData_1.RelationshipToIncidentIntegrationMetadataData,
    RelationshipToIncidentIntegrationMetadatas: RelationshipToIncidentIntegrationMetadatas_1.RelationshipToIncidentIntegrationMetadatas,
    RelationshipToIncidentPostmortem: RelationshipToIncidentPostmortem_1.RelationshipToIncidentPostmortem,
    RelationshipToIncidentPostmortemData: RelationshipToIncidentPostmortemData_1.RelationshipToIncidentPostmortemData,
    RelationshipToOrganization: RelationshipToOrganization_1.RelationshipToOrganization,
    RelationshipToOrganizationData: RelationshipToOrganizationData_1.RelationshipToOrganizationData,
    RelationshipToOrganizations: RelationshipToOrganizations_1.RelationshipToOrganizations,
    RelationshipToPermission: RelationshipToPermission_1.RelationshipToPermission,
    RelationshipToPermissionData: RelationshipToPermissionData_1.RelationshipToPermissionData,
    RelationshipToPermissions: RelationshipToPermissions_1.RelationshipToPermissions,
    RelationshipToRole: RelationshipToRole_1.RelationshipToRole,
    RelationshipToRoleData: RelationshipToRoleData_1.RelationshipToRoleData,
    RelationshipToRoles: RelationshipToRoles_1.RelationshipToRoles,
    RelationshipToSAMLAssertionAttribute: RelationshipToSAMLAssertionAttribute_1.RelationshipToSAMLAssertionAttribute,
    RelationshipToSAMLAssertionAttributeData: RelationshipToSAMLAssertionAttributeData_1.RelationshipToSAMLAssertionAttributeData,
    RelationshipToUser: RelationshipToUser_1.RelationshipToUser,
    RelationshipToUserData: RelationshipToUserData_1.RelationshipToUserData,
    RelationshipToUsers: RelationshipToUsers_1.RelationshipToUsers,
    ResponseMetaAttributes: ResponseMetaAttributes_1.ResponseMetaAttributes,
    RestrictionPolicy: RestrictionPolicy_1.RestrictionPolicy,
    RestrictionPolicyAttributes: RestrictionPolicyAttributes_1.RestrictionPolicyAttributes,
    RestrictionPolicyBinding: RestrictionPolicyBinding_1.RestrictionPolicyBinding,
    RestrictionPolicyResponse: RestrictionPolicyResponse_1.RestrictionPolicyResponse,
    RestrictionPolicyUpdateRequest: RestrictionPolicyUpdateRequest_1.RestrictionPolicyUpdateRequest,
    Role: Role_1.Role,
    RoleAttributes: RoleAttributes_1.RoleAttributes,
    RoleClone: RoleClone_1.RoleClone,
    RoleCloneAttributes: RoleCloneAttributes_1.RoleCloneAttributes,
    RoleCloneRequest: RoleCloneRequest_1.RoleCloneRequest,
    RoleCreateAttributes: RoleCreateAttributes_1.RoleCreateAttributes,
    RoleCreateData: RoleCreateData_1.RoleCreateData,
    RoleCreateRequest: RoleCreateRequest_1.RoleCreateRequest,
    RoleCreateResponse: RoleCreateResponse_1.RoleCreateResponse,
    RoleCreateResponseData: RoleCreateResponseData_1.RoleCreateResponseData,
    RoleRelationships: RoleRelationships_1.RoleRelationships,
    RoleResponse: RoleResponse_1.RoleResponse,
    RoleResponseRelationships: RoleResponseRelationships_1.RoleResponseRelationships,
    RoleUpdateAttributes: RoleUpdateAttributes_1.RoleUpdateAttributes,
    RoleUpdateData: RoleUpdateData_1.RoleUpdateData,
    RoleUpdateRequest: RoleUpdateRequest_1.RoleUpdateRequest,
    RoleUpdateResponse: RoleUpdateResponse_1.RoleUpdateResponse,
    RoleUpdateResponseData: RoleUpdateResponseData_1.RoleUpdateResponseData,
    RolesResponse: RolesResponse_1.RolesResponse,
    SAMLAssertionAttribute: SAMLAssertionAttribute_1.SAMLAssertionAttribute,
    SAMLAssertionAttributeAttributes: SAMLAssertionAttributeAttributes_1.SAMLAssertionAttributeAttributes,
    ScalarFormulaQueryRequest: ScalarFormulaQueryRequest_1.ScalarFormulaQueryRequest,
    ScalarFormulaQueryResponse: ScalarFormulaQueryResponse_1.ScalarFormulaQueryResponse,
    ScalarFormulaRequest: ScalarFormulaRequest_1.ScalarFormulaRequest,
    ScalarFormulaRequestAttributes: ScalarFormulaRequestAttributes_1.ScalarFormulaRequestAttributes,
    ScalarFormulaResponseAtrributes: ScalarFormulaResponseAtrributes_1.ScalarFormulaResponseAtrributes,
    ScalarMeta: ScalarMeta_1.ScalarMeta,
    ScalarResponse: ScalarResponse_1.ScalarResponse,
    SecurityFilter: SecurityFilter_1.SecurityFilter,
    SecurityFilterAttributes: SecurityFilterAttributes_1.SecurityFilterAttributes,
    SecurityFilterCreateAttributes: SecurityFilterCreateAttributes_1.SecurityFilterCreateAttributes,
    SecurityFilterCreateData: SecurityFilterCreateData_1.SecurityFilterCreateData,
    SecurityFilterCreateRequest: SecurityFilterCreateRequest_1.SecurityFilterCreateRequest,
    SecurityFilterExclusionFilter: SecurityFilterExclusionFilter_1.SecurityFilterExclusionFilter,
    SecurityFilterExclusionFilterResponse: SecurityFilterExclusionFilterResponse_1.SecurityFilterExclusionFilterResponse,
    SecurityFilterMeta: SecurityFilterMeta_1.SecurityFilterMeta,
    SecurityFilterResponse: SecurityFilterResponse_1.SecurityFilterResponse,
    SecurityFilterUpdateAttributes: SecurityFilterUpdateAttributes_1.SecurityFilterUpdateAttributes,
    SecurityFilterUpdateData: SecurityFilterUpdateData_1.SecurityFilterUpdateData,
    SecurityFilterUpdateRequest: SecurityFilterUpdateRequest_1.SecurityFilterUpdateRequest,
    SecurityFiltersResponse: SecurityFiltersResponse_1.SecurityFiltersResponse,
    SecurityMonitoringFilter: SecurityMonitoringFilter_1.SecurityMonitoringFilter,
    SecurityMonitoringListRulesResponse: SecurityMonitoringListRulesResponse_1.SecurityMonitoringListRulesResponse,
    SecurityMonitoringRuleCase: SecurityMonitoringRuleCase_1.SecurityMonitoringRuleCase,
    SecurityMonitoringRuleCaseCreate: SecurityMonitoringRuleCaseCreate_1.SecurityMonitoringRuleCaseCreate,
    SecurityMonitoringRuleImpossibleTravelOptions: SecurityMonitoringRuleImpossibleTravelOptions_1.SecurityMonitoringRuleImpossibleTravelOptions,
    SecurityMonitoringRuleNewValueOptions: SecurityMonitoringRuleNewValueOptions_1.SecurityMonitoringRuleNewValueOptions,
    SecurityMonitoringRuleOptions: SecurityMonitoringRuleOptions_1.SecurityMonitoringRuleOptions,
    SecurityMonitoringRuleUpdatePayload: SecurityMonitoringRuleUpdatePayload_1.SecurityMonitoringRuleUpdatePayload,
    SecurityMonitoringSignal: SecurityMonitoringSignal_1.SecurityMonitoringSignal,
    SecurityMonitoringSignalAssigneeUpdateAttributes: SecurityMonitoringSignalAssigneeUpdateAttributes_1.SecurityMonitoringSignalAssigneeUpdateAttributes,
    SecurityMonitoringSignalAssigneeUpdateData: SecurityMonitoringSignalAssigneeUpdateData_1.SecurityMonitoringSignalAssigneeUpdateData,
    SecurityMonitoringSignalAssigneeUpdateRequest: SecurityMonitoringSignalAssigneeUpdateRequest_1.SecurityMonitoringSignalAssigneeUpdateRequest,
    SecurityMonitoringSignalAttributes: SecurityMonitoringSignalAttributes_1.SecurityMonitoringSignalAttributes,
    SecurityMonitoringSignalIncidentsUpdateAttributes: SecurityMonitoringSignalIncidentsUpdateAttributes_1.SecurityMonitoringSignalIncidentsUpdateAttributes,
    SecurityMonitoringSignalIncidentsUpdateData: SecurityMonitoringSignalIncidentsUpdateData_1.SecurityMonitoringSignalIncidentsUpdateData,
    SecurityMonitoringSignalIncidentsUpdateRequest: SecurityMonitoringSignalIncidentsUpdateRequest_1.SecurityMonitoringSignalIncidentsUpdateRequest,
    SecurityMonitoringSignalListRequest: SecurityMonitoringSignalListRequest_1.SecurityMonitoringSignalListRequest,
    SecurityMonitoringSignalListRequestFilter: SecurityMonitoringSignalListRequestFilter_1.SecurityMonitoringSignalListRequestFilter,
    SecurityMonitoringSignalListRequestPage: SecurityMonitoringSignalListRequestPage_1.SecurityMonitoringSignalListRequestPage,
    SecurityMonitoringSignalRuleCreatePayload: SecurityMonitoringSignalRuleCreatePayload_1.SecurityMonitoringSignalRuleCreatePayload,
    SecurityMonitoringSignalRuleQuery: SecurityMonitoringSignalRuleQuery_1.SecurityMonitoringSignalRuleQuery,
    SecurityMonitoringSignalRuleResponse: SecurityMonitoringSignalRuleResponse_1.SecurityMonitoringSignalRuleResponse,
    SecurityMonitoringSignalRuleResponseQuery: SecurityMonitoringSignalRuleResponseQuery_1.SecurityMonitoringSignalRuleResponseQuery,
    SecurityMonitoringSignalStateUpdateAttributes: SecurityMonitoringSignalStateUpdateAttributes_1.SecurityMonitoringSignalStateUpdateAttributes,
    SecurityMonitoringSignalStateUpdateData: SecurityMonitoringSignalStateUpdateData_1.SecurityMonitoringSignalStateUpdateData,
    SecurityMonitoringSignalStateUpdateRequest: SecurityMonitoringSignalStateUpdateRequest_1.SecurityMonitoringSignalStateUpdateRequest,
    SecurityMonitoringSignalTriageAttributes: SecurityMonitoringSignalTriageAttributes_1.SecurityMonitoringSignalTriageAttributes,
    SecurityMonitoringSignalTriageUpdateData: SecurityMonitoringSignalTriageUpdateData_1.SecurityMonitoringSignalTriageUpdateData,
    SecurityMonitoringSignalTriageUpdateResponse: SecurityMonitoringSignalTriageUpdateResponse_1.SecurityMonitoringSignalTriageUpdateResponse,
    SecurityMonitoringSignalsListResponse: SecurityMonitoringSignalsListResponse_1.SecurityMonitoringSignalsListResponse,
    SecurityMonitoringSignalsListResponseLinks: SecurityMonitoringSignalsListResponseLinks_1.SecurityMonitoringSignalsListResponseLinks,
    SecurityMonitoringSignalsListResponseMeta: SecurityMonitoringSignalsListResponseMeta_1.SecurityMonitoringSignalsListResponseMeta,
    SecurityMonitoringSignalsListResponseMetaPage: SecurityMonitoringSignalsListResponseMetaPage_1.SecurityMonitoringSignalsListResponseMetaPage,
    SecurityMonitoringStandardRuleCreatePayload: SecurityMonitoringStandardRuleCreatePayload_1.SecurityMonitoringStandardRuleCreatePayload,
    SecurityMonitoringStandardRuleQuery: SecurityMonitoringStandardRuleQuery_1.SecurityMonitoringStandardRuleQuery,
    SecurityMonitoringStandardRuleResponse: SecurityMonitoringStandardRuleResponse_1.SecurityMonitoringStandardRuleResponse,
    SecurityMonitoringTriageUser: SecurityMonitoringTriageUser_1.SecurityMonitoringTriageUser,
    SensitiveDataScannerConfigRequest: SensitiveDataScannerConfigRequest_1.SensitiveDataScannerConfigRequest,
    SensitiveDataScannerConfiguration: SensitiveDataScannerConfiguration_1.SensitiveDataScannerConfiguration,
    SensitiveDataScannerConfigurationData: SensitiveDataScannerConfigurationData_1.SensitiveDataScannerConfigurationData,
    SensitiveDataScannerConfigurationRelationships: SensitiveDataScannerConfigurationRelationships_1.SensitiveDataScannerConfigurationRelationships,
    SensitiveDataScannerCreateGroupResponse: SensitiveDataScannerCreateGroupResponse_1.SensitiveDataScannerCreateGroupResponse,
    SensitiveDataScannerCreateRuleResponse: SensitiveDataScannerCreateRuleResponse_1.SensitiveDataScannerCreateRuleResponse,
    SensitiveDataScannerFilter: SensitiveDataScannerFilter_1.SensitiveDataScannerFilter,
    SensitiveDataScannerGetConfigResponse: SensitiveDataScannerGetConfigResponse_1.SensitiveDataScannerGetConfigResponse,
    SensitiveDataScannerGetConfigResponseData: SensitiveDataScannerGetConfigResponseData_1.SensitiveDataScannerGetConfigResponseData,
    SensitiveDataScannerGroup: SensitiveDataScannerGroup_1.SensitiveDataScannerGroup,
    SensitiveDataScannerGroupAttributes: SensitiveDataScannerGroupAttributes_1.SensitiveDataScannerGroupAttributes,
    SensitiveDataScannerGroupCreate: SensitiveDataScannerGroupCreate_1.SensitiveDataScannerGroupCreate,
    SensitiveDataScannerGroupCreateRequest: SensitiveDataScannerGroupCreateRequest_1.SensitiveDataScannerGroupCreateRequest,
    SensitiveDataScannerGroupData: SensitiveDataScannerGroupData_1.SensitiveDataScannerGroupData,
    SensitiveDataScannerGroupDeleteRequest: SensitiveDataScannerGroupDeleteRequest_1.SensitiveDataScannerGroupDeleteRequest,
    SensitiveDataScannerGroupDeleteResponse: SensitiveDataScannerGroupDeleteResponse_1.SensitiveDataScannerGroupDeleteResponse,
    SensitiveDataScannerGroupIncludedItem: SensitiveDataScannerGroupIncludedItem_1.SensitiveDataScannerGroupIncludedItem,
    SensitiveDataScannerGroupItem: SensitiveDataScannerGroupItem_1.SensitiveDataScannerGroupItem,
    SensitiveDataScannerGroupList: SensitiveDataScannerGroupList_1.SensitiveDataScannerGroupList,
    SensitiveDataScannerGroupRelationships: SensitiveDataScannerGroupRelationships_1.SensitiveDataScannerGroupRelationships,
    SensitiveDataScannerGroupResponse: SensitiveDataScannerGroupResponse_1.SensitiveDataScannerGroupResponse,
    SensitiveDataScannerGroupUpdate: SensitiveDataScannerGroupUpdate_1.SensitiveDataScannerGroupUpdate,
    SensitiveDataScannerGroupUpdateRequest: SensitiveDataScannerGroupUpdateRequest_1.SensitiveDataScannerGroupUpdateRequest,
    SensitiveDataScannerGroupUpdateResponse: SensitiveDataScannerGroupUpdateResponse_1.SensitiveDataScannerGroupUpdateResponse,
    SensitiveDataScannerMeta: SensitiveDataScannerMeta_1.SensitiveDataScannerMeta,
    SensitiveDataScannerMetaVersionOnly: SensitiveDataScannerMetaVersionOnly_1.SensitiveDataScannerMetaVersionOnly,
    SensitiveDataScannerReorderConfig: SensitiveDataScannerReorderConfig_1.SensitiveDataScannerReorderConfig,
    SensitiveDataScannerReorderGroupsResponse: SensitiveDataScannerReorderGroupsResponse_1.SensitiveDataScannerReorderGroupsResponse,
    SensitiveDataScannerRule: SensitiveDataScannerRule_1.SensitiveDataScannerRule,
    SensitiveDataScannerRuleAttributes: SensitiveDataScannerRuleAttributes_1.SensitiveDataScannerRuleAttributes,
    SensitiveDataScannerRuleCreate: SensitiveDataScannerRuleCreate_1.SensitiveDataScannerRuleCreate,
    SensitiveDataScannerRuleCreateRequest: SensitiveDataScannerRuleCreateRequest_1.SensitiveDataScannerRuleCreateRequest,
    SensitiveDataScannerRuleData: SensitiveDataScannerRuleData_1.SensitiveDataScannerRuleData,
    SensitiveDataScannerRuleDeleteRequest: SensitiveDataScannerRuleDeleteRequest_1.SensitiveDataScannerRuleDeleteRequest,
    SensitiveDataScannerRuleDeleteResponse: SensitiveDataScannerRuleDeleteResponse_1.SensitiveDataScannerRuleDeleteResponse,
    SensitiveDataScannerRuleIncludedItem: SensitiveDataScannerRuleIncludedItem_1.SensitiveDataScannerRuleIncludedItem,
    SensitiveDataScannerRuleRelationships: SensitiveDataScannerRuleRelationships_1.SensitiveDataScannerRuleRelationships,
    SensitiveDataScannerRuleResponse: SensitiveDataScannerRuleResponse_1.SensitiveDataScannerRuleResponse,
    SensitiveDataScannerRuleUpdate: SensitiveDataScannerRuleUpdate_1.SensitiveDataScannerRuleUpdate,
    SensitiveDataScannerRuleUpdateRequest: SensitiveDataScannerRuleUpdateRequest_1.SensitiveDataScannerRuleUpdateRequest,
    SensitiveDataScannerRuleUpdateResponse: SensitiveDataScannerRuleUpdateResponse_1.SensitiveDataScannerRuleUpdateResponse,
    SensitiveDataScannerStandardPattern: SensitiveDataScannerStandardPattern_1.SensitiveDataScannerStandardPattern,
    SensitiveDataScannerStandardPatternAttributes: SensitiveDataScannerStandardPatternAttributes_1.SensitiveDataScannerStandardPatternAttributes,
    SensitiveDataScannerStandardPatternData: SensitiveDataScannerStandardPatternData_1.SensitiveDataScannerStandardPatternData,
    SensitiveDataScannerStandardPatternsResponseData: SensitiveDataScannerStandardPatternsResponseData_1.SensitiveDataScannerStandardPatternsResponseData,
    SensitiveDataScannerStandardPatternsResponseItem: SensitiveDataScannerStandardPatternsResponseItem_1.SensitiveDataScannerStandardPatternsResponseItem,
    SensitiveDataScannerTextReplacement: SensitiveDataScannerTextReplacement_1.SensitiveDataScannerTextReplacement,
    ServiceAccountCreateAttributes: ServiceAccountCreateAttributes_1.ServiceAccountCreateAttributes,
    ServiceAccountCreateData: ServiceAccountCreateData_1.ServiceAccountCreateData,
    ServiceAccountCreateRequest: ServiceAccountCreateRequest_1.ServiceAccountCreateRequest,
    ServiceDefinitionCreateResponse: ServiceDefinitionCreateResponse_1.ServiceDefinitionCreateResponse,
    ServiceDefinitionData: ServiceDefinitionData_1.ServiceDefinitionData,
    ServiceDefinitionDataAttributes: ServiceDefinitionDataAttributes_1.ServiceDefinitionDataAttributes,
    ServiceDefinitionGetResponse: ServiceDefinitionGetResponse_1.ServiceDefinitionGetResponse,
    ServiceDefinitionMeta: ServiceDefinitionMeta_1.ServiceDefinitionMeta,
    ServiceDefinitionV1: ServiceDefinitionV1_1.ServiceDefinitionV1,
    ServiceDefinitionV1Contact: ServiceDefinitionV1Contact_1.ServiceDefinitionV1Contact,
    ServiceDefinitionV1Info: ServiceDefinitionV1Info_1.ServiceDefinitionV1Info,
    ServiceDefinitionV1Integrations: ServiceDefinitionV1Integrations_1.ServiceDefinitionV1Integrations,
    ServiceDefinitionV1Org: ServiceDefinitionV1Org_1.ServiceDefinitionV1Org,
    ServiceDefinitionV1Resource: ServiceDefinitionV1Resource_1.ServiceDefinitionV1Resource,
    ServiceDefinitionV2: ServiceDefinitionV2_1.ServiceDefinitionV2,
    ServiceDefinitionV2Doc: ServiceDefinitionV2Doc_1.ServiceDefinitionV2Doc,
    ServiceDefinitionV2Email: ServiceDefinitionV2Email_1.ServiceDefinitionV2Email,
    ServiceDefinitionV2Integrations: ServiceDefinitionV2Integrations_1.ServiceDefinitionV2Integrations,
    ServiceDefinitionV2Link: ServiceDefinitionV2Link_1.ServiceDefinitionV2Link,
    ServiceDefinitionV2Opsgenie: ServiceDefinitionV2Opsgenie_1.ServiceDefinitionV2Opsgenie,
    ServiceDefinitionV2Repo: ServiceDefinitionV2Repo_1.ServiceDefinitionV2Repo,
    ServiceDefinitionV2Slack: ServiceDefinitionV2Slack_1.ServiceDefinitionV2Slack,
    ServiceDefinitionsListResponse: ServiceDefinitionsListResponse_1.ServiceDefinitionsListResponse,
    SlackIntegrationMetadata: SlackIntegrationMetadata_1.SlackIntegrationMetadata,
    SlackIntegrationMetadataChannelItem: SlackIntegrationMetadataChannelItem_1.SlackIntegrationMetadataChannelItem,
    TimeseriesFormulaQueryRequest: TimeseriesFormulaQueryRequest_1.TimeseriesFormulaQueryRequest,
    TimeseriesFormulaQueryResponse: TimeseriesFormulaQueryResponse_1.TimeseriesFormulaQueryResponse,
    TimeseriesFormulaRequest: TimeseriesFormulaRequest_1.TimeseriesFormulaRequest,
    TimeseriesFormulaRequestAttributes: TimeseriesFormulaRequestAttributes_1.TimeseriesFormulaRequestAttributes,
    TimeseriesResponse: TimeseriesResponse_1.TimeseriesResponse,
    TimeseriesResponseAttributes: TimeseriesResponseAttributes_1.TimeseriesResponseAttributes,
    TimeseriesResponseSeries: TimeseriesResponseSeries_1.TimeseriesResponseSeries,
    Unit: Unit_1.Unit,
    UsageApplicationSecurityMonitoringResponse: UsageApplicationSecurityMonitoringResponse_1.UsageApplicationSecurityMonitoringResponse,
    UsageAttributesObject: UsageAttributesObject_1.UsageAttributesObject,
    UsageDataObject: UsageDataObject_1.UsageDataObject,
    UsageLambdaTracedInvocationsResponse: UsageLambdaTracedInvocationsResponse_1.UsageLambdaTracedInvocationsResponse,
    UsageObservabilityPipelinesResponse: UsageObservabilityPipelinesResponse_1.UsageObservabilityPipelinesResponse,
    UsageTimeSeriesObject: UsageTimeSeriesObject_1.UsageTimeSeriesObject,
    User: User_1.User,
    UserAttributes: UserAttributes_1.UserAttributes,
    UserCreateAttributes: UserCreateAttributes_1.UserCreateAttributes,
    UserCreateData: UserCreateData_1.UserCreateData,
    UserCreateRequest: UserCreateRequest_1.UserCreateRequest,
    UserInvitationData: UserInvitationData_1.UserInvitationData,
    UserInvitationDataAttributes: UserInvitationDataAttributes_1.UserInvitationDataAttributes,
    UserInvitationRelationships: UserInvitationRelationships_1.UserInvitationRelationships,
    UserInvitationResponse: UserInvitationResponse_1.UserInvitationResponse,
    UserInvitationResponseData: UserInvitationResponseData_1.UserInvitationResponseData,
    UserInvitationsRequest: UserInvitationsRequest_1.UserInvitationsRequest,
    UserInvitationsResponse: UserInvitationsResponse_1.UserInvitationsResponse,
    UserRelationships: UserRelationships_1.UserRelationships,
    UserResponse: UserResponse_1.UserResponse,
    UserResponseRelationships: UserResponseRelationships_1.UserResponseRelationships,
    UserUpdateAttributes: UserUpdateAttributes_1.UserUpdateAttributes,
    UserUpdateData: UserUpdateData_1.UserUpdateData,
    UserUpdateRequest: UserUpdateRequest_1.UserUpdateRequest,
    UsersResponse: UsersResponse_1.UsersResponse,
};
const oneOfMap = {
    APIKeyResponseIncludedItem: ["User"],
    ApplicationKeyResponseIncludedItem: ["User", "Role"],
    AuthNMappingIncluded: ["SAMLAssertionAttribute", "Role"],
    CIAppAggregateBucketValue: [
        "string",
        "number",
        "Array<CIAppAggregateBucketValueTimeseriesPoint>",
    ],
    CIAppGroupByMissing: ["string", "number"],
    CIAppGroupByTotal: ["boolean", "string", "number"],
    IncidentAttachmentAttributes: [
        "IncidentAttachmentPostmortemAttributes",
        "IncidentAttachmentLinkAttributes",
    ],
    IncidentAttachmentUpdateAttributes: [
        "IncidentAttachmentPostmortemAttributes",
        "IncidentAttachmentLinkAttributes",
    ],
    IncidentAttachmentsResponseIncludedItem: ["User"],
    IncidentFieldAttributes: [
        "IncidentFieldAttributesSingleValue",
        "IncidentFieldAttributesMultipleValue",
    ],
    IncidentIntegrationMetadataMetadata: [
        "SlackIntegrationMetadata",
        "JiraIntegrationMetadata",
    ],
    IncidentIntegrationMetadataResponseIncludedItem: ["User"],
    IncidentResponseIncludedItem: ["User", "IncidentAttachmentData"],
    IncidentServiceIncludedItems: ["User"],
    IncidentTeamIncludedItems: ["User"],
    IncidentTimelineCellCreateAttributes: [
        "IncidentTimelineCellMarkdownCreateAttributes",
    ],
    LogsAggregateBucketValue: [
        "string",
        "number",
        "Array<LogsAggregateBucketValueTimeseriesPoint>",
    ],
    LogsArchiveCreateRequestDestination: [
        "LogsArchiveDestinationAzure",
        "LogsArchiveDestinationGCS",
        "LogsArchiveDestinationS3",
    ],
    LogsArchiveDestination: [
        "LogsArchiveDestinationAzure",
        "LogsArchiveDestinationGCS",
        "LogsArchiveDestinationS3",
    ],
    LogsGroupByMissing: ["string", "number"],
    LogsGroupByTotal: ["boolean", "string", "number"],
    MetricVolumes: ["MetricDistinctVolume", "MetricIngestedIndexedVolume"],
    MetricsAndMetricTagConfigurations: ["Metric", "MetricTagConfiguration"],
    MonitorConfigPolicyPolicy: ["MonitorConfigPolicyTagPolicy"],
    MonitorConfigPolicyPolicyCreateRequest: [
        "MonitorConfigPolicyTagPolicyCreateRequest",
    ],
    RUMAggregateBucketValue: [
        "string",
        "number",
        "Array<RUMAggregateBucketValueTimeseriesPoint>",
    ],
    RUMGroupByMissing: ["string", "number"],
    RUMGroupByTotal: ["boolean", "string", "number"],
    ScalarColumn: ["GroupScalarColumn", "DataScalarColumn"],
    ScalarQuery: ["MetricsScalarQuery", "EventsScalarQuery"],
    SecurityMonitoringRuleCreatePayload: [
        "SecurityMonitoringStandardRuleCreatePayload",
        "SecurityMonitoringSignalRuleCreatePayload",
        "CloudConfigurationRuleCreatePayload",
    ],
    SecurityMonitoringRuleQuery: [
        "SecurityMonitoringStandardRuleQuery",
        "SecurityMonitoringSignalRuleQuery",
    ],
    SecurityMonitoringRuleResponse: [
        "SecurityMonitoringStandardRuleResponse",
        "SecurityMonitoringSignalRuleResponse",
    ],
    SensitiveDataScannerGetConfigIncludedItem: [
        "SensitiveDataScannerRuleIncludedItem",
        "SensitiveDataScannerGroupIncludedItem",
    ],
    ServiceDefinitionSchema: ["ServiceDefinitionV1", "ServiceDefinitionV2"],
    ServiceDefinitionV2Contact: [
        "ServiceDefinitionV2Email",
        "ServiceDefinitionV2Slack",
    ],
    ServiceDefinitionsCreateRequest: ["ServiceDefinitionV2", "string"],
    TimeseriesQuery: ["MetricsTimeseriesQuery", "EventsTimeseriesQuery"],
    UserResponseIncludedItem: ["Organization", "Permission", "Role"],
};
class ObjectSerializer {
    static serialize(data, type, format) {
        if (data == undefined || type == "any") {
            return data;
        }
        else if (data instanceof util_1.UnparsedObject) {
            return data._data;
        }
        else if (primitives.includes(type.toLowerCase()) &&
            typeof data == type.toLowerCase()) {
            return data;
        }
        else if (type.startsWith(ARRAY_PREFIX)) {
            if (!Array.isArray(data)) {
                throw new TypeError(`mismatch types '${data}' and '${type}'`);
            }
            // Array<Type> => Type
            const subType = type.substring(ARRAY_PREFIX.length, type.length - 1);
            const transformedData = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.serialize(element, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(TUPLE_PREFIX)) {
            // We only support homegeneus tuples
            const subType = type
                .substring(TUPLE_PREFIX.length, type.length - 1)
                .split(", ")[0];
            const transformedData = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.serialize(element, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(MAP_PREFIX)) {
            // { [key: string]: Type; } => Type
            const subType = type.substring(MAP_PREFIX.length, type.length - 3);
            const transformedData = {};
            for (const key in data) {
                transformedData[key] = ObjectSerializer.serialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            if ("string" == typeof data) {
                return data;
            }
            if (format == "date" || format == "date-time") {
                return (0, util_1.dateToRFC3339String)(data);
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap[type]) {
                if (enumsMap[type].includes(data)) {
                    return data;
                }
                throw new TypeError(`unknown enum value '${data}'`);
            }
            if (oneOfMap[type]) {
                const oneOfs = [];
                for (const oneOf of oneOfMap[type]) {
                    try {
                        oneOfs.push(ObjectSerializer.serialize(data, oneOf, format));
                    }
                    catch (e) {
                        logger_1.logger.debug(`could not serialize ${oneOf} (${e})`);
                    }
                }
                if (oneOfs.length > 1) {
                    throw new TypeError(`${data} matches multiple types from ${oneOfMap[type]} ${oneOfs}`);
                }
                if (oneOfs.length == 0) {
                    throw new TypeError(`${data} doesn't match any type from ${oneOfMap[type]} ${oneOfs}`);
                }
                return oneOfs[0];
            }
            if (!typeMap[type]) {
                // dont know the type
                throw new TypeError(`unknown type '${type}'`);
            }
            // get the map for the correct type.
            const attributesMap = typeMap[type].getAttributeTypeMap();
            const instance = {};
            for (const attributeName in attributesMap) {
                const attributeObj = attributesMap[attributeName];
                if (attributeName == "additionalProperties") {
                    if (data.additionalProperties) {
                        for (const key in data.additionalProperties) {
                            instance[key] = ObjectSerializer.serialize(data.additionalProperties[key], attributeObj.type, attributeObj.format);
                        }
                    }
                    continue;
                }
                instance[attributeObj.baseName] = ObjectSerializer.serialize(data[attributeName], attributeObj.type, attributeObj.format);
                // check for required properties
                if ((attributeObj === null || attributeObj === void 0 ? void 0 : attributeObj.required) &&
                    instance[attributeObj.baseName] === undefined) {
                    throw new Error(`missing required property '${attributeObj.baseName}'`);
                }
            }
            return instance;
        }
    }
    static deserialize(data, type, format = "") {
        var _a;
        if (data == undefined || type == "any") {
            return data;
        }
        else if (primitives.includes(type.toLowerCase()) &&
            typeof data == type.toLowerCase()) {
            return data;
        }
        else if (type.startsWith(ARRAY_PREFIX)) {
            // Assert the passed data is Array type
            if (!Array.isArray(data)) {
                throw new TypeError(`mismatch types '${data}' and '${type}'`);
            }
            // Array<Type> => Type
            const subType = type.substring(ARRAY_PREFIX.length, type.length - 1);
            const transformedData = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.deserialize(element, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(TUPLE_PREFIX)) {
            // [Type,...] => Type
            const subType = type
                .substring(TUPLE_PREFIX.length, type.length - 1)
                .split(", ")[0];
            const transformedData = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.deserialize(element, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(MAP_PREFIX)) {
            // { [key: string]: Type; } => Type
            const subType = type.substring(MAP_PREFIX.length, type.length - 3);
            const transformedData = {};
            for (const key in data) {
                transformedData[key] = ObjectSerializer.deserialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            try {
                return (0, util_1.dateFromRFC3339String)(data);
            }
            catch (_b) {
                return new Date(data);
            }
        }
        else {
            if (enumsMap[type]) {
                if (enumsMap[type].includes(data)) {
                    return data;
                }
                return new util_1.UnparsedObject(data);
            }
            if (oneOfMap[type]) {
                const oneOfs = [];
                for (const oneOf of oneOfMap[type]) {
                    try {
                        const d = ObjectSerializer.deserialize(data, oneOf, format);
                        if (!(d === null || d === void 0 ? void 0 : d._unparsed)) {
                            oneOfs.push(d);
                        }
                    }
                    catch (e) {
                        logger_1.logger.debug(`could not deserialize ${oneOf} (${e})`);
                    }
                }
                if (oneOfs.length != 1) {
                    return new util_1.UnparsedObject(data);
                }
                return oneOfs[0];
            }
            if (!typeMap[type]) {
                // dont know the type
                throw new TypeError(`unknown type '${type}'`);
            }
            const instance = new typeMap[type]();
            const attributesMap = typeMap[type].getAttributeTypeMap();
            let extraAttributes = [];
            if ("additionalProperties" in attributesMap) {
                const attributesBaseNames = Object.keys(attributesMap).reduce((o, key) => Object.assign(o, { [attributesMap[key].baseName]: "" }), {});
                extraAttributes = Object.keys(data).filter((key) => !Object.prototype.hasOwnProperty.call(attributesBaseNames, key));
            }
            for (const attributeName in attributesMap) {
                const attributeObj = attributesMap[attributeName];
                if (attributeName == "additionalProperties") {
                    if (extraAttributes.length > 0) {
                        if (!instance.additionalProperties) {
                            instance.additionalProperties = {};
                        }
                        for (const key in extraAttributes) {
                            instance.additionalProperties[extraAttributes[key]] =
                                ObjectSerializer.deserialize(data[extraAttributes[key]], attributeObj.type, attributeObj.format);
                        }
                    }
                    continue;
                }
                instance[attributeName] = ObjectSerializer.deserialize(data[attributeObj.baseName], attributeObj.type, attributeObj.format);
                // check for required properties
                if ((attributeObj === null || attributeObj === void 0 ? void 0 : attributeObj.required) && instance[attributeName] === undefined) {
                    throw new Error(`missing required property '${attributeName}'`);
                }
                if (instance[attributeName] instanceof util_1.UnparsedObject ||
                    ((_a = instance[attributeName]) === null || _a === void 0 ? void 0 : _a._unparsed)) {
                    instance._unparsed = true;
                }
                if (Array.isArray(instance[attributeName])) {
                    for (const d of instance[attributeName]) {
                        if (d instanceof util_1.UnparsedObject || (d === null || d === void 0 ? void 0 : d._unparsed)) {
                            instance._unparsed = true;
                            break;
                        }
                    }
                }
            }
            return instance;
        }
    }
    /**
     * Normalize media type
     *
     * We currently do not handle any media types attributes, i.e. anything
     * after a semicolon. All content is assumed to be UTF-8 compatible.
     */
    static normalizeMediaType(mediaType) {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }
    /**
     * From a list of possible media types, choose the one we can handle best.
     *
     * The order of the given media types does not have any impact on the choice
     * made.
     */
    static getPreferredMediaType(mediaTypes) {
        /** According to OAS 3 we should default to json */
        if (!mediaTypes) {
            return "application/json";
        }
        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        let selectedMediaType = undefined;
        let selectedRank = -Infinity;
        for (const mediaType of normalMediaTypes) {
            if (mediaType === undefined) {
                continue;
            }
            const supported = supportedMediaTypes[mediaType];
            if (supported !== undefined && supported > selectedRank) {
                selectedMediaType = mediaType;
                selectedRank = supported;
            }
        }
        if (selectedMediaType === undefined) {
            throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
        }
        return selectedMediaType;
    }
    /**
     * Convert data to a string according the given media type
     */
    static stringify(data, mediaType) {
        if (mediaType === "application/json" || mediaType === "text/json") {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " +
            mediaType +
            " is not supported by ObjectSerializer.stringify.");
    }
    /**
     * Parse data from a string according to the given media type
     */
    static parse(rawData, mediaType) {
        try {
            return JSON.parse(rawData);
        }
        catch (error) {
            logger_1.logger.debug(`could not parse ${mediaType}: ${error}`);
            return rawData;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map