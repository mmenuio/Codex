import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { RestrictionPolicyResponse } from "../models/RestrictionPolicyResponse";
import { RestrictionPolicyUpdateRequest } from "../models/RestrictionPolicyUpdateRequest";
export declare class RestrictionPoliciesApiRequestFactory extends BaseAPIRequestFactory {
    deleteRestrictionPolicy(resourceId: string, _options?: Configuration): Promise<RequestContext>;
    getRestrictionPolicy(resourceId: string, _options?: Configuration): Promise<RequestContext>;
    updateRestrictionPolicy(resourceId: string, body: RestrictionPolicyUpdateRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class RestrictionPoliciesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteRestrictionPolicy
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteRestrictionPolicy(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getRestrictionPolicy
     * @throws ApiException if the response code was not in [200, 299]
     */
    getRestrictionPolicy(response: ResponseContext): Promise<RestrictionPolicyResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateRestrictionPolicy
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateRestrictionPolicy(response: ResponseContext): Promise<RestrictionPolicyResponse>;
}
export interface RestrictionPoliciesApiDeleteRestrictionPolicyRequest {
    /**
     * Identifier, formatted as `type:id`. Supported types: `connection`, `dashboard`, `notebook`, `security-rule`, `slo`.
     * @type string
     */
    resourceId: string;
}
export interface RestrictionPoliciesApiGetRestrictionPolicyRequest {
    /**
     * Identifier, formatted as `type:id`. Supported types: `connection`, `dashboard`, `notebook`, `security-rule`, `slo`.
     * @type string
     */
    resourceId: string;
}
export interface RestrictionPoliciesApiUpdateRestrictionPolicyRequest {
    /**
     * Identifier, formatted as `type:id`. Supported types: `connection`, `dashboard`, `notebook`, `security-rule`, `slo`.
     * @type string
     */
    resourceId: string;
    /**
     * Restriction policy payload
     * @type RestrictionPolicyUpdateRequest
     */
    body: RestrictionPolicyUpdateRequest;
}
export declare class RestrictionPoliciesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: RestrictionPoliciesApiRequestFactory, responseProcessor?: RestrictionPoliciesApiResponseProcessor);
    /**
     * Deletes the restriction policy associated with a specified resource.
     * @param param The request object
     */
    deleteRestrictionPolicy(param: RestrictionPoliciesApiDeleteRestrictionPolicyRequest, options?: Configuration): Promise<void>;
    /**
     * Retrieves the restriction policy associated with a specified resource.
     * @param param The request object
     */
    getRestrictionPolicy(param: RestrictionPoliciesApiGetRestrictionPolicyRequest, options?: Configuration): Promise<RestrictionPolicyResponse>;
    /**
     * Updates the restriction policy associated with a resource.
     *
     * #### Supported resources
     * Restriction policies can be applied to the following resources:
     * - Connections: `connection`
     * - Dashboards: `dashboard`
     * - Notebooks: `notebook`
     * - Security Rules: `security-rule`
     * - Service Level Objectives: `slo`
     * @param param The request object
     */
    updateRestrictionPolicy(param: RestrictionPoliciesApiUpdateRestrictionPolicyRequest, options?: Configuration): Promise<RestrictionPolicyResponse>;
}
