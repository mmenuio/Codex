import {
  require_scheduledMessage_pb
} from "./chunk-UVN5TMM7.js";
import "./chunk-HYREUILP.js";
import "./chunk-77D5Q77K.js";
import "./chunk-KDIMKIIQ.js";
import "./chunk-ANXG7VLJ.js";
import {
  require_grpc_web
} from "./chunk-QG4XEIKX.js";
import "./chunk-SZ7F7SCX.js";
import "./chunk-RB4XWN7V.js";
import {
  __publicField,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/grpc-web-client-gen/ScheduledMessageServiceClientPb.ts
var grpcWeb = __toESM(require_grpc_web());
var scheduledMessage_pb = __toESM(require_scheduledMessage_pb());
var ScheduledMessageRoutesClient = class {
  constructor(hostname, credentials, options) {
    __publicField(this, "client_");
    __publicField(this, "hostname_");
    __publicField(this, "credentials_");
    __publicField(this, "options_");
    __publicField(this, "methodDescriptorcreateScheduledMessage", new grpcWeb.MethodDescriptor(
      "/scheduledMessage.ScheduledMessageRoutes/createScheduledMessage",
      grpcWeb.MethodType.UNARY,
      scheduledMessage_pb.CreateScheduledMessageRequest,
      scheduledMessage_pb.CreateScheduledMessageResponse,
      (request) => {
        return request.serializeBinary();
      },
      scheduledMessage_pb.CreateScheduledMessageResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorgetAllScheduledMessages", new grpcWeb.MethodDescriptor(
      "/scheduledMessage.ScheduledMessageRoutes/getAllScheduledMessages",
      grpcWeb.MethodType.UNARY,
      scheduledMessage_pb.GetAllScheduledMessagesRequest,
      scheduledMessage_pb.GetAllScheduledMessagesResponse,
      (request) => {
        return request.serializeBinary();
      },
      scheduledMessage_pb.GetAllScheduledMessagesResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorgetScheduledMessage", new grpcWeb.MethodDescriptor(
      "/scheduledMessage.ScheduledMessageRoutes/getScheduledMessage",
      grpcWeb.MethodType.UNARY,
      scheduledMessage_pb.GetScheduledMessageRequest,
      scheduledMessage_pb.GetScheduledMessageResponse,
      (request) => {
        return request.serializeBinary();
      },
      scheduledMessage_pb.GetScheduledMessageResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptordeleteScheduledMessage", new grpcWeb.MethodDescriptor(
      "/scheduledMessage.ScheduledMessageRoutes/deleteScheduledMessage",
      grpcWeb.MethodType.UNARY,
      scheduledMessage_pb.DeleteScheduledMessageRequest,
      scheduledMessage_pb.DeleteScheduledMessageResponse,
      (request) => {
        return request.serializeBinary();
      },
      scheduledMessage_pb.DeleteScheduledMessageResponse.deserializeBinary
    ));
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";
    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }
  createScheduledMessage(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/scheduledMessage.ScheduledMessageRoutes/createScheduledMessage",
        request,
        metadata || {},
        this.methodDescriptorcreateScheduledMessage,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/scheduledMessage.ScheduledMessageRoutes/createScheduledMessage",
      request,
      metadata || {},
      this.methodDescriptorcreateScheduledMessage
    );
  }
  getAllScheduledMessages(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/scheduledMessage.ScheduledMessageRoutes/getAllScheduledMessages",
        request,
        metadata || {},
        this.methodDescriptorgetAllScheduledMessages,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/scheduledMessage.ScheduledMessageRoutes/getAllScheduledMessages",
      request,
      metadata || {},
      this.methodDescriptorgetAllScheduledMessages
    );
  }
  getScheduledMessage(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/scheduledMessage.ScheduledMessageRoutes/getScheduledMessage",
        request,
        metadata || {},
        this.methodDescriptorgetScheduledMessage,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/scheduledMessage.ScheduledMessageRoutes/getScheduledMessage",
      request,
      metadata || {},
      this.methodDescriptorgetScheduledMessage
    );
  }
  deleteScheduledMessage(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/scheduledMessage.ScheduledMessageRoutes/deleteScheduledMessage",
        request,
        metadata || {},
        this.methodDescriptordeleteScheduledMessage,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/scheduledMessage.ScheduledMessageRoutes/deleteScheduledMessage",
      request,
      metadata || {},
      this.methodDescriptordeleteScheduledMessage
    );
  }
};
export {
  ScheduledMessageRoutesClient
};
//# sourceMappingURL=grpc-web-client-gen_ScheduledMessageServiceClientPb.js.map
