import {
  require_auth_pb
} from "./chunk-HIFOZPE6.js";
import {
  require_grpc_web
} from "./chunk-QG4XEIKX.js";
import "./chunk-RB4XWN7V.js";
import {
  __publicField,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/grpc-web-client-gen/AuthServiceClientPb.ts
var grpcWeb = __toESM(require_grpc_web());
var auth_pb = __toESM(require_auth_pb());
var AuthRoutesClient = class {
  constructor(hostname, credentials, options) {
    __publicField(this, "client_");
    __publicField(this, "hostname_");
    __publicField(this, "credentials_");
    __publicField(this, "options_");
    __publicField(this, "methodDescriptorregister", new grpcWeb.MethodDescriptor(
      "/auth.AuthRoutes/register",
      grpcWeb.MethodType.UNARY,
      auth_pb.RegisterRequest,
      auth_pb.RegisterResponse,
      (request) => {
        return request.serializeBinary();
      },
      auth_pb.RegisterResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorlogin", new grpcWeb.MethodDescriptor(
      "/auth.AuthRoutes/login",
      grpcWeb.MethodType.UNARY,
      auth_pb.LoginRequest,
      auth_pb.LoginResponse,
      (request) => {
        return request.serializeBinary();
      },
      auth_pb.LoginResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorchangePassword", new grpcWeb.MethodDescriptor(
      "/auth.AuthRoutes/changePassword",
      grpcWeb.MethodType.UNARY,
      auth_pb.ChangePasswordRequest,
      auth_pb.ChangePasswordResponse,
      (request) => {
        return request.serializeBinary();
      },
      auth_pb.ChangePasswordResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorlogout", new grpcWeb.MethodDescriptor(
      "/auth.AuthRoutes/logout",
      grpcWeb.MethodType.UNARY,
      auth_pb.LogoutRequest,
      auth_pb.LogoutResponse,
      (request) => {
        return request.serializeBinary();
      },
      auth_pb.LogoutResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorloginWithToken", new grpcWeb.MethodDescriptor(
      "/auth.AuthRoutes/loginWithToken",
      grpcWeb.MethodType.UNARY,
      auth_pb.LoginWithTokenRequest,
      auth_pb.LoginResponse,
      (request) => {
        return request.serializeBinary();
      },
      auth_pb.LoginResponse.deserializeBinary
    ));
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";
    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }
  register(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/auth.AuthRoutes/register",
        request,
        metadata || {},
        this.methodDescriptorregister,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/auth.AuthRoutes/register",
      request,
      metadata || {},
      this.methodDescriptorregister
    );
  }
  login(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/auth.AuthRoutes/login",
        request,
        metadata || {},
        this.methodDescriptorlogin,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/auth.AuthRoutes/login",
      request,
      metadata || {},
      this.methodDescriptorlogin
    );
  }
  changePassword(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/auth.AuthRoutes/changePassword",
        request,
        metadata || {},
        this.methodDescriptorchangePassword,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/auth.AuthRoutes/changePassword",
      request,
      metadata || {},
      this.methodDescriptorchangePassword
    );
  }
  logout(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/auth.AuthRoutes/logout",
        request,
        metadata || {},
        this.methodDescriptorlogout,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/auth.AuthRoutes/logout",
      request,
      metadata || {},
      this.methodDescriptorlogout
    );
  }
  loginWithToken(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/auth.AuthRoutes/loginWithToken",
        request,
        metadata || {},
        this.methodDescriptorloginWithToken,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/auth.AuthRoutes/loginWithToken",
      request,
      metadata || {},
      this.methodDescriptorloginWithToken
    );
  }
};
export {
  AuthRoutesClient
};
//# sourceMappingURL=grpc-web-client-gen_AuthServiceClientPb.js.map
