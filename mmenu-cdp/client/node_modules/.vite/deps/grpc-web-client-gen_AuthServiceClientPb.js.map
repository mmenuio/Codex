{
  "version": 3,
  "sources": ["../../grpc-web-client-gen/AuthServiceClientPb.ts"],
  "sourcesContent": ["/**\n * @fileoverview gRPC-Web generated client stub for auth\n * @enhanceable\n * @public\n */\n\n// Code generated by protoc-gen-grpc-web. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-grpc-web v1.5.0\n// \tprotoc              v3.19.1\n// source: auth.proto\n\n\n/* eslint-disable */\n// @ts-nocheck\n\n\nimport * as grpcWeb from 'grpc-web';\n\nimport * as auth_pb from './auth_pb'; // proto import: \"auth.proto\"\n\n\nexport class AuthRoutesClient {\n  client_: grpcWeb.AbstractClientBase;\n  hostname_: string;\n  credentials_: null | { [index: string]: string; };\n  options_: null | { [index: string]: any; };\n\n  constructor (hostname: string,\n               credentials?: null | { [index: string]: string; },\n               options?: null | { [index: string]: any; }) {\n    if (!options) options = {};\n    if (!credentials) credentials = {};\n    options['format'] = 'text';\n\n    this.client_ = new grpcWeb.GrpcWebClientBase(options);\n    this.hostname_ = hostname.replace(/\\/+$/, '');\n    this.credentials_ = credentials;\n    this.options_ = options;\n  }\n\n  methodDescriptorregister = new grpcWeb.MethodDescriptor(\n    '/auth.AuthRoutes/register',\n    grpcWeb.MethodType.UNARY,\n    auth_pb.RegisterRequest,\n    auth_pb.RegisterResponse,\n    (request: auth_pb.RegisterRequest) => {\n      return request.serializeBinary();\n    },\n    auth_pb.RegisterResponse.deserializeBinary\n  );\n\n  register(\n    request: auth_pb.RegisterRequest,\n    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.RegisterResponse>;\n\n  register(\n    request: auth_pb.RegisterRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.RpcError,\n               response: auth_pb.RegisterResponse) => void): grpcWeb.ClientReadableStream<auth_pb.RegisterResponse>;\n\n  register(\n    request: auth_pb.RegisterRequest,\n    metadata?: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.RpcError,\n               response: auth_pb.RegisterResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/auth.AuthRoutes/register',\n        request,\n        metadata || {},\n        this.methodDescriptorregister,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/auth.AuthRoutes/register',\n    request,\n    metadata || {},\n    this.methodDescriptorregister);\n  }\n\n  methodDescriptorlogin = new grpcWeb.MethodDescriptor(\n    '/auth.AuthRoutes/login',\n    grpcWeb.MethodType.UNARY,\n    auth_pb.LoginRequest,\n    auth_pb.LoginResponse,\n    (request: auth_pb.LoginRequest) => {\n      return request.serializeBinary();\n    },\n    auth_pb.LoginResponse.deserializeBinary\n  );\n\n  login(\n    request: auth_pb.LoginRequest,\n    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LoginResponse>;\n\n  login(\n    request: auth_pb.LoginRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.RpcError,\n               response: auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LoginResponse>;\n\n  login(\n    request: auth_pb.LoginRequest,\n    metadata?: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.RpcError,\n               response: auth_pb.LoginResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/auth.AuthRoutes/login',\n        request,\n        metadata || {},\n        this.methodDescriptorlogin,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/auth.AuthRoutes/login',\n    request,\n    metadata || {},\n    this.methodDescriptorlogin);\n  }\n\n  methodDescriptorchangePassword = new grpcWeb.MethodDescriptor(\n    '/auth.AuthRoutes/changePassword',\n    grpcWeb.MethodType.UNARY,\n    auth_pb.ChangePasswordRequest,\n    auth_pb.ChangePasswordResponse,\n    (request: auth_pb.ChangePasswordRequest) => {\n      return request.serializeBinary();\n    },\n    auth_pb.ChangePasswordResponse.deserializeBinary\n  );\n\n  changePassword(\n    request: auth_pb.ChangePasswordRequest,\n    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.ChangePasswordResponse>;\n\n  changePassword(\n    request: auth_pb.ChangePasswordRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.RpcError,\n               response: auth_pb.ChangePasswordResponse) => void): grpcWeb.ClientReadableStream<auth_pb.ChangePasswordResponse>;\n\n  changePassword(\n    request: auth_pb.ChangePasswordRequest,\n    metadata?: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.RpcError,\n               response: auth_pb.ChangePasswordResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/auth.AuthRoutes/changePassword',\n        request,\n        metadata || {},\n        this.methodDescriptorchangePassword,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/auth.AuthRoutes/changePassword',\n    request,\n    metadata || {},\n    this.methodDescriptorchangePassword);\n  }\n\n  methodDescriptorlogout = new grpcWeb.MethodDescriptor(\n    '/auth.AuthRoutes/logout',\n    grpcWeb.MethodType.UNARY,\n    auth_pb.LogoutRequest,\n    auth_pb.LogoutResponse,\n    (request: auth_pb.LogoutRequest) => {\n      return request.serializeBinary();\n    },\n    auth_pb.LogoutResponse.deserializeBinary\n  );\n\n  logout(\n    request: auth_pb.LogoutRequest,\n    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LogoutResponse>;\n\n  logout(\n    request: auth_pb.LogoutRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.RpcError,\n               response: auth_pb.LogoutResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LogoutResponse>;\n\n  logout(\n    request: auth_pb.LogoutRequest,\n    metadata?: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.RpcError,\n               response: auth_pb.LogoutResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/auth.AuthRoutes/logout',\n        request,\n        metadata || {},\n        this.methodDescriptorlogout,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/auth.AuthRoutes/logout',\n    request,\n    metadata || {},\n    this.methodDescriptorlogout);\n  }\n\n  methodDescriptorloginWithToken = new grpcWeb.MethodDescriptor(\n    '/auth.AuthRoutes/loginWithToken',\n    grpcWeb.MethodType.UNARY,\n    auth_pb.LoginWithTokenRequest,\n    auth_pb.LoginResponse,\n    (request: auth_pb.LoginWithTokenRequest) => {\n      return request.serializeBinary();\n    },\n    auth_pb.LoginResponse.deserializeBinary\n  );\n\n  loginWithToken(\n    request: auth_pb.LoginWithTokenRequest,\n    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LoginResponse>;\n\n  loginWithToken(\n    request: auth_pb.LoginWithTokenRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.RpcError,\n               response: auth_pb.LoginResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LoginResponse>;\n\n  loginWithToken(\n    request: auth_pb.LoginWithTokenRequest,\n    metadata?: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.RpcError,\n               response: auth_pb.LoginResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/auth.AuthRoutes/loginWithToken',\n        request,\n        metadata || {},\n        this.methodDescriptorloginWithToken,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/auth.AuthRoutes/loginWithToken',\n    request,\n    metadata || {},\n    this.methodDescriptorloginWithToken);\n  }\n\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;AAiBA,cAAyB;AAEzB,cAAyB;AAGlB,IAAM,mBAAN,MAAuB;AAAA,EAM5B,YAAa,UACA,aACA,SAA4C;AAPzD;AACA;AACA;AACA;AAeA,oDAA2B,IAAY;AAAA,MACrC;AAAA,MACQ,mBAAW;AAAA,MACX;AAAA,MACA;AAAA,MACR,CAAC,YAAqC;AACpC,eAAO,QAAQ,gBAAgB;AAAA,MACjC;AAAA,MACQ,yBAAiB;AAAA,IAC3B;AAkCA,iDAAwB,IAAY;AAAA,MAClC;AAAA,MACQ,mBAAW;AAAA,MACX;AAAA,MACA;AAAA,MACR,CAAC,YAAkC;AACjC,eAAO,QAAQ,gBAAgB;AAAA,MACjC;AAAA,MACQ,sBAAc;AAAA,IACxB;AAkCA,0DAAiC,IAAY;AAAA,MAC3C;AAAA,MACQ,mBAAW;AAAA,MACX;AAAA,MACA;AAAA,MACR,CAAC,YAA2C;AAC1C,eAAO,QAAQ,gBAAgB;AAAA,MACjC;AAAA,MACQ,+BAAuB;AAAA,IACjC;AAkCA,kDAAyB,IAAY;AAAA,MACnC;AAAA,MACQ,mBAAW;AAAA,MACX;AAAA,MACA;AAAA,MACR,CAAC,YAAmC;AAClC,eAAO,QAAQ,gBAAgB;AAAA,MACjC;AAAA,MACQ,uBAAe;AAAA,IACzB;AAkCA,0DAAiC,IAAY;AAAA,MAC3C;AAAA,MACQ,mBAAW;AAAA,MACX;AAAA,MACA;AAAA,MACR,CAAC,YAA2C;AAC1C,eAAO,QAAQ,gBAAgB;AAAA,MACjC;AAAA,MACQ,sBAAc;AAAA,IACxB;AA/LE,QAAI,CAAC,QAAS,WAAU,CAAC;AACzB,QAAI,CAAC,YAAa,eAAc,CAAC;AACjC,YAAQ,QAAQ,IAAI;AAEpB,SAAK,UAAU,IAAY,0BAAkB,OAAO;AACpD,SAAK,YAAY,SAAS,QAAQ,QAAQ,EAAE;AAC5C,SAAK,eAAe;AACpB,SAAK,WAAW;AAAA,EAClB;AAAA,EAuBA,SACE,SACA,UACA,UACwD;AACxD,QAAI,aAAa,QAAW;AAC1B,aAAO,KAAK,QAAQ;AAAA,QAClB,KAAK,YACH;AAAA,QACF;AAAA,QACA,YAAY,CAAC;AAAA,QACb,KAAK;AAAA,QACL;AAAA,MAAQ;AAAA,IACZ;AACA,WAAO,KAAK,QAAQ;AAAA,MACpB,KAAK,YACH;AAAA,MACF;AAAA,MACA,YAAY,CAAC;AAAA,MACb,KAAK;AAAA,IAAwB;AAAA,EAC/B;AAAA,EAuBA,MACE,SACA,UACA,UACqD;AACrD,QAAI,aAAa,QAAW;AAC1B,aAAO,KAAK,QAAQ;AAAA,QAClB,KAAK,YACH;AAAA,QACF;AAAA,QACA,YAAY,CAAC;AAAA,QACb,KAAK;AAAA,QACL;AAAA,MAAQ;AAAA,IACZ;AACA,WAAO,KAAK,QAAQ;AAAA,MACpB,KAAK,YACH;AAAA,MACF;AAAA,MACA,YAAY,CAAC;AAAA,MACb,KAAK;AAAA,IAAqB;AAAA,EAC5B;AAAA,EAuBA,eACE,SACA,UACA,UAC8D;AAC9D,QAAI,aAAa,QAAW;AAC1B,aAAO,KAAK,QAAQ;AAAA,QAClB,KAAK,YACH;AAAA,QACF;AAAA,QACA,YAAY,CAAC;AAAA,QACb,KAAK;AAAA,QACL;AAAA,MAAQ;AAAA,IACZ;AACA,WAAO,KAAK,QAAQ;AAAA,MACpB,KAAK,YACH;AAAA,MACF;AAAA,MACA,YAAY,CAAC;AAAA,MACb,KAAK;AAAA,IAA8B;AAAA,EACrC;AAAA,EAuBA,OACE,SACA,UACA,UACsD;AACtD,QAAI,aAAa,QAAW;AAC1B,aAAO,KAAK,QAAQ;AAAA,QAClB,KAAK,YACH;AAAA,QACF;AAAA,QACA,YAAY,CAAC;AAAA,QACb,KAAK;AAAA,QACL;AAAA,MAAQ;AAAA,IACZ;AACA,WAAO,KAAK,QAAQ;AAAA,MACpB,KAAK,YACH;AAAA,MACF;AAAA,MACA,YAAY,CAAC;AAAA,MACb,KAAK;AAAA,IAAsB;AAAA,EAC7B;AAAA,EAuBA,eACE,SACA,UACA,UACqD;AACrD,QAAI,aAAa,QAAW;AAC1B,aAAO,KAAK,QAAQ;AAAA,QAClB,KAAK,YACH;AAAA,QACF;AAAA,QACA,YAAY,CAAC;AAAA,QACb,KAAK;AAAA,QACL;AAAA,MAAQ;AAAA,IACZ;AACA,WAAO,KAAK,QAAQ;AAAA,MACpB,KAAK,YACH;AAAA,MACF;AAAA,MACA,YAAY,CAAC;AAAA,MACb,KAAK;AAAA,IAA8B;AAAA,EACrC;AAEF;",
  "names": []
}
