import {
  require_google_protobuf
} from "./chunk-RB4XWN7V.js";
import {
  __commonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/grpc-web-client-gen/s3_pb.js
var require_s3_pb = __commonJS({
  "node_modules/grpc-web-client-gen/s3_pb.js"(exports) {
    var jspb = require_google_protobuf();
    var goog = jspb;
    var global = (function() {
      if (this) {
        return this;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      if (typeof self !== "undefined") {
        return self;
      }
      return Function("return this")();
    }).call(null);
    goog.exportSymbol("proto.s3.Chunk", null, global);
    goog.exportSymbol("proto.s3.UploadImageResponse", null, global);
    proto.s3.Chunk = function(opt_data) {
      jspb.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog.inherits(proto.s3.Chunk, jspb.Message);
    if (goog.DEBUG && !COMPILED) {
      proto.s3.Chunk.displayName = "proto.s3.Chunk";
    }
    proto.s3.UploadImageResponse = function(opt_data) {
      jspb.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog.inherits(proto.s3.UploadImageResponse, jspb.Message);
    if (goog.DEBUG && !COMPILED) {
      proto.s3.UploadImageResponse.displayName = "proto.s3.UploadImageResponse";
    }
    if (jspb.Message.GENERATE_TO_OBJECT) {
      proto.s3.Chunk.prototype.toObject = function(opt_includeInstance) {
        return proto.s3.Chunk.toObject(opt_includeInstance, this);
      };
      proto.s3.Chunk.toObject = function(includeInstance, msg) {
        var f, obj = {
          data: msg.getData_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.s3.Chunk.deserializeBinary = function(bytes) {
      var reader = new jspb.BinaryReader(bytes);
      var msg = new proto.s3.Chunk();
      return proto.s3.Chunk.deserializeBinaryFromReader(msg, reader);
    };
    proto.s3.Chunk.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = (
              /** @type {!Uint8Array} */
              reader.readBytes()
            );
            msg.setData(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.s3.Chunk.prototype.serializeBinary = function() {
      var writer = new jspb.BinaryWriter();
      proto.s3.Chunk.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.s3.Chunk.serializeBinaryToWriter = function(message, writer) {
      var f = void 0;
      f = message.getData_asU8();
      if (f.length > 0) {
        writer.writeBytes(
          1,
          f
        );
      }
    };
    proto.s3.Chunk.prototype.getData = function() {
      return (
        /** @type {string} */
        jspb.Message.getFieldWithDefault(this, 1, "")
      );
    };
    proto.s3.Chunk.prototype.getData_asB64 = function() {
      return (
        /** @type {string} */
        jspb.Message.bytesAsB64(
          this.getData()
        )
      );
    };
    proto.s3.Chunk.prototype.getData_asU8 = function() {
      return (
        /** @type {!Uint8Array} */
        jspb.Message.bytesAsU8(
          this.getData()
        )
      );
    };
    proto.s3.Chunk.prototype.setData = function(value) {
      return jspb.Message.setProto3BytesField(this, 1, value);
    };
    if (jspb.Message.GENERATE_TO_OBJECT) {
      proto.s3.UploadImageResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.s3.UploadImageResponse.toObject(opt_includeInstance, this);
      };
      proto.s3.UploadImageResponse.toObject = function(includeInstance, msg) {
        var f, obj = {
          code: jspb.Message.getFieldWithDefault(msg, 1, 0),
          message: jspb.Message.getFieldWithDefault(msg, 2, ""),
          imageUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.s3.UploadImageResponse.deserializeBinary = function(bytes) {
      var reader = new jspb.BinaryReader(bytes);
      var msg = new proto.s3.UploadImageResponse();
      return proto.s3.UploadImageResponse.deserializeBinaryFromReader(msg, reader);
    };
    proto.s3.UploadImageResponse.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = (
              /** @type {number} */
              reader.readInt32()
            );
            msg.setCode(value);
            break;
          case 2:
            var value = (
              /** @type {string} */
              reader.readString()
            );
            msg.setMessage(value);
            break;
          case 3:
            var value = (
              /** @type {string} */
              reader.readString()
            );
            msg.setImageUrl(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.s3.UploadImageResponse.prototype.serializeBinary = function() {
      var writer = new jspb.BinaryWriter();
      proto.s3.UploadImageResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.s3.UploadImageResponse.serializeBinaryToWriter = function(message, writer) {
      var f = void 0;
      f = message.getCode();
      if (f !== 0) {
        writer.writeInt32(
          1,
          f
        );
      }
      f = message.getMessage();
      if (f.length > 0) {
        writer.writeString(
          2,
          f
        );
      }
      f = message.getImageUrl();
      if (f.length > 0) {
        writer.writeString(
          3,
          f
        );
      }
    };
    proto.s3.UploadImageResponse.prototype.getCode = function() {
      return (
        /** @type {number} */
        jspb.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    proto.s3.UploadImageResponse.prototype.setCode = function(value) {
      return jspb.Message.setProto3IntField(this, 1, value);
    };
    proto.s3.UploadImageResponse.prototype.getMessage = function() {
      return (
        /** @type {string} */
        jspb.Message.getFieldWithDefault(this, 2, "")
      );
    };
    proto.s3.UploadImageResponse.prototype.setMessage = function(value) {
      return jspb.Message.setProto3StringField(this, 2, value);
    };
    proto.s3.UploadImageResponse.prototype.getImageUrl = function() {
      return (
        /** @type {string} */
        jspb.Message.getFieldWithDefault(this, 3, "")
      );
    };
    proto.s3.UploadImageResponse.prototype.setImageUrl = function(value) {
      return jspb.Message.setProto3StringField(this, 3, value);
    };
    goog.object.extend(exports, proto.s3);
  }
});

export {
  require_s3_pb
};
//# sourceMappingURL=chunk-OQMEG23K.js.map
