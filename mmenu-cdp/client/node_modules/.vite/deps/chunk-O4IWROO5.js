import {
  require_google_protobuf
} from "./chunk-RB4XWN7V.js";
import {
  __commonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/grpc-web-client-gen/country_pb.js
var require_country_pb = __commonJS({
  "node_modules/grpc-web-client-gen/country_pb.js"(exports) {
    var jspb = require_google_protobuf();
    var goog = jspb;
    var global = (function() {
      if (this) {
        return this;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      if (typeof self !== "undefined") {
        return self;
      }
      return Function("return this")();
    }).call(null);
    goog.exportSymbol("proto.country.City", null, global);
    goog.exportSymbol("proto.country.CountryName", null, global);
    goog.exportSymbol("proto.country.District", null, global);
    goog.exportSymbol("proto.country.GetCitiesByCountryRequest", null, global);
    goog.exportSymbol("proto.country.GetCitiesByCountryResponse", null, global);
    proto.country.District = function(opt_data) {
      jspb.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog.inherits(proto.country.District, jspb.Message);
    if (goog.DEBUG && !COMPILED) {
      proto.country.District.displayName = "proto.country.District";
    }
    proto.country.City = function(opt_data) {
      jspb.Message.initialize(this, opt_data, 0, -1, proto.country.City.repeatedFields_, null);
    };
    goog.inherits(proto.country.City, jspb.Message);
    if (goog.DEBUG && !COMPILED) {
      proto.country.City.displayName = "proto.country.City";
    }
    proto.country.GetCitiesByCountryRequest = function(opt_data) {
      jspb.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog.inherits(proto.country.GetCitiesByCountryRequest, jspb.Message);
    if (goog.DEBUG && !COMPILED) {
      proto.country.GetCitiesByCountryRequest.displayName = "proto.country.GetCitiesByCountryRequest";
    }
    proto.country.GetCitiesByCountryResponse = function(opt_data) {
      jspb.Message.initialize(this, opt_data, 0, -1, proto.country.GetCitiesByCountryResponse.repeatedFields_, null);
    };
    goog.inherits(proto.country.GetCitiesByCountryResponse, jspb.Message);
    if (goog.DEBUG && !COMPILED) {
      proto.country.GetCitiesByCountryResponse.displayName = "proto.country.GetCitiesByCountryResponse";
    }
    if (jspb.Message.GENERATE_TO_OBJECT) {
      proto.country.District.prototype.toObject = function(opt_includeInstance) {
        return proto.country.District.toObject(opt_includeInstance, this);
      };
      proto.country.District.toObject = function(includeInstance, msg) {
        var f, obj = {
          districtName: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.country.District.deserializeBinary = function(bytes) {
      var reader = new jspb.BinaryReader(bytes);
      var msg = new proto.country.District();
      return proto.country.District.deserializeBinaryFromReader(msg, reader);
    };
    proto.country.District.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 2:
            var value = (
              /** @type {string} */
              reader.readString()
            );
            msg.setDistrictName(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.country.District.prototype.serializeBinary = function() {
      var writer = new jspb.BinaryWriter();
      proto.country.District.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.country.District.serializeBinaryToWriter = function(message, writer) {
      var f = void 0;
      f = message.getDistrictName();
      if (f.length > 0) {
        writer.writeString(
          2,
          f
        );
      }
    };
    proto.country.District.prototype.getDistrictName = function() {
      return (
        /** @type {string} */
        jspb.Message.getFieldWithDefault(this, 2, "")
      );
    };
    proto.country.District.prototype.setDistrictName = function(value) {
      return jspb.Message.setProto3StringField(this, 2, value);
    };
    proto.country.City.repeatedFields_ = [3];
    if (jspb.Message.GENERATE_TO_OBJECT) {
      proto.country.City.prototype.toObject = function(opt_includeInstance) {
        return proto.country.City.toObject(opt_includeInstance, this);
      };
      proto.country.City.toObject = function(includeInstance, msg) {
        var f, obj = {
          cityName: jspb.Message.getFieldWithDefault(msg, 2, ""),
          districtsList: jspb.Message.toObjectList(
            msg.getDistrictsList(),
            proto.country.District.toObject,
            includeInstance
          )
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.country.City.deserializeBinary = function(bytes) {
      var reader = new jspb.BinaryReader(bytes);
      var msg = new proto.country.City();
      return proto.country.City.deserializeBinaryFromReader(msg, reader);
    };
    proto.country.City.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 2:
            var value = (
              /** @type {string} */
              reader.readString()
            );
            msg.setCityName(value);
            break;
          case 3:
            var value = new proto.country.District();
            reader.readMessage(value, proto.country.District.deserializeBinaryFromReader);
            msg.addDistricts(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.country.City.prototype.serializeBinary = function() {
      var writer = new jspb.BinaryWriter();
      proto.country.City.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.country.City.serializeBinaryToWriter = function(message, writer) {
      var f = void 0;
      f = message.getCityName();
      if (f.length > 0) {
        writer.writeString(
          2,
          f
        );
      }
      f = message.getDistrictsList();
      if (f.length > 0) {
        writer.writeRepeatedMessage(
          3,
          f,
          proto.country.District.serializeBinaryToWriter
        );
      }
    };
    proto.country.City.prototype.getCityName = function() {
      return (
        /** @type {string} */
        jspb.Message.getFieldWithDefault(this, 2, "")
      );
    };
    proto.country.City.prototype.setCityName = function(value) {
      return jspb.Message.setProto3StringField(this, 2, value);
    };
    proto.country.City.prototype.getDistrictsList = function() {
      return (
        /** @type{!Array<!proto.country.District>} */
        jspb.Message.getRepeatedWrapperField(this, proto.country.District, 3)
      );
    };
    proto.country.City.prototype.setDistrictsList = function(value) {
      return jspb.Message.setRepeatedWrapperField(this, 3, value);
    };
    proto.country.City.prototype.addDistricts = function(opt_value, opt_index) {
      return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.country.District, opt_index);
    };
    proto.country.City.prototype.clearDistrictsList = function() {
      return this.setDistrictsList([]);
    };
    if (jspb.Message.GENERATE_TO_OBJECT) {
      proto.country.GetCitiesByCountryRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.country.GetCitiesByCountryRequest.toObject(opt_includeInstance, this);
      };
      proto.country.GetCitiesByCountryRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
          countryName: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.country.GetCitiesByCountryRequest.deserializeBinary = function(bytes) {
      var reader = new jspb.BinaryReader(bytes);
      var msg = new proto.country.GetCitiesByCountryRequest();
      return proto.country.GetCitiesByCountryRequest.deserializeBinaryFromReader(msg, reader);
    };
    proto.country.GetCitiesByCountryRequest.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = (
              /** @type {!proto.country.CountryName} */
              reader.readEnum()
            );
            msg.setCountryName(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.country.GetCitiesByCountryRequest.prototype.serializeBinary = function() {
      var writer = new jspb.BinaryWriter();
      proto.country.GetCitiesByCountryRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.country.GetCitiesByCountryRequest.serializeBinaryToWriter = function(message, writer) {
      var f = void 0;
      f = message.getCountryName();
      if (f !== 0) {
        writer.writeEnum(
          1,
          f
        );
      }
    };
    proto.country.GetCitiesByCountryRequest.prototype.getCountryName = function() {
      return (
        /** @type {!proto.country.CountryName} */
        jspb.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    proto.country.GetCitiesByCountryRequest.prototype.setCountryName = function(value) {
      return jspb.Message.setProto3EnumField(this, 1, value);
    };
    proto.country.GetCitiesByCountryResponse.repeatedFields_ = [3];
    if (jspb.Message.GENERATE_TO_OBJECT) {
      proto.country.GetCitiesByCountryResponse.prototype.toObject = function(opt_includeInstance) {
        return proto.country.GetCitiesByCountryResponse.toObject(opt_includeInstance, this);
      };
      proto.country.GetCitiesByCountryResponse.toObject = function(includeInstance, msg) {
        var f, obj = {
          code: jspb.Message.getFieldWithDefault(msg, 1, 0),
          message: jspb.Message.getFieldWithDefault(msg, 2, ""),
          citiesList: jspb.Message.toObjectList(
            msg.getCitiesList(),
            proto.country.City.toObject,
            includeInstance
          )
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.country.GetCitiesByCountryResponse.deserializeBinary = function(bytes) {
      var reader = new jspb.BinaryReader(bytes);
      var msg = new proto.country.GetCitiesByCountryResponse();
      return proto.country.GetCitiesByCountryResponse.deserializeBinaryFromReader(msg, reader);
    };
    proto.country.GetCitiesByCountryResponse.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = (
              /** @type {number} */
              reader.readInt32()
            );
            msg.setCode(value);
            break;
          case 2:
            var value = (
              /** @type {string} */
              reader.readString()
            );
            msg.setMessage(value);
            break;
          case 3:
            var value = new proto.country.City();
            reader.readMessage(value, proto.country.City.deserializeBinaryFromReader);
            msg.addCities(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.country.GetCitiesByCountryResponse.prototype.serializeBinary = function() {
      var writer = new jspb.BinaryWriter();
      proto.country.GetCitiesByCountryResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.country.GetCitiesByCountryResponse.serializeBinaryToWriter = function(message, writer) {
      var f = void 0;
      f = message.getCode();
      if (f !== 0) {
        writer.writeInt32(
          1,
          f
        );
      }
      f = message.getMessage();
      if (f.length > 0) {
        writer.writeString(
          2,
          f
        );
      }
      f = message.getCitiesList();
      if (f.length > 0) {
        writer.writeRepeatedMessage(
          3,
          f,
          proto.country.City.serializeBinaryToWriter
        );
      }
    };
    proto.country.GetCitiesByCountryResponse.prototype.getCode = function() {
      return (
        /** @type {number} */
        jspb.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    proto.country.GetCitiesByCountryResponse.prototype.setCode = function(value) {
      return jspb.Message.setProto3IntField(this, 1, value);
    };
    proto.country.GetCitiesByCountryResponse.prototype.getMessage = function() {
      return (
        /** @type {string} */
        jspb.Message.getFieldWithDefault(this, 2, "")
      );
    };
    proto.country.GetCitiesByCountryResponse.prototype.setMessage = function(value) {
      return jspb.Message.setProto3StringField(this, 2, value);
    };
    proto.country.GetCitiesByCountryResponse.prototype.getCitiesList = function() {
      return (
        /** @type{!Array<!proto.country.City>} */
        jspb.Message.getRepeatedWrapperField(this, proto.country.City, 3)
      );
    };
    proto.country.GetCitiesByCountryResponse.prototype.setCitiesList = function(value) {
      return jspb.Message.setRepeatedWrapperField(this, 3, value);
    };
    proto.country.GetCitiesByCountryResponse.prototype.addCities = function(opt_value, opt_index) {
      return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.country.City, opt_index);
    };
    proto.country.GetCitiesByCountryResponse.prototype.clearCitiesList = function() {
      return this.setCitiesList([]);
    };
    proto.country.CountryName = {
      VIETNAM: 0,
      THAILAND: 1,
      JAPAN: 2
    };
    goog.object.extend(exports, proto.country);
  }
});

export {
  require_country_pb
};
//# sourceMappingURL=chunk-O4IWROO5.js.map
