{
  "version": 3,
  "sources": ["../../material-ui-popup-state/src/index.ts", "../../material-ui-popup-state/src/hooks.ts", "../../material-ui-popup-state/src/useEvent.ts"],
  "sourcesContent": ["import PropTypes from 'prop-types'\n\nimport {\n  usePopupState,\n  anchorRef,\n  bindTrigger,\n  bindContextMenu,\n  bindToggle,\n  bindHover,\n  bindFocus,\n  bindMenu,\n  bindPopover,\n  bindPopper,\n  bindDoubleClick,\n  bindDialog,\n  type Variant,\n  type PopupState as InjectedProps,\n} from './hooks'\n\nexport {\n  anchorRef,\n  bindTrigger,\n  bindContextMenu,\n  bindToggle,\n  bindHover,\n  bindFocus,\n  bindMenu,\n  bindPopover,\n  bindPopper,\n  bindDoubleClick,\n  bindDialog,\n  type Variant,\n  type InjectedProps,\n}\n\nexport type Props = {\n  popupId?: string\n  children: (props: InjectedProps) => any\n  variant: Variant\n  parentPopupState?: InjectedProps | null\n  disableAutoFocus?: boolean | null\n}\n\nexport default function PopupState({\n  children,\n  popupId,\n  variant,\n  parentPopupState,\n  disableAutoFocus,\n}: Props): any {\n  const popupState = usePopupState({\n    popupId,\n    variant,\n    parentPopupState,\n    disableAutoFocus,\n  })\n  const result = children(popupState)\n  return result != null ? result : null\n}\n\nPopupState.propTypes = {\n  /**\n   * The render function.\n   *\n   * @param {object} props the properties injected by `PopupState`:\n   * <ul>\n   *   <li>`open(eventOrAnchorEl)`: opens the popup</li>\n   *   <li>`close()`: closes the popup</li>\n   *   <li>`toggle(eventOrAnchorEl)`: opens the popup if it is closed, or\n   *     closes the popup if it is open.\n   *   </li>\n   *   <li>`setOpen(open, [eventOrAnchorEl])`: sets whether the popup is open.\n   *     `eventOrAnchorEl` is required if `open` is truthy.\n   *   </li>\n   *   <li>`isOpen`: `true`/`false` if the popup is open/closed</li>\n   *   <li>`anchorEl`: the current anchor element (`null` the popup is closed)</li>\n   *   <li>`popupId`: the `popupId` prop you passed</li>\n   * </ul>\n   *\n   * @returns {React.Node} the content to display\n   */\n  children: PropTypes.func.isRequired,\n  /**\n   * The `id` property to use for the popup.  Will be passed to the render\n   * function as `bindPopup.id`, and also used for the `aria-controls` property\n   * passed to the trigger component via `bindTrigger`.\n   */\n  popupId: PropTypes.string,\n  /**\n   * Which type of popup you are controlling.  Use `'popover'` for `Popover`\n   * and `Menu`; use `'popper'` for `Popper`s.  Right now this only affects\n   * whether `aria-controls` or `aria-describedby` is used on the trigger\n   * component.\n   */\n  variant: PropTypes.oneOf(['popover', 'popper']).isRequired,\n  /**\n   * The popupState of the parent menu (for cascading menus)\n   */\n  parentPopupState: PropTypes.object,\n  /**\n   * Will focus the popup when it opens unless disableAutoFocus is explicitly false.\n   */\n  disableAutoFocus: PropTypes.bool,\n}\n", "/* eslint-env browser */\n\nimport {\n  type SyntheticEvent,\n  type MouseEvent,\n  type TouchEvent,\n  type FocusEvent,\n  useCallback,\n  useState,\n  useRef,\n  useEffect,\n} from 'react'\nimport * as React from 'react'\nimport { type PopoverPosition, type PopoverReference } from '@mui/material'\nimport { useEvent } from './useEvent'\n\nconst printedWarnings: Record<string, boolean> = {}\n\nfunction warn(key: string, message: string) {\n  if (printedWarnings[key]) return\n  printedWarnings[key] = true\n  console.error('[material-ui-popup-state] WARNING', message) // eslint-disable-line no-console\n}\n\nexport type Variant = 'popover' | 'popper' | 'dialog'\n\nexport type PopupState = {\n  open: (eventOrAnchorEl?: SyntheticEvent | Element | null) => void\n  close: (eventOrAnchorEl?: SyntheticEvent | Element | null) => void\n  toggle: (eventOrAnchorEl?: SyntheticEvent | Element | null) => void\n  onBlur: (event: FocusEvent) => void\n  onMouseLeave: (event: MouseEvent) => void\n  setOpen: (\n    open: boolean,\n    eventOrAnchorEl?: SyntheticEvent | Element | null\n  ) => void\n  isOpen: boolean\n  anchorEl: Element | undefined\n  anchorPosition: PopoverPosition | undefined\n  setAnchorEl: (anchorEl: Element | null | undefined) => any\n  setAnchorElUsed: boolean\n  disableAutoFocus: boolean\n  popupId: string | undefined\n  variant: Variant\n  _openEventType: string | null | undefined\n  _childPopupState: PopupState | null | undefined\n  _setChildPopupState: (popupState: PopupState | null | undefined) => void\n}\n\nexport type CoreState = {\n  isOpen: boolean\n  setAnchorElUsed: boolean\n  anchorEl: Element | undefined\n  anchorPosition: PopoverPosition | undefined\n  hovered: boolean\n  focused: boolean\n  _openEventType: string | null | undefined\n  _childPopupState: PopupState | null | undefined\n  _deferNextOpen: boolean\n  _deferNextClose: boolean\n}\n\nexport const initCoreState: CoreState = {\n  isOpen: false,\n  setAnchorElUsed: false,\n  anchorEl: undefined,\n  anchorPosition: undefined,\n  hovered: false,\n  focused: false,\n  _openEventType: null,\n  _childPopupState: null,\n  _deferNextOpen: false,\n  _deferNextClose: false,\n}\n\n// https://github.com/jcoreio/material-ui-popup-state/issues/138\n// Webpack prod build doesn't like it if we refer to React.useId conditionally,\n// but aliasing to a variable like this works\nconst _react = React\nconst defaultPopupId =\n  'useId' in _react\n    ? () => _react.useId()\n    : // istanbul ignore next\n      () => undefined\n\nexport function usePopupState({\n  parentPopupState,\n  popupId = defaultPopupId(),\n  variant,\n  disableAutoFocus,\n}: {\n  parentPopupState?: PopupState | null | undefined\n  popupId?: string | null\n  variant: Variant\n  disableAutoFocus?: boolean | null | undefined\n}): PopupState {\n  const isMounted = useRef(true)\n\n  useEffect((): (() => void) => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  const [state, _setState] = useState(initCoreState)\n\n  const setState = useCallback(\n    (state: CoreState | ((prevState: CoreState) => CoreState)) => {\n      if (isMounted.current) _setState(state)\n    },\n    []\n  )\n\n  const setAnchorEl = useCallback(\n    (anchorEl: Element | null | undefined) =>\n      setState((state) => ({\n        ...state,\n        setAnchorElUsed: true,\n        anchorEl: anchorEl ?? undefined,\n      })),\n    []\n  )\n\n  const toggle = useEvent(\n    (eventOrAnchorEl?: SyntheticEvent | Element | null) => {\n      if (state.isOpen) close(eventOrAnchorEl)\n      else open(eventOrAnchorEl)\n      return state\n    }\n  )\n\n  const open = useEvent((eventOrAnchorEl?: SyntheticEvent | Element | null) => {\n    const event =\n      eventOrAnchorEl instanceof Element ? undefined : eventOrAnchorEl\n    const element =\n      eventOrAnchorEl instanceof Element\n        ? eventOrAnchorEl\n        : eventOrAnchorEl?.currentTarget instanceof Element\n        ? eventOrAnchorEl.currentTarget\n        : undefined\n\n    if (event?.type === 'touchstart') {\n      setState((state) => ({ ...state, _deferNextOpen: true }))\n      return\n    }\n\n    const clientX = (event as MouseEvent | undefined)?.clientX\n    const clientY = (event as MouseEvent | undefined)?.clientY\n    const anchorPosition =\n      typeof clientX === 'number' && typeof clientY === 'number'\n        ? { left: clientX, top: clientY }\n        : undefined\n\n    const doOpen = (state: CoreState): CoreState => {\n      if (!eventOrAnchorEl && !state.setAnchorElUsed && variant !== 'dialog') {\n        warn(\n          'missingEventOrAnchorEl',\n          'eventOrAnchorEl should be defined if setAnchorEl is not used'\n        )\n      }\n\n      if (parentPopupState) {\n        if (!parentPopupState.isOpen) return state\n        setTimeout(() => parentPopupState._setChildPopupState(popupState))\n      }\n\n      const newState: CoreState = {\n        ...state,\n        isOpen: true,\n        anchorPosition,\n        hovered: event?.type === 'mouseover' || state.hovered,\n        focused: event?.type === 'focus' || state.focused,\n        _openEventType: event?.type,\n      }\n\n      if (!state.setAnchorElUsed) {\n        if (event?.currentTarget) {\n          newState.anchorEl = event?.currentTarget as any\n        } else if (element) {\n          newState.anchorEl = element\n        }\n      }\n\n      return newState\n    }\n\n    setState((state: CoreState): CoreState => {\n      if (state._deferNextOpen) {\n        setTimeout(() => setState(doOpen), 0)\n        return { ...state, _deferNextOpen: false }\n      } else {\n        return doOpen(state)\n      }\n    })\n  })\n\n  const doClose = (state: CoreState): CoreState => {\n    const { _childPopupState } = state\n    setTimeout(() => {\n      _childPopupState?.close()\n      parentPopupState?._setChildPopupState(null)\n    })\n    return { ...state, isOpen: false, hovered: false, focused: false }\n  }\n\n  const close = useEvent(\n    (eventOrAnchorEl?: SyntheticEvent | Element | null) => {\n      const event =\n        eventOrAnchorEl instanceof Element ? undefined : eventOrAnchorEl\n\n      if (event?.type === 'touchstart') {\n        setState((state) => ({ ...state, _deferNextClose: true }))\n        return\n      }\n\n      setState((state: CoreState): CoreState => {\n        if (state._deferNextClose) {\n          setTimeout(() => setState(doClose), 0)\n          return { ...state, _deferNextClose: false }\n        } else {\n          return doClose(state)\n        }\n      })\n    }\n  )\n\n  const setOpen = useCallback(\n    (\n      nextOpen: boolean,\n      eventOrAnchorEl?: SyntheticEvent<any> | Element | null\n    ) => {\n      if (nextOpen) {\n        open(eventOrAnchorEl)\n      } else {\n        close(eventOrAnchorEl)\n      }\n    },\n    []\n  )\n\n  const onMouseLeave = useEvent((event: MouseEvent) => {\n    const { relatedTarget } = event\n    setState((state: CoreState): CoreState => {\n      if (\n        state.hovered &&\n        !(\n          relatedTarget instanceof Element &&\n          isElementInPopup(relatedTarget, popupState)\n        )\n      ) {\n        if (state.focused) {\n          return { ...state, hovered: false }\n        } else {\n          return doClose(state)\n        }\n      }\n      return state\n    })\n  })\n\n  const onBlur = useEvent((event: FocusEvent) => {\n    if (!event) return\n    const { relatedTarget } = event\n    setState((state: CoreState): CoreState => {\n      if (\n        state.focused &&\n        !(\n          relatedTarget instanceof Element &&\n          isElementInPopup(relatedTarget, popupState)\n        )\n      ) {\n        if (state.hovered) {\n          return { ...state, focused: false }\n        } else {\n          return doClose(state)\n        }\n      }\n      return state\n    })\n  })\n\n  const _setChildPopupState = useCallback(\n    (_childPopupState: PopupState | null | undefined) =>\n      setState((state) => ({ ...state, _childPopupState })),\n    []\n  )\n\n  const popupState: PopupState = {\n    ...state,\n    setAnchorEl,\n    popupId: popupId ?? undefined,\n    variant,\n    open,\n    close,\n    toggle,\n    setOpen,\n    onBlur,\n    onMouseLeave,\n    disableAutoFocus:\n      disableAutoFocus ?? Boolean(state.hovered || state.focused),\n    _setChildPopupState,\n  }\n\n  return popupState\n}\n\n/**\n * Creates a ref that sets the anchorEl for the popup.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function anchorRef({\n  setAnchorEl,\n}: PopupState): (el: Element | null | null | undefined) => any {\n  return setAnchorEl\n}\n\ntype ControlAriaProps = {\n  'aria-controls'?: string\n  'aria-describedby'?: string\n  'aria-haspopup'?: true\n}\n\nfunction controlAriaProps({\n  isOpen,\n  popupId,\n  variant,\n}: PopupState): ControlAriaProps {\n  return {\n    ...(variant === 'popover'\n      ? {\n          'aria-haspopup': true,\n          'aria-controls': isOpen ? popupId : undefined,\n        }\n      : variant === 'popper'\n      ? { 'aria-describedby': isOpen ? popupId : undefined }\n      : undefined),\n  }\n}\n\n/**\n * Creates props for a component that opens the popup when clicked.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindTrigger(popupState: PopupState): ControlAriaProps & {\n  onClick: (event: MouseEvent) => void\n  onTouchStart: (event: TouchEvent) => void\n} {\n  return {\n    ...controlAriaProps(popupState),\n    onClick: popupState.open,\n    onTouchStart: popupState.open,\n  }\n}\n\n/**\n * Creates props for a component that opens the popup on its contextmenu event (right click).\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindContextMenu(popupState: PopupState): ControlAriaProps & {\n  onContextMenu: (event: MouseEvent) => void\n} {\n  return {\n    ...controlAriaProps(popupState),\n    onContextMenu: (e: MouseEvent) => {\n      e.preventDefault()\n      popupState.open(e)\n    },\n  }\n}\n\n/**\n * Creates props for a component that toggles the popup when clicked.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindToggle(popupState: PopupState): ControlAriaProps & {\n  onClick: (event: MouseEvent) => void\n  onTouchStart: (event: TouchEvent) => void\n} {\n  return {\n    ...controlAriaProps(popupState),\n    onClick: popupState.toggle,\n    onTouchStart: popupState.toggle,\n  }\n}\n\n/**\n * Creates props for a component that opens the popup while hovered.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindHover(popupState: PopupState): ControlAriaProps & {\n  onTouchStart: (event: TouchEvent) => any\n  onMouseOver: (event: MouseEvent) => any\n  onMouseLeave: (event: MouseEvent) => any\n} {\n  const { open, onMouseLeave } = popupState\n  return {\n    ...controlAriaProps(popupState),\n    onTouchStart: open,\n    onMouseOver: open,\n    onMouseLeave,\n  }\n}\n\n/**\n * Creates props for a component that opens the popup while focused.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindFocus(popupState: PopupState): ControlAriaProps & {\n  onFocus: (event: FocusEvent) => any\n  onBlur: (event: FocusEvent) => any\n} {\n  const { open, onBlur } = popupState\n  return {\n    ...controlAriaProps(popupState),\n    onFocus: open,\n    onBlur,\n  }\n}\n\n/**\n * Creates props for a component that opens the popup while double click.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindDoubleClick({\n  isOpen,\n  open,\n  popupId,\n  variant,\n}: PopupState): {\n  'aria-controls'?: string\n  'aria-describedby'?: string\n  'aria-haspopup'?: true\n  onDoubleClick: (event: MouseEvent) => any\n} {\n  return {\n    // $FlowFixMe\n    [variant === 'popover' ? 'aria-controls' : 'aria-describedby']: isOpen\n      ? popupId\n      : null,\n    'aria-haspopup': variant === 'popover' ? true : undefined,\n    onDoubleClick: open,\n  }\n}\n\n/**\n * Creates props for a `Popover` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindPopover({\n  isOpen,\n  anchorEl,\n  anchorPosition,\n  close,\n  popupId,\n  onMouseLeave,\n  disableAutoFocus,\n  _openEventType,\n}: PopupState): {\n  id?: string\n  anchorEl?: Element | null\n  anchorPosition?: PopoverPosition\n  anchorReference: PopoverReference\n  open: boolean\n  onClose: () => void\n  onMouseLeave: (event: MouseEvent) => void\n  disableAutoFocus?: boolean\n  disableEnforceFocus?: boolean\n  disableRestoreFocus?: boolean\n} {\n  const usePopoverPosition = _openEventType === 'contextmenu'\n  return {\n    id: popupId,\n    anchorEl,\n    anchorPosition,\n    anchorReference: usePopoverPosition ? 'anchorPosition' : 'anchorEl',\n    open: isOpen,\n    onClose: close,\n    onMouseLeave,\n    ...(disableAutoFocus && {\n      disableAutoFocus: true,\n      disableEnforceFocus: true,\n      disableRestoreFocus: true,\n    }),\n  }\n}\n\n/**\n * Creates props for a `Menu` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\n/**\n * Creates props for a `Popover` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindMenu({\n  isOpen,\n  anchorEl,\n  anchorPosition,\n  close,\n  popupId,\n  onMouseLeave,\n  disableAutoFocus,\n  _openEventType,\n}: PopupState): {\n  id?: string\n  anchorEl?: Element | null\n  anchorPosition?: PopoverPosition\n  anchorReference: PopoverReference\n  open: boolean\n  onClose: () => void\n  onMouseLeave: (event: MouseEvent) => void\n  autoFocus?: boolean\n  disableAutoFocusItem?: boolean\n  disableAutoFocus?: boolean\n  disableEnforceFocus?: boolean\n  disableRestoreFocus?: boolean\n} {\n  const usePopoverPosition = _openEventType === 'contextmenu'\n  return {\n    id: popupId,\n    anchorEl,\n    anchorPosition,\n    anchorReference: usePopoverPosition ? 'anchorPosition' : 'anchorEl',\n    open: isOpen,\n    onClose: close,\n    onMouseLeave,\n    ...(disableAutoFocus && {\n      autoFocus: false,\n      disableAutoFocusItem: true,\n      disableAutoFocus: true,\n      disableEnforceFocus: true,\n      disableRestoreFocus: true,\n    }),\n  }\n}\n/**\n * Creates props for a `Popper` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindPopper({\n  isOpen,\n  anchorEl,\n  popupId,\n  onMouseLeave,\n}: PopupState): {\n  id?: string\n  anchorEl?: Element | null\n  open: boolean\n  onMouseLeave: (event: MouseEvent) => void\n} {\n  return {\n    id: popupId,\n    anchorEl,\n    open: isOpen,\n    onMouseLeave,\n  }\n}\n\n/**\n * Creates props for a `Dialog` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\nexport function bindDialog({ isOpen, close }: PopupState): {\n  open: boolean\n  onClose: (event: SyntheticEvent) => any\n} {\n  return {\n    open: isOpen,\n    onClose: close,\n  }\n}\n\nfunction getPopup(\n  element: Element,\n  { popupId }: PopupState\n): Element | null | undefined {\n  if (!popupId) return null\n  const rootNode: any =\n    typeof element.getRootNode === 'function' ? element.getRootNode() : document\n  if (typeof rootNode.getElementById === 'function') {\n    return rootNode.getElementById(popupId)\n  }\n  return null\n}\n\nfunction isElementInPopup(element: Element, popupState: PopupState): boolean {\n  const { anchorEl, _childPopupState } = popupState\n  return (\n    isAncestor(anchorEl, element) ||\n    isAncestor(getPopup(element, popupState), element) ||\n    (_childPopupState != null && isElementInPopup(element, _childPopupState))\n  )\n}\n\nfunction isAncestor(\n  parent: Element | null | undefined,\n  child: Element | null | undefined\n): boolean {\n  if (!parent) return false\n  while (child) {\n    if (child === parent) return true\n    child = child.parentElement\n  }\n  return false\n}\n", "import * as React from 'react'\n\nexport function useEvent<Fn extends (...args: any[]) => any>(handler: Fn): Fn {\n  // istanbul ignore next\n  if (typeof window === 'undefined') {\n    // useLayoutEffect doesn't work on the server side, don't bother\n    // trying to make callback functions stable\n    return handler\n  }\n\n  const handlerRef = React.useRef<Fn | null>(null)\n\n  React.useLayoutEffect(() => {\n    handlerRef.current = handler\n  })\n\n  return React.useCallback((...args: any[]): any => {\n    handlerRef.current?.(...args)\n  }, []) as Fn\n}\n"],
  "mappings": "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",
  "names": ["React", "useEvent", "handler", "window", "handlerRef", "useRef", "React", "useLayoutEffect", "current", "useCallback", "args", "_handlerRef$current", "call", "printedWarnings", "warn", "key", "message", "console", "error", "initCoreState", "isOpen", "setAnchorElUsed", "anchorEl", "undefined", "anchorPosition", "hovered", "focused", "_openEventType", "_childPopupState", "_deferNextOpen", "_deferNextClose", "_react", "React", "defaultPopupId", "useId", "usePopupState", "parentPopupState", "popupId", "variant", "disableAutoFocus", "isMounted", "useRef", "useEffect", "current", "state", "_setState", "useState", "setState", "useCallback", "setAnchorEl", "toggle", "useEvent", "eventOrAnchorEl", "close", "open", "event", "Element", "element", "currentTarget", "type", "clientX", "clientY", "left", "top", "doOpen", "setTimeout", "_setChildPopupState", "popupState", "newState", "doClose", "setOpen", "nextOpen", "onMouseLeave", "relatedTarget", "isElementInPopup", "onBlur", "Boolean", "anchorRef", "controlAriaProps", "bindTrigger", "onClick", "onTouchStart", "bindContextMenu", "onContextMenu", "e", "preventDefault", "bindToggle", "bindHover", "onMouseOver", "bindFocus", "onFocus", "bindDoubleClick", "onDoubleClick", "bindPopover", "usePopoverPosition", "id", "anchorReference", "onClose", "disableEnforceFocus", "disableRestoreFocus", "bindMenu", "autoFocus", "disableAutoFocusItem", "bindPopper", "bindDialog", "getPopup", "rootNode", "getRootNode", "document", "getElementById", "isAncestor", "parent", "child", "parentElement", "children", "popupId", "variant", "parentPopupState", "disableAutoFocus", "popupState", "usePopupState", "result", "PopupState", "propTypes", "PropTypes", "func", "isRequired", "string", "oneOf", "object", "bool"]
}
