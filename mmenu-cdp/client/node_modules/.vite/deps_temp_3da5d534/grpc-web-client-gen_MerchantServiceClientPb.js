import {
  require_grpc_web
} from "./chunk-QG4XEIKX.js";
import {
  require_merchant_pb
} from "./chunk-ANXG7VLJ.js";
import "./chunk-SZ7F7SCX.js";
import "./chunk-RB4XWN7V.js";
import {
  __publicField,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/grpc-web-client-gen/MerchantServiceClientPb.ts
var grpcWeb = __toESM(require_grpc_web());
var merchant_pb = __toESM(require_merchant_pb());
var MerchantRoutesClient = class {
  constructor(hostname, credentials, options) {
    __publicField(this, "client_");
    __publicField(this, "hostname_");
    __publicField(this, "credentials_");
    __publicField(this, "options_");
    __publicField(this, "methodDescriptorcreateOrUpdateMerchant", new grpcWeb.MethodDescriptor(
      "/merchant.MerchantRoutes/createOrUpdateMerchant",
      grpcWeb.MethodType.UNARY,
      merchant_pb.CreateOrUpdateMerchantRequest,
      merchant_pb.CreateOrUpdateMerchantResponse,
      (request) => {
        return request.serializeBinary();
      },
      merchant_pb.CreateOrUpdateMerchantResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorgetMerchantById", new grpcWeb.MethodDescriptor(
      "/merchant.MerchantRoutes/getMerchantById",
      grpcWeb.MethodType.UNARY,
      merchant_pb.GetMerchantByIdRequest,
      merchant_pb.GetMerchantByIdResponse,
      (request) => {
        return request.serializeBinary();
      },
      merchant_pb.GetMerchantByIdResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorgetMerchantsByBrandId", new grpcWeb.MethodDescriptor(
      "/merchant.MerchantRoutes/getMerchantsByBrandId",
      grpcWeb.MethodType.UNARY,
      merchant_pb.GetMerchantsByBrandIdRequest,
      merchant_pb.GetMerchantsByBrandIdResponse,
      (request) => {
        return request.serializeBinary();
      },
      merchant_pb.GetMerchantsByBrandIdResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptordeleteMerchantById", new grpcWeb.MethodDescriptor(
      "/merchant.MerchantRoutes/deleteMerchantById",
      grpcWeb.MethodType.UNARY,
      merchant_pb.DeleteMerchantByIdRequest,
      merchant_pb.DeleteMerchantByIdResponse,
      (request) => {
        return request.serializeBinary();
      },
      merchant_pb.DeleteMerchantByIdResponse.deserializeBinary
    ));
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";
    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }
  createOrUpdateMerchant(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/merchant.MerchantRoutes/createOrUpdateMerchant",
        request,
        metadata || {},
        this.methodDescriptorcreateOrUpdateMerchant,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/merchant.MerchantRoutes/createOrUpdateMerchant",
      request,
      metadata || {},
      this.methodDescriptorcreateOrUpdateMerchant
    );
  }
  getMerchantById(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/merchant.MerchantRoutes/getMerchantById",
        request,
        metadata || {},
        this.methodDescriptorgetMerchantById,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/merchant.MerchantRoutes/getMerchantById",
      request,
      metadata || {},
      this.methodDescriptorgetMerchantById
    );
  }
  getMerchantsByBrandId(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/merchant.MerchantRoutes/getMerchantsByBrandId",
        request,
        metadata || {},
        this.methodDescriptorgetMerchantsByBrandId,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/merchant.MerchantRoutes/getMerchantsByBrandId",
      request,
      metadata || {},
      this.methodDescriptorgetMerchantsByBrandId
    );
  }
  deleteMerchantById(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/merchant.MerchantRoutes/deleteMerchantById",
        request,
        metadata || {},
        this.methodDescriptordeleteMerchantById,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/merchant.MerchantRoutes/deleteMerchantById",
      request,
      metadata || {},
      this.methodDescriptordeleteMerchantById
    );
  }
};
export {
  MerchantRoutesClient
};
//# sourceMappingURL=grpc-web-client-gen_MerchantServiceClientPb.js.map
