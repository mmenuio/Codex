import {
  require_syncDish_pb
} from "./chunk-Z4DUW7BY.js";
import "./chunk-7WLKLX2H.js";
import {
  require_grpc_web
} from "./chunk-QG4XEIKX.js";
import "./chunk-ANXG7VLJ.js";
import "./chunk-SZ7F7SCX.js";
import "./chunk-RB4XWN7V.js";
import {
  __publicField,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/grpc-web-client-gen/SyncDishServiceClientPb.ts
var grpcWeb = __toESM(require_grpc_web());
var syncDish_pb = __toESM(require_syncDish_pb());
var SyncDishRoutesClient = class {
  constructor(hostname, credentials, options) {
    __publicField(this, "client_");
    __publicField(this, "hostname_");
    __publicField(this, "credentials_");
    __publicField(this, "options_");
    __publicField(this, "methodDescriptorgetSyncDishes", new grpcWeb.MethodDescriptor(
      "/syncDish.SyncDishRoutes/getSyncDishes",
      grpcWeb.MethodType.UNARY,
      syncDish_pb.GetSyncDishesRequest,
      syncDish_pb.GetSyncDishesResponse,
      (request) => {
        return request.serializeBinary();
      },
      syncDish_pb.GetSyncDishesResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorgetSyncDishCategories", new grpcWeb.MethodDescriptor(
      "/syncDish.SyncDishRoutes/getSyncDishCategories",
      grpcWeb.MethodType.UNARY,
      syncDish_pb.GetSyncDishCategoriesRequest,
      syncDish_pb.GetSyncDishCategoriesResponse,
      (request) => {
        return request.serializeBinary();
      },
      syncDish_pb.GetSyncDishCategoriesResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorcheckSyncDishes", new grpcWeb.MethodDescriptor(
      "/syncDish.SyncDishRoutes/checkSyncDishes",
      grpcWeb.MethodType.UNARY,
      syncDish_pb.CheckSyncDishesRequest,
      syncDish_pb.CheckSyncDishesResponse,
      (request) => {
        return request.serializeBinary();
      },
      syncDish_pb.CheckSyncDishesResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorconfirmSyncDishes", new grpcWeb.MethodDescriptor(
      "/syncDish.SyncDishRoutes/confirmSyncDishes",
      grpcWeb.MethodType.UNARY,
      syncDish_pb.ConfirmSyncDishesRequest,
      syncDish_pb.ConfirmSyncDishesResponse,
      (request) => {
        return request.serializeBinary();
      },
      syncDish_pb.ConfirmSyncDishesResponse.deserializeBinary
    ));
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";
    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }
  getSyncDishes(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/syncDish.SyncDishRoutes/getSyncDishes",
        request,
        metadata || {},
        this.methodDescriptorgetSyncDishes,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/syncDish.SyncDishRoutes/getSyncDishes",
      request,
      metadata || {},
      this.methodDescriptorgetSyncDishes
    );
  }
  getSyncDishCategories(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/syncDish.SyncDishRoutes/getSyncDishCategories",
        request,
        metadata || {},
        this.methodDescriptorgetSyncDishCategories,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/syncDish.SyncDishRoutes/getSyncDishCategories",
      request,
      metadata || {},
      this.methodDescriptorgetSyncDishCategories
    );
  }
  checkSyncDishes(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/syncDish.SyncDishRoutes/checkSyncDishes",
        request,
        metadata || {},
        this.methodDescriptorcheckSyncDishes,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/syncDish.SyncDishRoutes/checkSyncDishes",
      request,
      metadata || {},
      this.methodDescriptorcheckSyncDishes
    );
  }
  confirmSyncDishes(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/syncDish.SyncDishRoutes/confirmSyncDishes",
        request,
        metadata || {},
        this.methodDescriptorconfirmSyncDishes,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/syncDish.SyncDishRoutes/confirmSyncDishes",
      request,
      metadata || {},
      this.methodDescriptorconfirmSyncDishes
    );
  }
};
export {
  SyncDishRoutesClient
};
//# sourceMappingURL=grpc-web-client-gen_SyncDishServiceClientPb.js.map
