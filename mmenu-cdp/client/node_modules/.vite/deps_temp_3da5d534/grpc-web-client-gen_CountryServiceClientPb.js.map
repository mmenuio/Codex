{
  "version": 3,
  "sources": ["../../grpc-web-client-gen/CountryServiceClientPb.ts"],
  "sourcesContent": ["/**\n * @fileoverview gRPC-Web generated client stub for country\n * @enhanceable\n * @public\n */\n\n// Code generated by protoc-gen-grpc-web. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-grpc-web v1.5.0\n// \tprotoc              v3.19.1\n// source: country.proto\n\n\n/* eslint-disable */\n// @ts-nocheck\n\n\nimport * as grpcWeb from 'grpc-web';\n\nimport * as country_pb from './country_pb'; // proto import: \"country.proto\"\n\n\nexport class CountryRoutesClient {\n  client_: grpcWeb.AbstractClientBase;\n  hostname_: string;\n  credentials_: null | { [index: string]: string; };\n  options_: null | { [index: string]: any; };\n\n  constructor (hostname: string,\n               credentials?: null | { [index: string]: string; },\n               options?: null | { [index: string]: any; }) {\n    if (!options) options = {};\n    if (!credentials) credentials = {};\n    options['format'] = 'text';\n\n    this.client_ = new grpcWeb.GrpcWebClientBase(options);\n    this.hostname_ = hostname.replace(/\\/+$/, '');\n    this.credentials_ = credentials;\n    this.options_ = options;\n  }\n\n  methodDescriptorgetCitiesByCountry = new grpcWeb.MethodDescriptor(\n    '/country.CountryRoutes/getCitiesByCountry',\n    grpcWeb.MethodType.UNARY,\n    country_pb.GetCitiesByCountryRequest,\n    country_pb.GetCitiesByCountryResponse,\n    (request: country_pb.GetCitiesByCountryRequest) => {\n      return request.serializeBinary();\n    },\n    country_pb.GetCitiesByCountryResponse.deserializeBinary\n  );\n\n  getCitiesByCountry(\n    request: country_pb.GetCitiesByCountryRequest,\n    metadata?: grpcWeb.Metadata | null): Promise<country_pb.GetCitiesByCountryResponse>;\n\n  getCitiesByCountry(\n    request: country_pb.GetCitiesByCountryRequest,\n    metadata: grpcWeb.Metadata | null,\n    callback: (err: grpcWeb.RpcError,\n               response: country_pb.GetCitiesByCountryResponse) => void): grpcWeb.ClientReadableStream<country_pb.GetCitiesByCountryResponse>;\n\n  getCitiesByCountry(\n    request: country_pb.GetCitiesByCountryRequest,\n    metadata?: grpcWeb.Metadata | null,\n    callback?: (err: grpcWeb.RpcError,\n               response: country_pb.GetCitiesByCountryResponse) => void) {\n    if (callback !== undefined) {\n      return this.client_.rpcCall(\n        this.hostname_ +\n          '/country.CountryRoutes/getCitiesByCountry',\n        request,\n        metadata || {},\n        this.methodDescriptorgetCitiesByCountry,\n        callback);\n    }\n    return this.client_.unaryCall(\n    this.hostname_ +\n      '/country.CountryRoutes/getCitiesByCountry',\n    request,\n    metadata || {},\n    this.methodDescriptorgetCitiesByCountry);\n  }\n\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;AAiBA,cAAyB;AAEzB,iBAA4B;AAGrB,IAAM,sBAAN,MAA0B;AAAA,EAM/B,YAAa,UACA,aACA,SAA4C;AAPzD;AACA;AACA;AACA;AAeA,8DAAqC,IAAY;AAAA,MAC/C;AAAA,MACQ,mBAAW;AAAA,MACR;AAAA,MACA;AAAA,MACX,CAAC,YAAkD;AACjD,eAAO,QAAQ,gBAAgB;AAAA,MACjC;AAAA,MACW,sCAA2B;AAAA,IACxC;AAnBE,QAAI,CAAC,QAAS,WAAU,CAAC;AACzB,QAAI,CAAC,YAAa,eAAc,CAAC;AACjC,YAAQ,QAAQ,IAAI;AAEpB,SAAK,UAAU,IAAY,0BAAkB,OAAO;AACpD,SAAK,YAAY,SAAS,QAAQ,QAAQ,EAAE;AAC5C,SAAK,eAAe;AACpB,SAAK,WAAW;AAAA,EAClB;AAAA,EAuBA,mBACE,SACA,UACA,UACqE;AACrE,QAAI,aAAa,QAAW;AAC1B,aAAO,KAAK,QAAQ;AAAA,QAClB,KAAK,YACH;AAAA,QACF;AAAA,QACA,YAAY,CAAC;AAAA,QACb,KAAK;AAAA,QACL;AAAA,MAAQ;AAAA,IACZ;AACA,WAAO,KAAK,QAAQ;AAAA,MACpB,KAAK,YACH;AAAA,MACF;AAAA,MACA,YAAY,CAAC;AAAA,MACb,KAAK;AAAA,IAAkC;AAAA,EACzC;AAEF;",
  "names": []
}
