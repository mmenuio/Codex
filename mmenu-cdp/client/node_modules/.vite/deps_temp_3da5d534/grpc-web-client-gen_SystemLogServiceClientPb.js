import {
  require_systemLog_pb
} from "./chunk-XIB26DXZ.js";
import {
  require_grpc_web
} from "./chunk-QG4XEIKX.js";
import "./chunk-SZ7F7SCX.js";
import "./chunk-RB4XWN7V.js";
import {
  __publicField,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/grpc-web-client-gen/SystemLogServiceClientPb.ts
var grpcWeb = __toESM(require_grpc_web());
var systemLog_pb = __toESM(require_systemLog_pb());
var SystemLogRoutesClient = class {
  constructor(hostname, credentials, options) {
    __publicField(this, "client_");
    __publicField(this, "hostname_");
    __publicField(this, "credentials_");
    __publicField(this, "options_");
    __publicField(this, "methodDescriptorcreateOrUpdateSystemLog", new grpcWeb.MethodDescriptor(
      "/systemLog.SystemLogRoutes/createOrUpdateSystemLog",
      grpcWeb.MethodType.UNARY,
      systemLog_pb.CreateOrUpdateSystemLogRequest,
      systemLog_pb.CreateOrUpdateSystemLogResponse,
      (request) => {
        return request.serializeBinary();
      },
      systemLog_pb.CreateOrUpdateSystemLogResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorgetAllSystemLogs", new grpcWeb.MethodDescriptor(
      "/systemLog.SystemLogRoutes/getAllSystemLogs",
      grpcWeb.MethodType.UNARY,
      systemLog_pb.GetAllSystemLogsRequest,
      systemLog_pb.GetAllSystemLogsResponse,
      (request) => {
        return request.serializeBinary();
      },
      systemLog_pb.GetAllSystemLogsResponse.deserializeBinary
    ));
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";
    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }
  createOrUpdateSystemLog(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/systemLog.SystemLogRoutes/createOrUpdateSystemLog",
        request,
        metadata || {},
        this.methodDescriptorcreateOrUpdateSystemLog,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/systemLog.SystemLogRoutes/createOrUpdateSystemLog",
      request,
      metadata || {},
      this.methodDescriptorcreateOrUpdateSystemLog
    );
  }
  getAllSystemLogs(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/systemLog.SystemLogRoutes/getAllSystemLogs",
        request,
        metadata || {},
        this.methodDescriptorgetAllSystemLogs,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/systemLog.SystemLogRoutes/getAllSystemLogs",
      request,
      metadata || {},
      this.methodDescriptorgetAllSystemLogs
    );
  }
};
export {
  SystemLogRoutesClient
};
//# sourceMappingURL=grpc-web-client-gen_SystemLogServiceClientPb.js.map
