import {
  require_grpc_web
} from "./chunk-QG4XEIKX.js";
import {
  require_brand_pb
} from "./chunk-MLTZAGGY.js";
import "./chunk-O4IWROO5.js";
import "./chunk-ANXG7VLJ.js";
import "./chunk-SZ7F7SCX.js";
import "./chunk-RB4XWN7V.js";
import {
  __publicField,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/grpc-web-client-gen/BrandServiceClientPb.ts
var grpcWeb = __toESM(require_grpc_web());
var brand_pb = __toESM(require_brand_pb());
var BrandRoutesClient = class {
  constructor(hostname, credentials, options) {
    __publicField(this, "client_");
    __publicField(this, "hostname_");
    __publicField(this, "credentials_");
    __publicField(this, "options_");
    __publicField(this, "methodDescriptorcreateOrUpdateBrand", new grpcWeb.MethodDescriptor(
      "/brand.BrandRoutes/createOrUpdateBrand",
      grpcWeb.MethodType.UNARY,
      brand_pb.CreateOrUpdateBrandRequest,
      brand_pb.CreateOrUpdateBrandResponse,
      (request) => {
        return request.serializeBinary();
      },
      brand_pb.CreateOrUpdateBrandResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorgetBrandById", new grpcWeb.MethodDescriptor(
      "/brand.BrandRoutes/getBrandById",
      grpcWeb.MethodType.UNARY,
      brand_pb.GetBrandByIdRequest,
      brand_pb.GetBrandByIdResponse,
      (request) => {
        return request.serializeBinary();
      },
      brand_pb.GetBrandByIdResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptordeleteBrandById", new grpcWeb.MethodDescriptor(
      "/brand.BrandRoutes/deleteBrandById",
      grpcWeb.MethodType.UNARY,
      brand_pb.DeleteBrandByIdRequest,
      brand_pb.DeleteBrandByIdResponse,
      (request) => {
        return request.serializeBinary();
      },
      brand_pb.DeleteBrandByIdResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorcreateOrUpdateLineConnection", new grpcWeb.MethodDescriptor(
      "/brand.BrandRoutes/createOrUpdateLineConnection",
      grpcWeb.MethodType.UNARY,
      brand_pb.CreateOrUpdateLineConnectionRequest,
      brand_pb.CreateOrUpdateLineConnectionResponse,
      (request) => {
        return request.serializeBinary();
      },
      brand_pb.CreateOrUpdateLineConnectionResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorcreateOrUpdateZaloConnection", new grpcWeb.MethodDescriptor(
      "/brand.BrandRoutes/createOrUpdateZaloConnection",
      grpcWeb.MethodType.UNARY,
      brand_pb.CreateOrUpdateZaloConnectionRequest,
      brand_pb.CreateOrUpdateZaloConnectionResponse,
      (request) => {
        return request.serializeBinary();
      },
      brand_pb.CreateOrUpdateZaloConnectionResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorcreateOrUpdateZaloMiniappConnection", new grpcWeb.MethodDescriptor(
      "/brand.BrandRoutes/createOrUpdateZaloMiniappConnection",
      grpcWeb.MethodType.UNARY,
      brand_pb.CreateOrUpdateZaloMiniappConnectionRequest,
      brand_pb.CreateOrUpdateZaloMiniappConnectionResponse,
      (request) => {
        return request.serializeBinary();
      },
      brand_pb.CreateOrUpdateZaloMiniappConnectionResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorgetAllBrand", new grpcWeb.MethodDescriptor(
      "/brand.BrandRoutes/getAllBrand",
      grpcWeb.MethodType.UNARY,
      brand_pb.GetAllBrandRequest,
      brand_pb.GetAllBrandResponse,
      (request) => {
        return request.serializeBinary();
      },
      brand_pb.GetAllBrandResponse.deserializeBinary
    ));
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";
    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }
  createOrUpdateBrand(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/brand.BrandRoutes/createOrUpdateBrand",
        request,
        metadata || {},
        this.methodDescriptorcreateOrUpdateBrand,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/brand.BrandRoutes/createOrUpdateBrand",
      request,
      metadata || {},
      this.methodDescriptorcreateOrUpdateBrand
    );
  }
  getBrandById(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/brand.BrandRoutes/getBrandById",
        request,
        metadata || {},
        this.methodDescriptorgetBrandById,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/brand.BrandRoutes/getBrandById",
      request,
      metadata || {},
      this.methodDescriptorgetBrandById
    );
  }
  deleteBrandById(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/brand.BrandRoutes/deleteBrandById",
        request,
        metadata || {},
        this.methodDescriptordeleteBrandById,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/brand.BrandRoutes/deleteBrandById",
      request,
      metadata || {},
      this.methodDescriptordeleteBrandById
    );
  }
  createOrUpdateLineConnection(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/brand.BrandRoutes/createOrUpdateLineConnection",
        request,
        metadata || {},
        this.methodDescriptorcreateOrUpdateLineConnection,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/brand.BrandRoutes/createOrUpdateLineConnection",
      request,
      metadata || {},
      this.methodDescriptorcreateOrUpdateLineConnection
    );
  }
  createOrUpdateZaloConnection(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/brand.BrandRoutes/createOrUpdateZaloConnection",
        request,
        metadata || {},
        this.methodDescriptorcreateOrUpdateZaloConnection,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/brand.BrandRoutes/createOrUpdateZaloConnection",
      request,
      metadata || {},
      this.methodDescriptorcreateOrUpdateZaloConnection
    );
  }
  createOrUpdateZaloMiniappConnection(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/brand.BrandRoutes/createOrUpdateZaloMiniappConnection",
        request,
        metadata || {},
        this.methodDescriptorcreateOrUpdateZaloMiniappConnection,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/brand.BrandRoutes/createOrUpdateZaloMiniappConnection",
      request,
      metadata || {},
      this.methodDescriptorcreateOrUpdateZaloMiniappConnection
    );
  }
  getAllBrand(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/brand.BrandRoutes/getAllBrand",
        request,
        metadata || {},
        this.methodDescriptorgetAllBrand,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/brand.BrandRoutes/getAllBrand",
      request,
      metadata || {},
      this.methodDescriptorgetAllBrand
    );
  }
};
export {
  BrandRoutesClient
};
//# sourceMappingURL=grpc-web-client-gen_BrandServiceClientPb.js.map
