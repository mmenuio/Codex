import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext, HttpFile } from "../../datadog-api-client-common/http/http";
import { CloudWorkloadSecurityAgentRuleCreateRequest } from "../models/CloudWorkloadSecurityAgentRuleCreateRequest";
import { CloudWorkloadSecurityAgentRuleResponse } from "../models/CloudWorkloadSecurityAgentRuleResponse";
import { CloudWorkloadSecurityAgentRulesListResponse } from "../models/CloudWorkloadSecurityAgentRulesListResponse";
import { CloudWorkloadSecurityAgentRuleUpdateRequest } from "../models/CloudWorkloadSecurityAgentRuleUpdateRequest";
export declare class CloudWorkloadSecurityApiRequestFactory extends BaseAPIRequestFactory {
    createCloudWorkloadSecurityAgentRule(body: CloudWorkloadSecurityAgentRuleCreateRequest, _options?: Configuration): Promise<RequestContext>;
    deleteCloudWorkloadSecurityAgentRule(agentRuleId: string, _options?: Configuration): Promise<RequestContext>;
    downloadCloudWorkloadPolicyFile(_options?: Configuration): Promise<RequestContext>;
    getCloudWorkloadSecurityAgentRule(agentRuleId: string, _options?: Configuration): Promise<RequestContext>;
    listCloudWorkloadSecurityAgentRules(_options?: Configuration): Promise<RequestContext>;
    updateCloudWorkloadSecurityAgentRule(agentRuleId: string, body: CloudWorkloadSecurityAgentRuleUpdateRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class CloudWorkloadSecurityApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createCloudWorkloadSecurityAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    createCloudWorkloadSecurityAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCloudWorkloadSecurityAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCloudWorkloadSecurityAgentRule(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to downloadCloudWorkloadPolicyFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    downloadCloudWorkloadPolicyFile(response: ResponseContext): Promise<HttpFile>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCloudWorkloadSecurityAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCloudWorkloadSecurityAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to listCloudWorkloadSecurityAgentRules
     * @throws ApiException if the response code was not in [200, 299]
     */
    listCloudWorkloadSecurityAgentRules(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRulesListResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCloudWorkloadSecurityAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCloudWorkloadSecurityAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
}
export interface CloudWorkloadSecurityApiCreateCloudWorkloadSecurityAgentRuleRequest {
    /**
     * The definition of the new Agent rule.
     * @type CloudWorkloadSecurityAgentRuleCreateRequest
     */
    body: CloudWorkloadSecurityAgentRuleCreateRequest;
}
export interface CloudWorkloadSecurityApiDeleteCloudWorkloadSecurityAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
}
export interface CloudWorkloadSecurityApiGetCloudWorkloadSecurityAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
}
export interface CloudWorkloadSecurityApiUpdateCloudWorkloadSecurityAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
    /**
     * New definition of the Agent rule.
     * @type CloudWorkloadSecurityAgentRuleUpdateRequest
     */
    body: CloudWorkloadSecurityAgentRuleUpdateRequest;
}
export declare class CloudWorkloadSecurityApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CloudWorkloadSecurityApiRequestFactory, responseProcessor?: CloudWorkloadSecurityApiResponseProcessor);
    /**
     * Create a new Agent rule with the given parameters.
     * @param param The request object
     */
    createCloudWorkloadSecurityAgentRule(param: CloudWorkloadSecurityApiCreateCloudWorkloadSecurityAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Delete a specific Agent rule.
     * @param param The request object
     */
    deleteCloudWorkloadSecurityAgentRule(param: CloudWorkloadSecurityApiDeleteCloudWorkloadSecurityAgentRuleRequest, options?: Configuration): Promise<void>;
    /**
     * The download endpoint generates a Cloud Workload Security policy file from your currently active
     * Cloud Workload Security rules, and downloads them as a .policy file. This file can then be deployed to
     * your Agents to update the policy running in your environment.
     * @param param The request object
     */
    downloadCloudWorkloadPolicyFile(options?: Configuration): Promise<HttpFile>;
    /**
     * Get the details of a specific Agent rule.
     * @param param The request object
     */
    getCloudWorkloadSecurityAgentRule(param: CloudWorkloadSecurityApiGetCloudWorkloadSecurityAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Get the list of Agent rules.
     * @param param The request object
     */
    listCloudWorkloadSecurityAgentRules(options?: Configuration): Promise<CloudWorkloadSecurityAgentRulesListResponse>;
    /**
     * Update a specific Agent rule.
     * Returns the Agent rule object when the request is successful.
     * @param param The request object
     */
    updateCloudWorkloadSecurityAgentRule(param: CloudWorkloadSecurityApiUpdateCloudWorkloadSecurityAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
}
