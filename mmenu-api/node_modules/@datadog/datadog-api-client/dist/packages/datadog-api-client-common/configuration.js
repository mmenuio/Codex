"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySecurityAuthentication = exports.setServerVariables = exports.getServer = exports.createConfiguration = void 0;
const isomorphic_fetch_1 = require("./http/isomorphic-fetch");
const servers_1 = require("./servers");
const auth_1 = require("./auth");
/**
 * Configuration factory function
 *
 * If a property is not included in conf, a default is used:
 *    - baseServer: null
 *    - serverIndex: 0
 *    - operationServerIndices: {}
 *    - httpApi: IsomorphicFetchHttpLibrary
 *    - authMethods: {}
 *    - httpConfig: {}
 *    - debug: false
 *
 * @param conf partial configuration
 */
function createConfiguration(conf = {}) {
    if (typeof process !== "undefined" && process.env && process.env.DD_SITE) {
        const serverConf = servers_1.server1.getConfiguration();
        servers_1.server1.setVariables({ site: process.env.DD_SITE });
        for (const op in servers_1.operationServers) {
            servers_1.operationServers[op][0].setVariables({ site: process.env.DD_SITE });
        }
    }
    const authMethods = conf.authMethods || {};
    if (!("apiKeyAuth" in authMethods) &&
        typeof process !== "undefined" &&
        process.env &&
        process.env.DD_API_KEY) {
        authMethods["apiKeyAuth"] = process.env.DD_API_KEY;
    }
    if (!("appKeyAuth" in authMethods) &&
        typeof process !== "undefined" &&
        process.env &&
        process.env.DD_APP_KEY) {
        authMethods["appKeyAuth"] = process.env.DD_APP_KEY;
    }
    const configuration = {
        baseServer: conf.baseServer,
        serverIndex: conf.serverIndex || 0,
        operationServerIndices: conf.operationServerIndices || {},
        unstableOperations: {
            "v2.listEvents": false,
            "v2.searchEvents": false,
            "v2.createIncident": false,
            "v2.createIncidentIntegration": false,
            "v2.deleteIncident": false,
            "v2.deleteIncidentIntegration": false,
            "v2.getIncident": false,
            "v2.getIncidentIntegration": false,
            "v2.listIncidentAttachments": false,
            "v2.listIncidentIntegrations": false,
            "v2.listIncidents": false,
            "v2.searchIncidents": false,
            "v2.updateIncident": false,
            "v2.updateIncidentAttachments": false,
            "v2.updateIncidentIntegration": false,
            "v2.queryScalarData": false,
            "v2.queryTimeseriesData": false,
            "v2.createIncidentService": false,
            "v2.deleteIncidentService": false,
            "v2.getIncidentService": false,
            "v2.listIncidentServices": false,
            "v2.updateIncidentService": false,
            "v2.createIncidentTeam": false,
            "v2.deleteIncidentTeam": false,
            "v2.getIncidentTeam": false,
            "v2.listIncidentTeams": false,
            "v2.updateIncidentTeam": false,
        },
        httpApi: conf.httpApi || new isomorphic_fetch_1.IsomorphicFetchHttpLibrary(),
        authMethods: (0, auth_1.configureAuthMethods)(authMethods),
        httpConfig: conf.httpConfig || {},
        debug: conf.debug,
    };
    configuration.httpApi.zstdCompressorCallback = conf.zstdCompressorCallback;
    configuration.httpApi.debug = configuration.debug;
    return configuration;
}
exports.createConfiguration = createConfiguration;
function getServer(conf, endpoint) {
    if (conf.baseServer !== undefined) {
        return conf.baseServer;
    }
    const index = endpoint in conf.operationServerIndices
        ? conf.operationServerIndices[endpoint]
        : conf.serverIndex;
    return endpoint in servers_1.operationServers
        ? servers_1.operationServers[endpoint][index]
        : servers_1.servers[index];
}
exports.getServer = getServer;
/**
 * Sets the server variables.
 *
 * @param serverVariables key/value object representing the server variables (site, name, protocol, ...)
 */
function setServerVariables(conf, serverVariables) {
    if (conf.baseServer !== undefined) {
        conf.baseServer.setVariables(serverVariables);
        return;
    }
    const index = conf.serverIndex;
    servers_1.servers[index].setVariables(serverVariables);
    for (const op in servers_1.operationServers) {
        servers_1.operationServers[op][0].setVariables(serverVariables);
    }
}
exports.setServerVariables = setServerVariables;
/**
 * Apply given security authentication method if avaiable in configuration.
 */
function applySecurityAuthentication(conf, requestContext, authMethods) {
    for (const authMethodName of authMethods) {
        const authMethod = conf.authMethods[authMethodName];
        if (authMethod) {
            authMethod.applySecurityAuthentication(requestContext);
        }
    }
}
exports.applySecurityAuthentication = applySecurityAuthentication;
//# sourceMappingURL=configuration.js.map