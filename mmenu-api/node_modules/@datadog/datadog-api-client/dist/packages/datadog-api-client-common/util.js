"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dateToRFC3339String = exports.dateFromRFC3339String = exports.DDate = exports.isNode = exports.isBrowser = exports.UnparsedObject = void 0;
class UnparsedObject {
    constructor(data) {
        this._data = data;
    }
}
exports.UnparsedObject = UnparsedObject;
exports.isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
exports.isNode = typeof process !== "undefined" &&
    process.release &&
    process.release.name === "node";
class DDate extends Date {
}
exports.DDate = DDate;
const RFC3339Re = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})\.?(\d+)?(?:(?:([+-]\d{2}):?(\d{2}))|Z)?$/;
function dateFromRFC3339String(date) {
    const m = RFC3339Re.exec(date);
    if (m) {
        const _date = new DDate(date);
        if (m[8] === undefined && m[9] === undefined) {
            _date.rfc3339TzOffset = "Z";
        }
        else {
            _date.rfc3339TzOffset = `${m[8]}:${m[9]}`;
        }
        return _date;
    }
    else {
        throw new Error("unexpected date format: " + date);
    }
}
exports.dateFromRFC3339String = dateFromRFC3339String;
function dateToRFC3339String(date) {
    const offSetArr = getRFC3339TimezoneOffset(date).split(":");
    const tzHour = offSetArr.length == 1 ? 0 : +offSetArr[0];
    const tzMin = offSetArr.length == 1 ? 0 : +offSetArr[1];
    const year = date.getFullYear();
    const month = date.getMonth();
    const day = date.getUTCDate();
    const hour = date.getUTCHours() + +tzHour;
    const minute = date.getUTCMinutes() + +tzMin;
    const second = date.getUTCSeconds();
    let msec = date.getUTCMilliseconds().toString();
    msec = +msec === 0 ? "" : `.${pad(+msec, 3)}`;
    return (year +
        "-" +
        pad(month + 1) +
        "-" +
        pad(day) +
        "T" +
        pad(hour) +
        ":" +
        pad(minute) +
        ":" +
        pad(second) +
        msec +
        offSetArr.join(":"));
}
exports.dateToRFC3339String = dateToRFC3339String;
// Helpers
function pad(num, len = 2) {
    let paddedNum = num.toString();
    if (paddedNum.length < len) {
        paddedNum = "0".repeat(len - paddedNum.length) + paddedNum;
    }
    else if (paddedNum.length > len) {
        paddedNum = paddedNum.slice(0, len);
    }
    return paddedNum;
}
function getRFC3339TimezoneOffset(date) {
    if (date instanceof DDate && date.rfc3339TzOffset) {
        return date.rfc3339TzOffset;
    }
    let offset = date.getTimezoneOffset();
    if (offset === 0) {
        return "Z";
    }
    const offsetSign = offset > 0 ? "+" : "-";
    offset = Math.abs(offset);
    return offsetSign + pad(Math.floor(offset / 60)) + ":" + pad(offset % 60);
}
//# sourceMappingURL=util.js.map