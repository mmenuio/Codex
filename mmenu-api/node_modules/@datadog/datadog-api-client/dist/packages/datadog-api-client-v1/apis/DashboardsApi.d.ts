import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { Dashboard } from "../models/Dashboard";
import { DashboardBulkDeleteRequest } from "../models/DashboardBulkDeleteRequest";
import { DashboardDeleteResponse } from "../models/DashboardDeleteResponse";
import { DashboardRestoreRequest } from "../models/DashboardRestoreRequest";
import { DashboardSummary } from "../models/DashboardSummary";
export declare class DashboardsApiRequestFactory extends BaseAPIRequestFactory {
    createDashboard(body: Dashboard, _options?: Configuration): Promise<RequestContext>;
    deleteDashboard(dashboardId: string, _options?: Configuration): Promise<RequestContext>;
    deleteDashboards(body: DashboardBulkDeleteRequest, _options?: Configuration): Promise<RequestContext>;
    getDashboard(dashboardId: string, _options?: Configuration): Promise<RequestContext>;
    listDashboards(filterShared?: boolean, filterDeleted?: boolean, _options?: Configuration): Promise<RequestContext>;
    restoreDashboards(body: DashboardRestoreRequest, _options?: Configuration): Promise<RequestContext>;
    updateDashboard(dashboardId: string, body: Dashboard, _options?: Configuration): Promise<RequestContext>;
}
export declare class DashboardsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createDashboard
     * @throws ApiException if the response code was not in [200, 299]
     */
    createDashboard(response: ResponseContext): Promise<Dashboard>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteDashboard
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteDashboard(response: ResponseContext): Promise<DashboardDeleteResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteDashboards
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteDashboards(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getDashboard
     * @throws ApiException if the response code was not in [200, 299]
     */
    getDashboard(response: ResponseContext): Promise<Dashboard>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to listDashboards
     * @throws ApiException if the response code was not in [200, 299]
     */
    listDashboards(response: ResponseContext): Promise<DashboardSummary>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to restoreDashboards
     * @throws ApiException if the response code was not in [200, 299]
     */
    restoreDashboards(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateDashboard
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateDashboard(response: ResponseContext): Promise<Dashboard>;
}
export interface DashboardsApiCreateDashboardRequest {
    /**
     * Create a dashboard request body.
     * @type Dashboard
     */
    body: Dashboard;
}
export interface DashboardsApiDeleteDashboardRequest {
    /**
     * The ID of the dashboard.
     * @type string
     */
    dashboardId: string;
}
export interface DashboardsApiDeleteDashboardsRequest {
    /**
     * Delete dashboards request body.
     * @type DashboardBulkDeleteRequest
     */
    body: DashboardBulkDeleteRequest;
}
export interface DashboardsApiGetDashboardRequest {
    /**
     * The ID of the dashboard.
     * @type string
     */
    dashboardId: string;
}
export interface DashboardsApiListDashboardsRequest {
    /**
     * When `true`, this query only returns shared custom created
     * or cloned dashboards.
     * @type boolean
     */
    filterShared?: boolean;
    /**
     * When `true`, this query returns only deleted custom-created
     * or cloned dashboards. This parameter is incompatible with `filter[shared]`.
     * @type boolean
     */
    filterDeleted?: boolean;
}
export interface DashboardsApiRestoreDashboardsRequest {
    /**
     * Restore dashboards request body.
     * @type DashboardRestoreRequest
     */
    body: DashboardRestoreRequest;
}
export interface DashboardsApiUpdateDashboardRequest {
    /**
     * The ID of the dashboard.
     * @type string
     */
    dashboardId: string;
    /**
     * Update Dashboard request body.
     * @type Dashboard
     */
    body: Dashboard;
}
export declare class DashboardsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DashboardsApiRequestFactory, responseProcessor?: DashboardsApiResponseProcessor);
    /**
     * Create a dashboard using the specified options. When defining queries in your widgets, take note of which queries should have the `as_count()` or `as_rate()` modifiers appended.
     * Refer to the following [documentation](https://docs.datadoghq.com/developers/metrics/type_modifiers/?tab=count#in-application-modifiers) for more information on these modifiers.
     * @param param The request object
     */
    createDashboard(param: DashboardsApiCreateDashboardRequest, options?: Configuration): Promise<Dashboard>;
    /**
     * Delete a dashboard using the specified ID.
     * @param param The request object
     */
    deleteDashboard(param: DashboardsApiDeleteDashboardRequest, options?: Configuration): Promise<DashboardDeleteResponse>;
    /**
     * Delete dashboards using the specified IDs. If there are any failures, no dashboards will be deleted (partial success is not allowed).
     * @param param The request object
     */
    deleteDashboards(param: DashboardsApiDeleteDashboardsRequest, options?: Configuration): Promise<void>;
    /**
     * Get a dashboard using the specified ID.
     * @param param The request object
     */
    getDashboard(param: DashboardsApiGetDashboardRequest, options?: Configuration): Promise<Dashboard>;
    /**
     * Get all dashboards.
     *
     * **Note**: This query will only return custom created or cloned dashboards.
     * This query will not return preset dashboards.
     * @param param The request object
     */
    listDashboards(param?: DashboardsApiListDashboardsRequest, options?: Configuration): Promise<DashboardSummary>;
    /**
     * Restore dashboards using the specified IDs. If there are any failures, no dashboards will be restored (partial success is not allowed).
     * @param param The request object
     */
    restoreDashboards(param: DashboardsApiRestoreDashboardsRequest, options?: Configuration): Promise<void>;
    /**
     * Update a dashboard using the specified ID.
     * @param param The request object
     */
    updateDashboard(param: DashboardsApiUpdateDashboardRequest, options?: Configuration): Promise<Dashboard>;
}
