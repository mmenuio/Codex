import {
  require_grpc_web
} from "./chunk-VUKTO5OO.js";
import {
  require_employee_pb
} from "./chunk-L6Y2ZZQ2.js";
import {
  require_common_pb
} from "./chunk-3UWK2XUZ.js";
import {
  __publicField,
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/grpc-web-client-gen/serving/services/Employee_serviceServiceClientPb.ts
var grpcWeb = __toESM(require_grpc_web());
var serving_models_employee_pb = __toESM(require_employee_pb());
var serving_models_common_pb = __toESM(require_common_pb());
var EmployeeServiceClient = class {
  constructor(hostname, credentials, options) {
    __publicField(this, "client_");
    __publicField(this, "hostname_");
    __publicField(this, "credentials_");
    __publicField(this, "options_");
    __publicField(this, "methodDescriptorGetEmployee", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.EmployeeService/GetEmployee",
      grpcWeb.MethodType.UNARY,
      serving_models_employee_pb.GetEmployeeRequest,
      serving_models_employee_pb.GetEmployeeResponse,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_employee_pb.GetEmployeeResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorGetEmployees", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.EmployeeService/GetEmployees",
      grpcWeb.MethodType.UNARY,
      serving_models_employee_pb.GetEmployeesRequest,
      serving_models_employee_pb.GetEmployeesResponse,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_employee_pb.GetEmployeesResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorCreateEmployee", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.EmployeeService/CreateEmployee",
      grpcWeb.MethodType.UNARY,
      serving_models_employee_pb.CreateEmployeeRequest,
      serving_models_common_pb.Response,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_common_pb.Response.deserializeBinary
    ));
    __publicField(this, "methodDescriptorUpdateEmployee", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.EmployeeService/UpdateEmployee",
      grpcWeb.MethodType.UNARY,
      serving_models_employee_pb.UpdateEmployeeRequest,
      serving_models_common_pb.Response,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_common_pb.Response.deserializeBinary
    ));
    __publicField(this, "methodDescriptorDeleteEmployee", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.EmployeeService/DeleteEmployee",
      grpcWeb.MethodType.UNARY,
      serving_models_employee_pb.DeleteEmployeeRequest,
      serving_models_common_pb.Response,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_common_pb.Response.deserializeBinary
    ));
    if (!options)
      options = {};
    if (!credentials)
      credentials = {};
    options["format"] = "text";
    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }
  getEmployee(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.EmployeeService/GetEmployee",
        request,
        metadata || {},
        this.methodDescriptorGetEmployee,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.EmployeeService/GetEmployee",
      request,
      metadata || {},
      this.methodDescriptorGetEmployee
    );
  }
  getEmployees(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.EmployeeService/GetEmployees",
        request,
        metadata || {},
        this.methodDescriptorGetEmployees,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.EmployeeService/GetEmployees",
      request,
      metadata || {},
      this.methodDescriptorGetEmployees
    );
  }
  createEmployee(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.EmployeeService/CreateEmployee",
        request,
        metadata || {},
        this.methodDescriptorCreateEmployee,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.EmployeeService/CreateEmployee",
      request,
      metadata || {},
      this.methodDescriptorCreateEmployee
    );
  }
  updateEmployee(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.EmployeeService/UpdateEmployee",
        request,
        metadata || {},
        this.methodDescriptorUpdateEmployee,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.EmployeeService/UpdateEmployee",
      request,
      metadata || {},
      this.methodDescriptorUpdateEmployee
    );
  }
  deleteEmployee(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.EmployeeService/DeleteEmployee",
        request,
        metadata || {},
        this.methodDescriptorDeleteEmployee,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.EmployeeService/DeleteEmployee",
      request,
      metadata || {},
      this.methodDescriptorDeleteEmployee
    );
  }
};
export {
  EmployeeServiceClient
};
//# sourceMappingURL=grpc-web-client-gen_serving_services_Employee_serviceServiceClientPb.js.map
