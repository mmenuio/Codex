import {
  require_grpc_web
} from "./chunk-VUKTO5OO.js";
import {
  require_company_pb
} from "./chunk-ZX7RMFQY.js";
import {
  require_common_pb
} from "./chunk-3UWK2XUZ.js";
import {
  __publicField,
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/grpc-web-client-gen/serving/services/Company_serviceServiceClientPb.ts
var grpcWeb = __toESM(require_grpc_web());
var serving_models_company_pb = __toESM(require_company_pb());
var serving_models_common_pb = __toESM(require_common_pb());
var CompanyServiceClient = class {
  constructor(hostname, credentials, options) {
    __publicField(this, "client_");
    __publicField(this, "hostname_");
    __publicField(this, "credentials_");
    __publicField(this, "options_");
    __publicField(this, "methodDescriptorGetCompany", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.CompanyService/GetCompany",
      grpcWeb.MethodType.UNARY,
      serving_models_company_pb.GetCompanyRequest,
      serving_models_company_pb.GetCompanyResponse,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_company_pb.GetCompanyResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorGetCompanies", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.CompanyService/GetCompanies",
      grpcWeb.MethodType.UNARY,
      serving_models_company_pb.GetCompaniesRequest,
      serving_models_company_pb.GetCompaniesResponse,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_company_pb.GetCompaniesResponse.deserializeBinary
    ));
    __publicField(this, "methodDescriptorCreateCompany", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.CompanyService/CreateCompany",
      grpcWeb.MethodType.UNARY,
      serving_models_company_pb.CreateCompanyRequest,
      serving_models_common_pb.Response,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_common_pb.Response.deserializeBinary
    ));
    __publicField(this, "methodDescriptorUpdateCompany", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.CompanyService/UpdateCompany",
      grpcWeb.MethodType.UNARY,
      serving_models_company_pb.UpdateCompanyRequest,
      serving_models_common_pb.Response,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_common_pb.Response.deserializeBinary
    ));
    __publicField(this, "methodDescriptorDeleteCompany", new grpcWeb.MethodDescriptor(
      "/mmenu.hrm.serving.CompanyService/DeleteCompany",
      grpcWeb.MethodType.UNARY,
      serving_models_company_pb.DeleteCompanyRequest,
      serving_models_common_pb.Response,
      (request) => {
        return request.serializeBinary();
      },
      serving_models_common_pb.Response.deserializeBinary
    ));
    if (!options)
      options = {};
    if (!credentials)
      credentials = {};
    options["format"] = "text";
    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }
  getCompany(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.CompanyService/GetCompany",
        request,
        metadata || {},
        this.methodDescriptorGetCompany,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.CompanyService/GetCompany",
      request,
      metadata || {},
      this.methodDescriptorGetCompany
    );
  }
  getCompanies(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.CompanyService/GetCompanies",
        request,
        metadata || {},
        this.methodDescriptorGetCompanies,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.CompanyService/GetCompanies",
      request,
      metadata || {},
      this.methodDescriptorGetCompanies
    );
  }
  createCompany(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.CompanyService/CreateCompany",
        request,
        metadata || {},
        this.methodDescriptorCreateCompany,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.CompanyService/CreateCompany",
      request,
      metadata || {},
      this.methodDescriptorCreateCompany
    );
  }
  updateCompany(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.CompanyService/UpdateCompany",
        request,
        metadata || {},
        this.methodDescriptorUpdateCompany,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.CompanyService/UpdateCompany",
      request,
      metadata || {},
      this.methodDescriptorUpdateCompany
    );
  }
  deleteCompany(request, metadata, callback) {
    if (callback !== void 0) {
      return this.client_.rpcCall(
        this.hostname_ + "/mmenu.hrm.serving.CompanyService/DeleteCompany",
        request,
        metadata || {},
        this.methodDescriptorDeleteCompany,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mmenu.hrm.serving.CompanyService/DeleteCompany",
      request,
      metadata || {},
      this.methodDescriptorDeleteCompany
    );
  }
};
export {
  CompanyServiceClient
};
//# sourceMappingURL=grpc-web-client-gen_serving_services_Company_serviceServiceClientPb.js.map
